
I2C_sensors.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002696  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000000fe  00800060  00002696  0000272a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000009b  0080015e  0080015e  00002828  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00002828  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00002884  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000280  00000000  00000000  000028c0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00003796  00000000  00000000  00002b40  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001203  00000000  00000000  000062d6  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000196e  00000000  00000000  000074d9  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000065c  00000000  00000000  00008e48  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000008ae  00000000  00000000  000094a4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000025f7  00000000  00000000  00009d52  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000002b0  00000000  00000000  0000c349  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 a7 00 	jmp	0x14e	; 0x14e <__ctors_end>
       4:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
       8:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
       c:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
      10:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
      14:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
      18:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
      1c:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
      20:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
      24:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
      28:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
      2c:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
      30:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
      34:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
      38:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
      3c:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
      40:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
      44:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
      48:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
      4c:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
      50:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>

00000054 <__trampolines_end>:
      54:	00 40       	sbci	r16, 0x00	; 0
      56:	7a 10       	cpse	r7, r10
      58:	f3 5a       	subi	r31, 0xA3	; 163
      5a:	00 a0       	ldd	r0, Z+32	; 0x20
      5c:	72 4e       	sbci	r23, 0xE2	; 226
      5e:	18 09       	sbc	r17, r8
      60:	00 10       	cpse	r0, r0
      62:	a5 d4       	rcall	.+2378   	; 0x9ae <show_heart_rate+0x11c>
      64:	e8 00       	.word	0x00e8	; ????
      66:	00 e8       	ldi	r16, 0x80	; 128
      68:	76 48       	sbci	r23, 0x86	; 134
      6a:	17 00       	.word	0x0017	; ????
      6c:	00 e4       	ldi	r16, 0x40	; 64
      6e:	0b 54       	subi	r16, 0x4B	; 75
      70:	02 00       	.word	0x0002	; ????
      72:	00 ca       	rjmp	.-3072   	; 0xfffff474 <__eeprom_end+0xff7ef474>
      74:	9a 3b       	cpi	r25, 0xBA	; 186
      76:	00 00       	nop
      78:	00 e1       	ldi	r16, 0x10	; 16
      7a:	f5 05       	cpc	r31, r5
      7c:	00 00       	nop
      7e:	80 96       	adiw	r24, 0x20	; 32
      80:	98 00       	.word	0x0098	; ????
      82:	00 00       	nop
      84:	40 42       	sbci	r20, 0x20	; 32
      86:	0f 00       	.word	0x000f	; ????
      88:	00 00       	nop
      8a:	a0 86       	std	Z+8, r10	; 0x08
      8c:	01 00       	.word	0x0001	; ????
      8e:	00 00       	nop
      90:	10 27       	eor	r17, r16
      92:	00 00       	nop
      94:	00 00       	nop
      96:	e8 03       	fmulsu	r22, r16
      98:	00 00       	nop
      9a:	00 00       	nop
      9c:	64 00       	.word	0x0064	; ????
      9e:	00 00       	nop
      a0:	00 00       	nop
      a2:	0a 00       	.word	0x000a	; ????
      a4:	00 00       	nop
      a6:	00 00       	nop
      a8:	01 00       	.word	0x0001	; ????
      aa:	00 00       	nop
      ac:	00 00       	nop
      ae:	2c 76       	andi	r18, 0x6C	; 108
      b0:	d8 88       	ldd	r13, Y+16	; 0x10
      b2:	dc 67       	ori	r29, 0x7C	; 124
      b4:	4f 08       	sbc	r4, r15
      b6:	23 df       	rcall	.-442    	; 0xfffffefe <__eeprom_end+0xff7efefe>
      b8:	c1 df       	rcall	.-126    	; 0x3c <__FUSE_REGION_LENGTH__+0x3a>
      ba:	ae 59       	subi	r26, 0x9E	; 158
      bc:	e1 b1       	in	r30, 0x01	; 1
      be:	b7 96       	adiw	r30, 0x27	; 39
      c0:	e5 e3       	ldi	r30, 0x35	; 53
      c2:	e4 53       	subi	r30, 0x34	; 52
      c4:	c6 3a       	cpi	r28, 0xA6	; 166
      c6:	e6 51       	subi	r30, 0x16	; 22
      c8:	99 76       	andi	r25, 0x69	; 105
      ca:	96 e8       	ldi	r25, 0x86	; 134
      cc:	e6 c2       	rjmp	.+1484   	; 0x69a <xysum+0x32>
      ce:	84 26       	eor	r8, r20
      d0:	eb 89       	ldd	r30, Y+19	; 0x13
      d2:	8c 9b       	sbis	0x11, 4	; 17
      d4:	62 ed       	ldi	r22, 0xD2	; 210
      d6:	40 7c       	andi	r20, 0xC0	; 192
      d8:	6f fc       	.word	0xfc6f	; ????
      da:	ef bc       	out	0x2f, r14	; 47
      dc:	9c 9f       	mul	r25, r28
      de:	40 f2       	brcs	.-112    	; 0x70 <__trampolines_end+0x1c>
      e0:	ba a5       	ldd	r27, Y+42	; 0x2a
      e2:	6f a5       	ldd	r22, Y+47	; 0x2f
      e4:	f4 90       	lpm	r15, Z
      e6:	05 5a       	subi	r16, 0xA5	; 165
      e8:	2a f7       	brpl	.-54     	; 0xb4 <__trampolines_end+0x60>
      ea:	5c 93       	st	X, r21
      ec:	6b 6c       	ori	r22, 0xCB	; 203
      ee:	f9 67       	ori	r31, 0x79	; 121
      f0:	6d c1       	rjmp	.+730    	; 0x3cc <lcd_sendData+0x8>
      f2:	1b fc       	.word	0xfc1b	; ????
      f4:	e0 e4       	ldi	r30, 0x40	; 64
      f6:	0d 47       	sbci	r16, 0x7D	; 125
      f8:	fe f5       	brtc	.+126    	; 0x178 <.do_clear_bss_loop>
      fa:	20 e6       	ldi	r18, 0x60	; 96
      fc:	b5 00       	.word	0x00b5	; ????
      fe:	d0 ed       	ldi	r29, 0xD0	; 208
     100:	90 2e       	mov	r9, r16
     102:	03 00       	.word	0x0003	; ????
     104:	94 35       	cpi	r25, 0x54	; 84
     106:	77 05       	cpc	r23, r7
     108:	00 80       	ld	r0, Z
     10a:	84 1e       	adc	r8, r20
     10c:	08 00       	.word	0x0008	; ????
     10e:	00 20       	and	r0, r0
     110:	4e 0a       	sbc	r4, r30
     112:	00 00       	nop
     114:	00 c8       	rjmp	.-4096   	; 0xfffff116 <__eeprom_end+0xff7ef116>
     116:	0c 33       	cpi	r16, 0x3C	; 60
     118:	33 33       	cpi	r19, 0x33	; 51
     11a:	33 0f       	add	r19, r19
     11c:	98 6e       	ori	r25, 0xE8	; 232
     11e:	12 83       	std	Z+2, r17	; 0x02
     120:	11 41       	sbci	r17, 0x11	; 17
     122:	ef 8d       	ldd	r30, Y+31	; 0x1f
     124:	21 14       	cp	r2, r1
     126:	89 3b       	cpi	r24, 0xB9	; 185
     128:	e6 55       	subi	r30, 0x56	; 86
     12a:	16 cf       	rjmp	.-468    	; 0xffffff58 <__eeprom_end+0xff7eff58>
     12c:	fe e6       	ldi	r31, 0x6E	; 110
     12e:	db 18       	sub	r13, r11
     130:	d1 84       	ldd	r13, Z+9	; 0x09
     132:	4b 38       	cpi	r20, 0x8B	; 139
     134:	1b f7       	brvc	.-58     	; 0xfc <__trampolines_end+0xa8>
     136:	7c 1d       	adc	r23, r12
     138:	90 1d       	adc	r25, r0
     13a:	a4 bb       	out	0x14, r26	; 20
     13c:	e4 24       	eor	r14, r4
     13e:	20 32       	cpi	r18, 0x20	; 32
     140:	84 72       	andi	r24, 0x24	; 36
     142:	5e 22       	and	r5, r30
     144:	81 00       	.word	0x0081	; ????
     146:	c9 f1       	breq	.+114    	; 0x1ba <ADC_Read+0x22>
     148:	24 ec       	ldi	r18, 0xC4	; 196
     14a:	a1 e5       	ldi	r26, 0x51	; 81
     14c:	3d 27       	eor	r19, r29

0000014e <__ctors_end>:
     14e:	11 24       	eor	r1, r1
     150:	1f be       	out	0x3f, r1	; 63
     152:	cf e5       	ldi	r28, 0x5F	; 95
     154:	d8 e0       	ldi	r29, 0x08	; 8
     156:	de bf       	out	0x3e, r29	; 62
     158:	cd bf       	out	0x3d, r28	; 61

0000015a <__do_copy_data>:
     15a:	11 e0       	ldi	r17, 0x01	; 1
     15c:	a0 e6       	ldi	r26, 0x60	; 96
     15e:	b0 e0       	ldi	r27, 0x00	; 0
     160:	e6 e9       	ldi	r30, 0x96	; 150
     162:	f6 e2       	ldi	r31, 0x26	; 38
     164:	02 c0       	rjmp	.+4      	; 0x16a <__do_copy_data+0x10>
     166:	05 90       	lpm	r0, Z+
     168:	0d 92       	st	X+, r0
     16a:	ae 35       	cpi	r26, 0x5E	; 94
     16c:	b1 07       	cpc	r27, r17
     16e:	d9 f7       	brne	.-10     	; 0x166 <__do_copy_data+0xc>

00000170 <__do_clear_bss>:
     170:	21 e0       	ldi	r18, 0x01	; 1
     172:	ae e5       	ldi	r26, 0x5E	; 94
     174:	b1 e0       	ldi	r27, 0x01	; 1
     176:	01 c0       	rjmp	.+2      	; 0x17a <.do_clear_bss_start>

00000178 <.do_clear_bss_loop>:
     178:	1d 92       	st	X+, r1

0000017a <.do_clear_bss_start>:
     17a:	a9 3f       	cpi	r26, 0xF9	; 249
     17c:	b2 07       	cpc	r27, r18
     17e:	e1 f7       	brne	.-8      	; 0x178 <.do_clear_bss_loop>
     180:	0e 94 34 06 	call	0xc68	; 0xc68 <main>
     184:	0c 94 49 13 	jmp	0x2692	; 0x2692 <_exit>

00000188 <__bad_interrupt>:
     188:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000018c <ADC_Init>:
#include "ADC.h"

void ADC_Init()
{										
	DDRA = 0x00;							        
     18c:	1a ba       	out	0x1a, r1	; 26
	ADCSRA = 0x87;									
     18e:	87 e8       	ldi	r24, 0x87	; 135
     190:	86 b9       	out	0x06, r24	; 6
	ADMUX = 0x40;									
     192:	80 e4       	ldi	r24, 0x40	; 64
     194:	87 b9       	out	0x07, r24	; 7
     196:	08 95       	ret

00000198 <ADC_Read>:

int ADC_Read(char channel)
{
	int Ain,AinLow;
	
	ADMUX=ADMUX|(channel & 0x0f);	/* Set input channel to read */
     198:	97 b1       	in	r25, 0x07	; 7
     19a:	8f 70       	andi	r24, 0x0F	; 15
     19c:	98 2b       	or	r25, r24
     19e:	97 b9       	out	0x07, r25	; 7

	ADCSRA |= (1<<ADSC);		/* Start conversion */
     1a0:	36 9a       	sbi	0x06, 6	; 6
	while((ADCSRA&(1<<ADIF))==0);	/* Monitor end of conversion interrupt */
     1a2:	34 9b       	sbis	0x06, 4	; 6
     1a4:	fe cf       	rjmp	.-4      	; 0x1a2 <ADC_Read+0xa>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     1a6:	8a e1       	ldi	r24, 0x1A	; 26
     1a8:	8a 95       	dec	r24
     1aa:	f1 f7       	brne	.-4      	; 0x1a8 <ADC_Read+0x10>
     1ac:	00 c0       	rjmp	.+0      	; 0x1ae <ADC_Read+0x16>
	
	_delay_us(10);
	AinLow = (int)ADCL;		/* Read lower byte*/
     1ae:	24 b1       	in	r18, 0x04	; 4
	Ain = (int)ADCH*256;		/* Read higher 2 bits and 
     1b0:	85 b1       	in	r24, 0x05	; 5
     1b2:	90 e0       	ldi	r25, 0x00	; 0
     1b4:	98 2f       	mov	r25, r24
     1b6:	88 27       	eor	r24, r24
					Multiply with weight */
	Ain = Ain + AinLow;				
	return(Ain);			/* Return digital value*/
     1b8:	82 0f       	add	r24, r18
     1ba:	91 1d       	adc	r25, r1
     1bc:	08 95       	ret

000001be <hx711_read>:
 */
void hx711_calibrate2setscale(double weight) {
	hx711_setscale(0);
	double scale = hx711_getweight()/weight;
	hx711_setscale(scale);
}
     1be:	9f 99       	sbic	0x13, 7	; 19
     1c0:	fe cf       	rjmp	.-4      	; 0x1be <hx711_read>
     1c2:	88 e1       	ldi	r24, 0x18	; 24
     1c4:	40 e0       	ldi	r20, 0x00	; 0
     1c6:	50 e0       	ldi	r21, 0x00	; 0
     1c8:	ba 01       	movw	r22, r20
     1ca:	ae 9a       	sbi	0x15, 6	; 21
     1cc:	00 00       	nop
     1ce:	44 0f       	add	r20, r20
     1d0:	55 1f       	adc	r21, r21
     1d2:	66 1f       	adc	r22, r22
     1d4:	77 1f       	adc	r23, r23
     1d6:	ae 98       	cbi	0x15, 6	; 21
     1d8:	00 00       	nop
     1da:	9f 9b       	sbis	0x13, 7	; 19
     1dc:	04 c0       	rjmp	.+8      	; 0x1e6 <hx711_read+0x28>
     1de:	4f 5f       	subi	r20, 0xFF	; 255
     1e0:	5f 4f       	sbci	r21, 0xFF	; 255
     1e2:	6f 4f       	sbci	r22, 0xFF	; 255
     1e4:	7f 4f       	sbci	r23, 0xFF	; 255
     1e6:	81 50       	subi	r24, 0x01	; 1
     1e8:	81 f7       	brne	.-32     	; 0x1ca <hx711_read+0xc>
     1ea:	68 94       	set
     1ec:	15 f8       	bld	r1, 5
     1ee:	76 95       	lsr	r23
     1f0:	67 95       	ror	r22
     1f2:	57 95       	ror	r21
     1f4:	47 95       	ror	r20
     1f6:	16 94       	lsr	r1
     1f8:	d1 f7       	brne	.-12     	; 0x1ee <hx711_read+0x30>
     1fa:	cb 01       	movw	r24, r22
     1fc:	ba 01       	movw	r22, r20
     1fe:	80 58       	subi	r24, 0x80	; 128
     200:	20 91 66 01 	lds	r18, 0x0166	; 0x800166 <hx711_gain>
     204:	22 23       	and	r18, r18
     206:	49 f0       	breq	.+18     	; 0x21a <hx711_read+0x5c>
     208:	20 e0       	ldi	r18, 0x00	; 0
     20a:	ae 9a       	sbi	0x15, 6	; 21
     20c:	00 00       	nop
     20e:	ae 98       	cbi	0x15, 6	; 21
     210:	2f 5f       	subi	r18, 0xFF	; 255
     212:	30 91 66 01 	lds	r19, 0x0166	; 0x800166 <hx711_gain>
     216:	23 17       	cp	r18, r19
     218:	c0 f3       	brcs	.-16     	; 0x20a <hx711_read+0x4c>
     21a:	08 95       	ret

0000021c <hx711_readwithtare>:
     21c:	cf 92       	push	r12
     21e:	df 92       	push	r13
     220:	ef 92       	push	r14
     222:	ff 92       	push	r15
     224:	0e 94 df 00 	call	0x1be	; 0x1be <hx711_read>
     228:	0e 94 cd 0b 	call	0x179a	; 0x179a <__floatunsisf>
     22c:	6b 01       	movw	r12, r22
     22e:	7c 01       	movw	r14, r24
     230:	60 91 5e 01 	lds	r22, 0x015E	; 0x80015e <__data_end>
     234:	70 91 5f 01 	lds	r23, 0x015F	; 0x80015f <__data_end+0x1>
     238:	80 91 60 01 	lds	r24, 0x0160	; 0x800160 <__data_end+0x2>
     23c:	90 91 61 01 	lds	r25, 0x0161	; 0x800161 <__data_end+0x3>
     240:	0e 94 cf 0b 	call	0x179e	; 0x179e <__floatsisf>
     244:	9b 01       	movw	r18, r22
     246:	ac 01       	movw	r20, r24
     248:	c7 01       	movw	r24, r14
     24a:	b6 01       	movw	r22, r12
     24c:	0e 94 b3 0a 	call	0x1566	; 0x1566 <__subsf3>
     250:	ff 90       	pop	r15
     252:	ef 90       	pop	r14
     254:	df 90       	pop	r13
     256:	cf 90       	pop	r12
     258:	08 95       	ret

0000025a <hx711_getweight>:
     25a:	0e 94 0e 01 	call	0x21c	; 0x21c <hx711_readwithtare>
     25e:	20 91 62 01 	lds	r18, 0x0162	; 0x800162 <hx711_scale>
     262:	30 91 63 01 	lds	r19, 0x0163	; 0x800163 <hx711_scale+0x1>
     266:	40 91 64 01 	lds	r20, 0x0164	; 0x800164 <hx711_scale+0x2>
     26a:	50 91 65 01 	lds	r21, 0x0165	; 0x800165 <hx711_scale+0x3>
     26e:	0e 94 25 0b 	call	0x164a	; 0x164a <__divsf3>
     272:	08 95       	ret

00000274 <hx711_setgain>:
     274:	80 38       	cpi	r24, 0x80	; 128
     276:	91 05       	cpc	r25, r1
     278:	21 f4       	brne	.+8      	; 0x282 <hx711_setgain+0xe>
     27a:	81 e0       	ldi	r24, 0x01	; 1
     27c:	80 93 66 01 	sts	0x0166, r24	; 0x800166 <hx711_gain>
     280:	10 c0       	rjmp	.+32     	; 0x2a2 <hx711_setgain+0x2e>
     282:	80 34       	cpi	r24, 0x40	; 64
     284:	91 05       	cpc	r25, r1
     286:	21 f4       	brne	.+8      	; 0x290 <hx711_setgain+0x1c>
     288:	83 e0       	ldi	r24, 0x03	; 3
     28a:	80 93 66 01 	sts	0x0166, r24	; 0x800166 <hx711_gain>
     28e:	09 c0       	rjmp	.+18     	; 0x2a2 <hx711_setgain+0x2e>
     290:	80 97       	sbiw	r24, 0x20	; 32
     292:	21 f4       	brne	.+8      	; 0x29c <hx711_setgain+0x28>
     294:	82 e0       	ldi	r24, 0x02	; 2
     296:	80 93 66 01 	sts	0x0166, r24	; 0x800166 <hx711_gain>
     29a:	03 c0       	rjmp	.+6      	; 0x2a2 <hx711_setgain+0x2e>
     29c:	81 e0       	ldi	r24, 0x01	; 1
     29e:	80 93 66 01 	sts	0x0166, r24	; 0x800166 <hx711_gain>
     2a2:	ae 98       	cbi	0x15, 6	; 21
     2a4:	0e 94 df 00 	call	0x1be	; 0x1be <hx711_read>
     2a8:	08 95       	ret

000002aa <hx711_setscale>:
     2aa:	cf 92       	push	r12
     2ac:	df 92       	push	r13
     2ae:	ef 92       	push	r14
     2b0:	ff 92       	push	r15
     2b2:	6b 01       	movw	r12, r22
     2b4:	7c 01       	movw	r14, r24
     2b6:	20 e0       	ldi	r18, 0x00	; 0
     2b8:	30 e0       	ldi	r19, 0x00	; 0
     2ba:	40 e8       	ldi	r20, 0x80	; 128
     2bc:	5f e3       	ldi	r21, 0x3F	; 63
     2be:	0e 94 20 0b 	call	0x1640	; 0x1640 <__cmpsf2>
     2c2:	88 23       	and	r24, r24
     2c4:	44 f4       	brge	.+16     	; 0x2d6 <hx711_setscale+0x2c>
     2c6:	0f 2e       	mov	r0, r31
     2c8:	c1 2c       	mov	r12, r1
     2ca:	d1 2c       	mov	r13, r1
     2cc:	f0 e8       	ldi	r31, 0x80	; 128
     2ce:	ef 2e       	mov	r14, r31
     2d0:	ff e3       	ldi	r31, 0x3F	; 63
     2d2:	ff 2e       	mov	r15, r31
     2d4:	f0 2d       	mov	r31, r0
     2d6:	c0 92 62 01 	sts	0x0162, r12	; 0x800162 <hx711_scale>
     2da:	d0 92 63 01 	sts	0x0163, r13	; 0x800163 <hx711_scale+0x1>
     2de:	e0 92 64 01 	sts	0x0164, r14	; 0x800164 <hx711_scale+0x2>
     2e2:	f0 92 65 01 	sts	0x0165, r15	; 0x800165 <hx711_scale+0x3>
     2e6:	ff 90       	pop	r15
     2e8:	ef 90       	pop	r14
     2ea:	df 90       	pop	r13
     2ec:	cf 90       	pop	r12
     2ee:	08 95       	ret

000002f0 <hx711_init>:

/**
 * initialize chip
 */
void hx711_init(uint8_t gain, double scale, int32_t offset) {
     2f0:	8f 92       	push	r8
     2f2:	9f 92       	push	r9
     2f4:	af 92       	push	r10
     2f6:	bf 92       	push	r11
     2f8:	cf 92       	push	r12
     2fa:	df 92       	push	r13
     2fc:	ef 92       	push	r14
     2fe:	ff 92       	push	r15
     300:	0f 93       	push	r16
     302:	1f 93       	push	r17
     304:	4a 01       	movw	r8, r20
     306:	5b 01       	movw	r10, r22
     308:	68 01       	movw	r12, r16
     30a:	79 01       	movw	r14, r18
	//set sck as output
	HX711_SCKDDR |= (1<<HX711_SCKPINNUM);
     30c:	a6 9a       	sbi	0x14, 6	; 20
	HX711_SCKPORT &= ~(1<<HX711_SCKPINNUM);
     30e:	ae 98       	cbi	0x15, 6	; 21
	//set dt as input
	HX711_DTDDR &=~ (1<<HX711_DTPINNUM);
     310:	a7 98       	cbi	0x14, 7	; 20

	//set gain
	hx711_setgain(gain);
     312:	90 e0       	ldi	r25, 0x00	; 0
     314:	0e 94 3a 01 	call	0x274	; 0x274 <hx711_setgain>
	//set scale
	hx711_setscale(scale);
     318:	c5 01       	movw	r24, r10
     31a:	b4 01       	movw	r22, r8
     31c:	0e 94 55 01 	call	0x2aa	; 0x2aa <hx711_setscale>

/**
 * set the offset raw value
 */
void hx711_setoffset(int32_t offset) {
	hx711_offset = offset;
     320:	c0 92 5e 01 	sts	0x015E, r12	; 0x80015e <__data_end>
     324:	d0 92 5f 01 	sts	0x015F, r13	; 0x80015f <__data_end+0x1>
     328:	e0 92 60 01 	sts	0x0160, r14	; 0x800160 <__data_end+0x2>
     32c:	f0 92 61 01 	sts	0x0161, r15	; 0x800161 <__data_end+0x3>
	hx711_setgain(gain);
	//set scale
	hx711_setscale(scale);
	//set offset
	hx711_setoffset(offset);
}
     330:	1f 91       	pop	r17
     332:	0f 91       	pop	r16
     334:	ff 90       	pop	r15
     336:	ef 90       	pop	r14
     338:	df 90       	pop	r13
     33a:	cf 90       	pop	r12
     33c:	bf 90       	pop	r11
     33e:	af 90       	pop	r10
     340:	9f 90       	pop	r9
     342:	8f 90       	pop	r8
     344:	08 95       	ret

00000346 <lcd_sendCommand>:
//=================================================================
// Turns OFF cursor
//=================================================================
void lcd_cursorOFF(void)	
{
	lcd_sendCommand(0x0C);
     346:	cf 93       	push	r28
     348:	df 93       	push	r29
     34a:	c8 2f       	mov	r28, r24
     34c:	8e e4       	ldi	r24, 0x4E	; 78
     34e:	0e 94 8d 02 	call	0x51a	; 0x51a <i2c_start>
     352:	dc 2f       	mov	r29, r28
     354:	d0 7f       	andi	r29, 0xF0	; 240
     356:	80 91 67 01 	lds	r24, 0x0167	; 0x800167 <backlight>
     35a:	84 60       	ori	r24, 0x04	; 4
     35c:	8d 2b       	or	r24, r29
     35e:	0e 94 b1 02 	call	0x562	; 0x562 <i2c_write>
     362:	8f ec       	ldi	r24, 0xCF	; 207
     364:	97 e0       	ldi	r25, 0x07	; 7
     366:	01 97       	sbiw	r24, 0x01	; 1
     368:	f1 f7       	brne	.-4      	; 0x366 <lcd_sendCommand+0x20>
     36a:	00 c0       	rjmp	.+0      	; 0x36c <lcd_sendCommand+0x26>
     36c:	00 00       	nop
     36e:	80 91 67 01 	lds	r24, 0x0167	; 0x800167 <backlight>
     372:	8d 2b       	or	r24, r29
     374:	0e 94 b1 02 	call	0x562	; 0x562 <i2c_write>
     378:	8f ec       	ldi	r24, 0xCF	; 207
     37a:	97 e0       	ldi	r25, 0x07	; 7
     37c:	01 97       	sbiw	r24, 0x01	; 1
     37e:	f1 f7       	brne	.-4      	; 0x37c <lcd_sendCommand+0x36>
     380:	00 c0       	rjmp	.+0      	; 0x382 <lcd_sendCommand+0x3c>
     382:	00 00       	nop
     384:	90 e1       	ldi	r25, 0x10	; 16
     386:	c9 9f       	mul	r28, r25
     388:	e0 01       	movw	r28, r0
     38a:	11 24       	eor	r1, r1
     38c:	80 91 67 01 	lds	r24, 0x0167	; 0x800167 <backlight>
     390:	84 60       	ori	r24, 0x04	; 4
     392:	8c 2b       	or	r24, r28
     394:	0e 94 b1 02 	call	0x562	; 0x562 <i2c_write>
     398:	8f ec       	ldi	r24, 0xCF	; 207
     39a:	97 e0       	ldi	r25, 0x07	; 7
     39c:	01 97       	sbiw	r24, 0x01	; 1
     39e:	f1 f7       	brne	.-4      	; 0x39c <lcd_sendCommand+0x56>
     3a0:	00 c0       	rjmp	.+0      	; 0x3a2 <lcd_sendCommand+0x5c>
     3a2:	00 00       	nop
     3a4:	80 91 67 01 	lds	r24, 0x0167	; 0x800167 <backlight>
     3a8:	8c 2b       	or	r24, r28
     3aa:	0e 94 b1 02 	call	0x562	; 0x562 <i2c_write>
     3ae:	8f ec       	ldi	r24, 0xCF	; 207
     3b0:	97 e0       	ldi	r25, 0x07	; 7
     3b2:	01 97       	sbiw	r24, 0x01	; 1
     3b4:	f1 f7       	brne	.-4      	; 0x3b2 <lcd_sendCommand+0x6c>
     3b6:	00 c0       	rjmp	.+0      	; 0x3b8 <lcd_sendCommand+0x72>
     3b8:	00 00       	nop
     3ba:	0e 94 ab 02 	call	0x556	; 0x556 <i2c_stop>
     3be:	df 91       	pop	r29
     3c0:	cf 91       	pop	r28
     3c2:	08 95       	ret

000003c4 <lcd_sendData>:
     3c4:	cf 93       	push	r28
     3c6:	c8 2f       	mov	r28, r24
     3c8:	8e e4       	ldi	r24, 0x4E	; 78
     3ca:	0e 94 8d 02 	call	0x51a	; 0x51a <i2c_start>
     3ce:	c0 7f       	andi	r28, 0xF0	; 240
     3d0:	80 91 67 01 	lds	r24, 0x0167	; 0x800167 <backlight>
     3d4:	84 60       	ori	r24, 0x04	; 4
     3d6:	8c 2b       	or	r24, r28
     3d8:	0e 94 b1 02 	call	0x562	; 0x562 <i2c_write>
     3dc:	8f ec       	ldi	r24, 0xCF	; 207
     3de:	97 e0       	ldi	r25, 0x07	; 7
     3e0:	01 97       	sbiw	r24, 0x01	; 1
     3e2:	f1 f7       	brne	.-4      	; 0x3e0 <lcd_sendData+0x1c>
     3e4:	00 c0       	rjmp	.+0      	; 0x3e6 <lcd_sendData+0x22>
     3e6:	00 00       	nop
     3e8:	80 91 67 01 	lds	r24, 0x0167	; 0x800167 <backlight>
     3ec:	8c 2b       	or	r24, r28
     3ee:	0e 94 b1 02 	call	0x562	; 0x562 <i2c_write>
     3f2:	8f ec       	ldi	r24, 0xCF	; 207
     3f4:	97 e0       	ldi	r25, 0x07	; 7
     3f6:	01 97       	sbiw	r24, 0x01	; 1
     3f8:	f1 f7       	brne	.-4      	; 0x3f6 <lcd_sendData+0x32>
     3fa:	00 c0       	rjmp	.+0      	; 0x3fc <lcd_sendData+0x38>
     3fc:	00 00       	nop
     3fe:	0e 94 ab 02 	call	0x556	; 0x556 <i2c_stop>
     402:	cf 91       	pop	r28
     404:	08 95       	ret

00000406 <lcd_init>:
     406:	80 93 67 01 	sts	0x0167, r24	; 0x800167 <backlight>
     40a:	80 e3       	ldi	r24, 0x30	; 48
     40c:	0e 94 e2 01 	call	0x3c4	; 0x3c4 <lcd_sendData>
     410:	80 e3       	ldi	r24, 0x30	; 48
     412:	0e 94 e2 01 	call	0x3c4	; 0x3c4 <lcd_sendData>
     416:	80 e3       	ldi	r24, 0x30	; 48
     418:	0e 94 e2 01 	call	0x3c4	; 0x3c4 <lcd_sendData>
     41c:	80 e2       	ldi	r24, 0x20	; 32
     41e:	0e 94 e2 01 	call	0x3c4	; 0x3c4 <lcd_sendData>
     422:	8f e3       	ldi	r24, 0x3F	; 63
     424:	9c e9       	ldi	r25, 0x9C	; 156
     426:	01 97       	sbiw	r24, 0x01	; 1
     428:	f1 f7       	brne	.-4      	; 0x426 <lcd_init+0x20>
     42a:	00 c0       	rjmp	.+0      	; 0x42c <lcd_init+0x26>
     42c:	00 00       	nop
     42e:	88 e2       	ldi	r24, 0x28	; 40
     430:	0e 94 a3 01 	call	0x346	; 0x346 <lcd_sendCommand>
     434:	8c e0       	ldi	r24, 0x0C	; 12
     436:	0e 94 a3 01 	call	0x346	; 0x346 <lcd_sendCommand>
     43a:	86 e0       	ldi	r24, 0x06	; 6
     43c:	0e 94 a3 01 	call	0x346	; 0x346 <lcd_sendCommand>
     440:	81 e0       	ldi	r24, 0x01	; 1
     442:	0e 94 a3 01 	call	0x346	; 0x346 <lcd_sendCommand>
     446:	08 95       	ret

00000448 <lcd_putc>:
     448:	cf 93       	push	r28
     44a:	df 93       	push	r29
     44c:	c8 2f       	mov	r28, r24
     44e:	8e e4       	ldi	r24, 0x4E	; 78
     450:	0e 94 8d 02 	call	0x51a	; 0x51a <i2c_start>
     454:	dc 2f       	mov	r29, r28
     456:	d0 7f       	andi	r29, 0xF0	; 240
     458:	80 91 67 01 	lds	r24, 0x0167	; 0x800167 <backlight>
     45c:	d8 2b       	or	r29, r24
     45e:	8d 2f       	mov	r24, r29
     460:	85 60       	ori	r24, 0x05	; 5
     462:	0e 94 b1 02 	call	0x562	; 0x562 <i2c_write>
     466:	da 7f       	andi	r29, 0xFA	; 250
     468:	80 91 67 01 	lds	r24, 0x0167	; 0x800167 <backlight>
     46c:	8d 2b       	or	r24, r29
     46e:	0e 94 b1 02 	call	0x562	; 0x562 <i2c_write>
     472:	80 e1       	ldi	r24, 0x10	; 16
     474:	c8 9f       	mul	r28, r24
     476:	90 01       	movw	r18, r0
     478:	11 24       	eor	r1, r1
     47a:	c0 91 67 01 	lds	r28, 0x0167	; 0x800167 <backlight>
     47e:	c5 60       	ori	r28, 0x05	; 5
     480:	c2 2b       	or	r28, r18
     482:	8c 2f       	mov	r24, r28
     484:	0e 94 b1 02 	call	0x562	; 0x562 <i2c_write>
     488:	2c 2f       	mov	r18, r28
     48a:	2a 7f       	andi	r18, 0xFA	; 250
     48c:	80 91 67 01 	lds	r24, 0x0167	; 0x800167 <backlight>
     490:	82 2b       	or	r24, r18
     492:	0e 94 b1 02 	call	0x562	; 0x562 <i2c_write>
     496:	0e 94 ab 02 	call	0x556	; 0x556 <i2c_stop>
     49a:	df 91       	pop	r29
     49c:	cf 91       	pop	r28
     49e:	08 95       	ret

000004a0 <lcd_goto_xy>:
     4a0:	62 30       	cpi	r22, 0x02	; 2
     4a2:	31 f0       	breq	.+12     	; 0x4b0 <lcd_goto_xy+0x10>
     4a4:	63 30       	cpi	r22, 0x03	; 3
     4a6:	31 f0       	breq	.+12     	; 0x4b4 <lcd_goto_xy+0x14>
     4a8:	61 30       	cpi	r22, 0x01	; 1
     4aa:	29 f4       	brne	.+10     	; 0x4b6 <lcd_goto_xy+0x16>
     4ac:	80 5c       	subi	r24, 0xC0	; 192
     4ae:	03 c0       	rjmp	.+6      	; 0x4b6 <lcd_goto_xy+0x16>
     4b0:	8c 5e       	subi	r24, 0xEC	; 236
     4b2:	01 c0       	rjmp	.+2      	; 0x4b6 <lcd_goto_xy+0x16>
     4b4:	8c 5a       	subi	r24, 0xAC	; 172
     4b6:	80 68       	ori	r24, 0x80	; 128
     4b8:	0e 94 a3 01 	call	0x346	; 0x346 <lcd_sendCommand>
     4bc:	08 95       	ret

000004be <lcd_clear>:
//=================================================================
// Clears LCD
//=================================================================
void lcd_clear(void)				
{
	lcd_sendCommand(1<<LCD_CLR);
     4be:	81 e0       	ldi	r24, 0x01	; 1
     4c0:	0e 94 a3 01 	call	0x346	; 0x346 <lcd_sendCommand>
     4c4:	08 95       	ret

000004c6 <lcd_puts>:
}
//=================================================================
// Outputs string to LCD
//=================================================================
void lcd_puts(char* data)	
{
     4c6:	1f 93       	push	r17
     4c8:	cf 93       	push	r28
     4ca:	df 93       	push	r29
     4cc:	ec 01       	movw	r28, r24

	// check to make sure we have a good pointer
	//if (!data) return;

	// print data
	for(i=0; i<(strlen(data)); i++)
     4ce:	10 e0       	ldi	r17, 0x00	; 0
     4d0:	07 c0       	rjmp	.+14     	; 0x4e0 <lcd_puts+0x1a>
	{
		lcd_putc(data[i]);
     4d2:	fe 01       	movw	r30, r28
     4d4:	e8 0f       	add	r30, r24
     4d6:	f9 1f       	adc	r31, r25
     4d8:	80 81       	ld	r24, Z
     4da:	0e 94 24 02 	call	0x448	; 0x448 <lcd_putc>

	// check to make sure we have a good pointer
	//if (!data) return;

	// print data
	for(i=0; i<(strlen(data)); i++)
     4de:	1f 5f       	subi	r17, 0xFF	; 255
     4e0:	81 2f       	mov	r24, r17
     4e2:	90 e0       	ldi	r25, 0x00	; 0
     4e4:	fe 01       	movw	r30, r28
     4e6:	01 90       	ld	r0, Z+
     4e8:	00 20       	and	r0, r0
     4ea:	e9 f7       	brne	.-6      	; 0x4e6 <lcd_puts+0x20>
     4ec:	31 97       	sbiw	r30, 0x01	; 1
     4ee:	ec 1b       	sub	r30, r28
     4f0:	fd 0b       	sbc	r31, r29
     4f2:	8e 17       	cp	r24, r30
     4f4:	9f 07       	cpc	r25, r31
     4f6:	68 f3       	brcs	.-38     	; 0x4d2 <lcd_puts+0xc>
	{
		lcd_putc(data[i]);
	}
}
     4f8:	df 91       	pop	r29
     4fa:	cf 91       	pop	r28
     4fc:	1f 91       	pop	r17
     4fe:	08 95       	ret

00000500 <lcd_puts_at>:

//=================================================================
// Displays LCD cursor
//=================================================================
void lcd_puts_at(const char* str, uint8_t x, uint8_t y)
{
     500:	cf 93       	push	r28
     502:	df 93       	push	r29
     504:	ec 01       	movw	r28, r24
     506:	86 2f       	mov	r24, r22
	lcd_goto_xy(x, y);
     508:	64 2f       	mov	r22, r20
     50a:	0e 94 50 02 	call	0x4a0	; 0x4a0 <lcd_goto_xy>
	lcd_puts(str);
     50e:	ce 01       	movw	r24, r28
     510:	0e 94 63 02 	call	0x4c6	; 0x4c6 <lcd_puts>
}
     514:	df 91       	pop	r29
     516:	cf 91       	pop	r28
     518:	08 95       	ret

0000051a <i2c_start>:
*************************************************************************/
unsigned char i2c_rep_start(unsigned char address)
{
    return i2c_start( address );

}/* i2c_rep_start */
     51a:	94 ea       	ldi	r25, 0xA4	; 164
     51c:	96 bf       	out	0x36, r25	; 54
     51e:	06 b6       	in	r0, 0x36	; 54
     520:	07 fe       	sbrs	r0, 7
     522:	fd cf       	rjmp	.-6      	; 0x51e <i2c_start+0x4>
     524:	91 b1       	in	r25, 0x01	; 1
     526:	98 7f       	andi	r25, 0xF8	; 248
     528:	98 30       	cpi	r25, 0x08	; 8
     52a:	11 f0       	breq	.+4      	; 0x530 <i2c_start+0x16>
     52c:	90 31       	cpi	r25, 0x10	; 16
     52e:	79 f4       	brne	.+30     	; 0x54e <i2c_start+0x34>
     530:	83 b9       	out	0x03, r24	; 3
     532:	84 e8       	ldi	r24, 0x84	; 132
     534:	86 bf       	out	0x36, r24	; 54
     536:	06 b6       	in	r0, 0x36	; 54
     538:	07 fe       	sbrs	r0, 7
     53a:	fd cf       	rjmp	.-6      	; 0x536 <i2c_start+0x1c>
     53c:	91 b1       	in	r25, 0x01	; 1
     53e:	98 7f       	andi	r25, 0xF8	; 248
     540:	98 31       	cpi	r25, 0x18	; 24
     542:	39 f0       	breq	.+14     	; 0x552 <i2c_start+0x38>
     544:	81 e0       	ldi	r24, 0x01	; 1
     546:	90 34       	cpi	r25, 0x40	; 64
     548:	29 f4       	brne	.+10     	; 0x554 <i2c_start+0x3a>
     54a:	80 e0       	ldi	r24, 0x00	; 0
     54c:	08 95       	ret
     54e:	81 e0       	ldi	r24, 0x01	; 1
     550:	08 95       	ret
     552:	80 e0       	ldi	r24, 0x00	; 0
     554:	08 95       	ret

00000556 <i2c_stop>:
 Terminates the data transfer and releases the I2C bus
*************************************************************************/
void i2c_stop(void)
{
    /* send stop condition */
	TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWSTO);
     556:	84 e9       	ldi	r24, 0x94	; 148
     558:	86 bf       	out	0x36, r24	; 54
	
	// wait until stop condition is executed and bus released
	while(TWCR & (1<<TWSTO));
     55a:	06 b6       	in	r0, 0x36	; 54
     55c:	04 fc       	sbrc	r0, 4
     55e:	fd cf       	rjmp	.-6      	; 0x55a <i2c_stop+0x4>

}/* i2c_stop */
     560:	08 95       	ret

00000562 <i2c_write>:
unsigned char i2c_write( unsigned char data )
{	
    uint8_t   twst;
    
	// send data to the previously addressed device
	TWDR = data;
     562:	83 b9       	out	0x03, r24	; 3
	TWCR = (1<<TWINT) | (1<<TWEN);
     564:	84 e8       	ldi	r24, 0x84	; 132
     566:	86 bf       	out	0x36, r24	; 54

	// wait until transmission completed
	while(!(TWCR & (1<<TWINT)));
     568:	06 b6       	in	r0, 0x36	; 54
     56a:	07 fe       	sbrs	r0, 7
     56c:	fd cf       	rjmp	.-6      	; 0x568 <i2c_write+0x6>

	// check value of TWI Status Register. Mask prescaler bits
	twst = TW_STATUS & 0xF8;
     56e:	91 b1       	in	r25, 0x01	; 1
     570:	98 7f       	andi	r25, 0xF8	; 248
     572:	81 e0       	ldi	r24, 0x01	; 1
     574:	98 32       	cpi	r25, 0x28	; 40
     576:	09 f4       	brne	.+2      	; 0x57a <i2c_write+0x18>
     578:	80 e0       	ldi	r24, 0x00	; 0
	if( twst != TW_MT_DATA_ACK) return 1;
	return 0;

}/* i2c_write */
     57a:	08 95       	ret

0000057c <keypad_init>:
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     57c:	8f ef       	ldi	r24, 0xFF	; 255
     57e:	87 bb       	out	0x17, r24	; 23
     580:	80 ef       	ldi	r24, 0xF0	; 240
     582:	87 bb       	out	0x17, r24	; 23
     584:	8f ec       	ldi	r24, 0xCF	; 207
     586:	97 e0       	ldi	r25, 0x07	; 7
     588:	01 97       	sbiw	r24, 0x01	; 1
     58a:	f1 f7       	brne	.-4      	; 0x588 <keypad_init+0xc>
     58c:	00 c0       	rjmp	.+0      	; 0x58e <keypad_init+0x12>
     58e:	00 00       	nop
     590:	8f e0       	ldi	r24, 0x0F	; 15
     592:	88 bb       	out	0x18, r24	; 24
     594:	8f ec       	ldi	r24, 0xCF	; 207
     596:	97 e0       	ldi	r25, 0x07	; 7
     598:	01 97       	sbiw	r24, 0x01	; 1
     59a:	f1 f7       	brne	.-4      	; 0x598 <keypad_init+0x1c>
     59c:	00 c0       	rjmp	.+0      	; 0x59e <keypad_init+0x22>
     59e:	00 00       	nop
     5a0:	08 95       	ret

000005a2 <isPressed>:
	}
	return keypressed;
}


bool isPressed(Keypad key) {
     5a2:	38 2f       	mov	r19, r24
	register Keypad keypressed = BTN_NO_PRESS;
	if (PINB != 0b11110000)//in any of column pins goes high execute the loop
     5a4:	86 b3       	in	r24, 0x16	; 22
     5a6:	80 3f       	cpi	r24, 0xF0	; 240
     5a8:	b9 f0       	breq	.+46     	; 0x5d8 <isPressed+0x36>
	{
		//_delay_ms(5);
		keypressed = PINB;//taking the column value into integer
     5aa:	86 b3       	in	r24, 0x16	; 22
		DDRB ^= 0b11111111;//making rows as inputs and columns as output
     5ac:	27 b3       	in	r18, 0x17	; 23
     5ae:	20 95       	com	r18
     5b0:	27 bb       	out	0x17, r18	; 23
     5b2:	ef ec       	ldi	r30, 0xCF	; 207
     5b4:	f7 e0       	ldi	r31, 0x07	; 7
     5b6:	31 97       	sbiw	r30, 0x01	; 1
     5b8:	f1 f7       	brne	.-4      	; 0x5b6 <isPressed+0x14>
     5ba:	00 c0       	rjmp	.+0      	; 0x5bc <isPressed+0x1a>
     5bc:	00 00       	nop
		_delay_ms(1);
		PORTB ^= 0b11111111;//powering columns
     5be:	28 b3       	in	r18, 0x18	; 24
     5c0:	20 95       	com	r18
     5c2:	28 bb       	out	0x18, r18	; 24
     5c4:	ef ec       	ldi	r30, 0xCF	; 207
     5c6:	f7 e0       	ldi	r31, 0x07	; 7
     5c8:	31 97       	sbiw	r30, 0x01	; 1
     5ca:	f1 f7       	brne	.-4      	; 0x5c8 <isPressed+0x26>
     5cc:	00 c0       	rjmp	.+0      	; 0x5ce <isPressed+0x2c>
     5ce:	00 00       	nop
		_delay_ms(1);
		keypressed = ~(keypressed | PINB); //taking row value and OR ing it to column value
     5d0:	96 b3       	in	r25, 0x16	; 22
     5d2:	98 2b       	or	r25, r24
     5d4:	90 95       	com	r25
     5d6:	01 c0       	rjmp	.+2      	; 0x5da <isPressed+0x38>
	return keypressed;
}


bool isPressed(Keypad key) {
	register Keypad keypressed = BTN_NO_PRESS;
     5d8:	90 e0       	ldi	r25, 0x00	; 0
		_delay_ms(1);
		keypressed = ~(keypressed | PINB); //taking row value and OR ing it to column value
		//Similar to //kepressed |= PIND; keypressed ^= 0xFF;
	}
	//keypressed = 0;//after showing integer erasing the row column memory
	DDRB ^= 0b11111111;//shifting input and power port
     5da:	27 b3       	in	r18, 0x17	; 23
     5dc:	20 95       	com	r18
     5de:	27 bb       	out	0x17, r18	; 23
	PORTB ^= 0b11111111;//powering row pins of keypad
     5e0:	28 b3       	in	r18, 0x18	; 24
     5e2:	20 95       	com	r18
     5e4:	28 bb       	out	0x18, r18	; 24

	return keypressed == key;
     5e6:	81 e0       	ldi	r24, 0x01	; 1
     5e8:	93 13       	cpse	r25, r19
     5ea:	80 e0       	ldi	r24, 0x00	; 0
     5ec:	08 95       	ret

000005ee <sumit>:
char result[8] = "00000001";

/*************** threshold ***************/
double m=0,c=0; // gradient and slope

double sumit(int data_points[],int length){
     5ee:	8f 92       	push	r8
     5f0:	9f 92       	push	r9
     5f2:	af 92       	push	r10
     5f4:	bf 92       	push	r11
     5f6:	ef 92       	push	r14
     5f8:	ff 92       	push	r15
     5fa:	0f 93       	push	r16
     5fc:	1f 93       	push	r17
     5fe:	cf 93       	push	r28
     600:	df 93       	push	r29
	
	double sum=0;
	for(int i=1;i<=length;i++)sum+=data_points[i];
     602:	16 16       	cp	r1, r22
     604:	17 06       	cpc	r1, r23
     606:	04 f5       	brge	.+64     	; 0x648 <sumit+0x5a>
     608:	7b 01       	movw	r14, r22
     60a:	8c 01       	movw	r16, r24
     60c:	0e 5f       	subi	r16, 0xFE	; 254
     60e:	1f 4f       	sbci	r17, 0xFF	; 255
     610:	c1 e0       	ldi	r28, 0x01	; 1
     612:	d0 e0       	ldi	r29, 0x00	; 0
     614:	81 2c       	mov	r8, r1
     616:	91 2c       	mov	r9, r1
     618:	54 01       	movw	r10, r8
     61a:	f8 01       	movw	r30, r16
     61c:	61 91       	ld	r22, Z+
     61e:	71 91       	ld	r23, Z+
     620:	8f 01       	movw	r16, r30
     622:	07 2e       	mov	r0, r23
     624:	00 0c       	add	r0, r0
     626:	88 0b       	sbc	r24, r24
     628:	99 0b       	sbc	r25, r25
     62a:	0e 94 cf 0b 	call	0x179e	; 0x179e <__floatsisf>
     62e:	9b 01       	movw	r18, r22
     630:	ac 01       	movw	r20, r24
     632:	c5 01       	movw	r24, r10
     634:	b4 01       	movw	r22, r8
     636:	0e 94 b4 0a 	call	0x1568	; 0x1568 <__addsf3>
     63a:	4b 01       	movw	r8, r22
     63c:	5c 01       	movw	r10, r24
     63e:	21 96       	adiw	r28, 0x01	; 1
     640:	ec 16       	cp	r14, r28
     642:	fd 06       	cpc	r15, r29
     644:	54 f7       	brge	.-44     	; 0x61a <sumit+0x2c>
     646:	03 c0       	rjmp	.+6      	; 0x64e <sumit+0x60>
/*************** threshold ***************/
double m=0,c=0; // gradient and slope

double sumit(int data_points[],int length){
	
	double sum=0;
     648:	81 2c       	mov	r8, r1
     64a:	91 2c       	mov	r9, r1
     64c:	54 01       	movw	r10, r8
	for(int i=1;i<=length;i++)sum+=data_points[i];

	return sum;
}
     64e:	c5 01       	movw	r24, r10
     650:	b4 01       	movw	r22, r8
     652:	df 91       	pop	r29
     654:	cf 91       	pop	r28
     656:	1f 91       	pop	r17
     658:	0f 91       	pop	r16
     65a:	ff 90       	pop	r15
     65c:	ef 90       	pop	r14
     65e:	bf 90       	pop	r11
     660:	af 90       	pop	r10
     662:	9f 90       	pop	r9
     664:	8f 90       	pop	r8
     666:	08 95       	ret

00000668 <xysum>:

double xysum(int data_points[],int length){
     668:	8f 92       	push	r8
     66a:	9f 92       	push	r9
     66c:	af 92       	push	r10
     66e:	bf 92       	push	r11
     670:	ef 92       	push	r14
     672:	ff 92       	push	r15
     674:	0f 93       	push	r16
     676:	1f 93       	push	r17
     678:	cf 93       	push	r28
     67a:	df 93       	push	r29
	
	double sum=0;
	for(int i=1;i<=length;i++)sum+=(i)*data_points[i];
     67c:	16 16       	cp	r1, r22
     67e:	17 06       	cpc	r1, r23
     680:	3c f5       	brge	.+78     	; 0x6d0 <xysum+0x68>
     682:	7b 01       	movw	r14, r22
     684:	8c 01       	movw	r16, r24
     686:	0e 5f       	subi	r16, 0xFE	; 254
     688:	1f 4f       	sbci	r17, 0xFF	; 255
     68a:	c1 e0       	ldi	r28, 0x01	; 1
     68c:	d0 e0       	ldi	r29, 0x00	; 0
     68e:	81 2c       	mov	r8, r1
     690:	91 2c       	mov	r9, r1
     692:	54 01       	movw	r10, r8
     694:	f8 01       	movw	r30, r16
     696:	81 91       	ld	r24, Z+
     698:	91 91       	ld	r25, Z+
     69a:	8f 01       	movw	r16, r30
     69c:	8c 9f       	mul	r24, r28
     69e:	b0 01       	movw	r22, r0
     6a0:	8d 9f       	mul	r24, r29
     6a2:	70 0d       	add	r23, r0
     6a4:	9c 9f       	mul	r25, r28
     6a6:	70 0d       	add	r23, r0
     6a8:	11 24       	eor	r1, r1
     6aa:	07 2e       	mov	r0, r23
     6ac:	00 0c       	add	r0, r0
     6ae:	88 0b       	sbc	r24, r24
     6b0:	99 0b       	sbc	r25, r25
     6b2:	0e 94 cf 0b 	call	0x179e	; 0x179e <__floatsisf>
     6b6:	9b 01       	movw	r18, r22
     6b8:	ac 01       	movw	r20, r24
     6ba:	c5 01       	movw	r24, r10
     6bc:	b4 01       	movw	r22, r8
     6be:	0e 94 b4 0a 	call	0x1568	; 0x1568 <__addsf3>
     6c2:	4b 01       	movw	r8, r22
     6c4:	5c 01       	movw	r10, r24
     6c6:	21 96       	adiw	r28, 0x01	; 1
     6c8:	ec 16       	cp	r14, r28
     6ca:	fd 06       	cpc	r15, r29
     6cc:	1c f7       	brge	.-58     	; 0x694 <xysum+0x2c>
     6ce:	03 c0       	rjmp	.+6      	; 0x6d6 <xysum+0x6e>
	return sum;
}

double xysum(int data_points[],int length){
	
	double sum=0;
     6d0:	81 2c       	mov	r8, r1
     6d2:	91 2c       	mov	r9, r1
     6d4:	54 01       	movw	r10, r8
	for(int i=1;i<=length;i++)sum+=(i)*data_points[i];

	return sum;
}
     6d6:	c5 01       	movw	r24, r10
     6d8:	b4 01       	movw	r22, r8
     6da:	df 91       	pop	r29
     6dc:	cf 91       	pop	r28
     6de:	1f 91       	pop	r17
     6e0:	0f 91       	pop	r16
     6e2:	ff 90       	pop	r15
     6e4:	ef 90       	pop	r14
     6e6:	bf 90       	pop	r11
     6e8:	af 90       	pop	r10
     6ea:	9f 90       	pop	r9
     6ec:	8f 90       	pop	r8
     6ee:	08 95       	ret

000006f0 <regression>:

void regression(int data_points[],double n){
     6f0:	4f 92       	push	r4
     6f2:	5f 92       	push	r5
     6f4:	6f 92       	push	r6
     6f6:	7f 92       	push	r7
     6f8:	8f 92       	push	r8
     6fa:	9f 92       	push	r9
     6fc:	af 92       	push	r10
     6fe:	bf 92       	push	r11
     700:	cf 92       	push	r12
     702:	df 92       	push	r13
     704:	ef 92       	push	r14
     706:	ff 92       	push	r15
     708:	cf 93       	push	r28
     70a:	df 93       	push	r29
     70c:	cd b7       	in	r28, 0x3d	; 61
     70e:	de b7       	in	r29, 0x3e	; 62
     710:	60 97       	sbiw	r28, 0x10	; 16
     712:	0f b6       	in	r0, 0x3f	; 63
     714:	f8 94       	cli
     716:	de bf       	out	0x3e, r29	; 62
     718:	0f be       	out	0x3f, r0	; 63
     71a:	cd bf       	out	0x3d, r28	; 61
     71c:	3c 01       	movw	r6, r24
     71e:	6a 01       	movw	r12, r20
     720:	7b 01       	movw	r14, r22
	double squarex= (n)*(n+1)*(2*n+1)/6.0;
     722:	20 e0       	ldi	r18, 0x00	; 0
     724:	30 e0       	ldi	r19, 0x00	; 0
     726:	40 e8       	ldi	r20, 0x80	; 128
     728:	5f e3       	ldi	r21, 0x3F	; 63
     72a:	c7 01       	movw	r24, r14
     72c:	b6 01       	movw	r22, r12
     72e:	0e 94 b4 0a 	call	0x1568	; 0x1568 <__addsf3>
     732:	6d 83       	std	Y+5, r22	; 0x05
     734:	7e 83       	std	Y+6, r23	; 0x06
     736:	8f 83       	std	Y+7, r24	; 0x07
     738:	98 87       	std	Y+8, r25	; 0x08
	double xbar = (n+1)/2.0;
     73a:	20 e0       	ldi	r18, 0x00	; 0
     73c:	30 e0       	ldi	r19, 0x00	; 0
     73e:	40 e0       	ldi	r20, 0x00	; 0
     740:	5f e3       	ldi	r21, 0x3F	; 63
     742:	0e 94 84 0c 	call	0x1908	; 0x1908 <__mulsf3>
     746:	69 83       	std	Y+1, r22	; 0x01
     748:	7a 83       	std	Y+2, r23	; 0x02
     74a:	8b 83       	std	Y+3, r24	; 0x03
     74c:	9c 83       	std	Y+4, r25	; 0x04
	double ybar = sumit(data_points,n)/n;
     74e:	c7 01       	movw	r24, r14
     750:	b6 01       	movw	r22, r12
     752:	0e 94 97 0b 	call	0x172e	; 0x172e <__fixsfsi>
     756:	4b 01       	movw	r8, r22
     758:	5c 01       	movw	r10, r24
     75a:	c3 01       	movw	r24, r6
     75c:	0e 94 f7 02 	call	0x5ee	; 0x5ee <sumit>
     760:	a7 01       	movw	r20, r14
     762:	96 01       	movw	r18, r12
     764:	0e 94 25 0b 	call	0x164a	; 0x164a <__divsf3>
     768:	69 87       	std	Y+9, r22	; 0x09
     76a:	7a 87       	std	Y+10, r23	; 0x0a
     76c:	8b 87       	std	Y+11, r24	; 0x0b
     76e:	9c 87       	std	Y+12, r25	; 0x0c

	m=(xysum(data_points,n)- n*xbar*ybar)/( squarex - n*xbar*xbar );
     770:	b4 01       	movw	r22, r8
     772:	c3 01       	movw	r24, r6
     774:	0e 94 34 03 	call	0x668	; 0x668 <xysum>
     778:	4b 01       	movw	r8, r22
     77a:	5c 01       	movw	r10, r24
     77c:	29 81       	ldd	r18, Y+1	; 0x01
     77e:	3a 81       	ldd	r19, Y+2	; 0x02
     780:	4b 81       	ldd	r20, Y+3	; 0x03
     782:	5c 81       	ldd	r21, Y+4	; 0x04
     784:	c7 01       	movw	r24, r14
     786:	b6 01       	movw	r22, r12
     788:	0e 94 84 0c 	call	0x1908	; 0x1908 <__mulsf3>
     78c:	2b 01       	movw	r4, r22
     78e:	3c 01       	movw	r6, r24
     790:	9b 01       	movw	r18, r22
     792:	ac 01       	movw	r20, r24
     794:	69 85       	ldd	r22, Y+9	; 0x09
     796:	7a 85       	ldd	r23, Y+10	; 0x0a
     798:	8b 85       	ldd	r24, Y+11	; 0x0b
     79a:	9c 85       	ldd	r25, Y+12	; 0x0c
     79c:	0e 94 84 0c 	call	0x1908	; 0x1908 <__mulsf3>
     7a0:	9b 01       	movw	r18, r22
     7a2:	ac 01       	movw	r20, r24
     7a4:	c5 01       	movw	r24, r10
     7a6:	b4 01       	movw	r22, r8
     7a8:	0e 94 b3 0a 	call	0x1566	; 0x1566 <__subsf3>
     7ac:	4b 01       	movw	r8, r22
     7ae:	5c 01       	movw	r10, r24
     7b0:	a7 01       	movw	r20, r14
     7b2:	96 01       	movw	r18, r12
     7b4:	c7 01       	movw	r24, r14
     7b6:	b6 01       	movw	r22, r12
     7b8:	0e 94 b4 0a 	call	0x1568	; 0x1568 <__addsf3>
     7bc:	20 e0       	ldi	r18, 0x00	; 0
     7be:	30 e0       	ldi	r19, 0x00	; 0
     7c0:	40 e8       	ldi	r20, 0x80	; 128
     7c2:	5f e3       	ldi	r21, 0x3F	; 63
     7c4:	0e 94 b4 0a 	call	0x1568	; 0x1568 <__addsf3>
     7c8:	6d 87       	std	Y+13, r22	; 0x0d
     7ca:	7e 87       	std	Y+14, r23	; 0x0e
     7cc:	8f 87       	std	Y+15, r24	; 0x0f
     7ce:	98 8b       	std	Y+16, r25	; 0x10
     7d0:	2d 81       	ldd	r18, Y+5	; 0x05
     7d2:	3e 81       	ldd	r19, Y+6	; 0x06
     7d4:	4f 81       	ldd	r20, Y+7	; 0x07
     7d6:	58 85       	ldd	r21, Y+8	; 0x08
     7d8:	c7 01       	movw	r24, r14
     7da:	b6 01       	movw	r22, r12
     7dc:	0e 94 84 0c 	call	0x1908	; 0x1908 <__mulsf3>
     7e0:	9b 01       	movw	r18, r22
     7e2:	ac 01       	movw	r20, r24
     7e4:	6d 85       	ldd	r22, Y+13	; 0x0d
     7e6:	7e 85       	ldd	r23, Y+14	; 0x0e
     7e8:	8f 85       	ldd	r24, Y+15	; 0x0f
     7ea:	98 89       	ldd	r25, Y+16	; 0x10
     7ec:	0e 94 84 0c 	call	0x1908	; 0x1908 <__mulsf3>
     7f0:	20 e0       	ldi	r18, 0x00	; 0
     7f2:	30 e0       	ldi	r19, 0x00	; 0
     7f4:	40 ec       	ldi	r20, 0xC0	; 192
     7f6:	50 e4       	ldi	r21, 0x40	; 64
     7f8:	0e 94 25 0b 	call	0x164a	; 0x164a <__divsf3>
     7fc:	6b 01       	movw	r12, r22
     7fe:	7c 01       	movw	r14, r24
     800:	a3 01       	movw	r20, r6
     802:	92 01       	movw	r18, r4
     804:	69 81       	ldd	r22, Y+1	; 0x01
     806:	7a 81       	ldd	r23, Y+2	; 0x02
     808:	8b 81       	ldd	r24, Y+3	; 0x03
     80a:	9c 81       	ldd	r25, Y+4	; 0x04
     80c:	0e 94 84 0c 	call	0x1908	; 0x1908 <__mulsf3>
     810:	9b 01       	movw	r18, r22
     812:	ac 01       	movw	r20, r24
     814:	c7 01       	movw	r24, r14
     816:	b6 01       	movw	r22, r12
     818:	0e 94 b3 0a 	call	0x1566	; 0x1566 <__subsf3>
     81c:	9b 01       	movw	r18, r22
     81e:	ac 01       	movw	r20, r24
     820:	c5 01       	movw	r24, r10
     822:	b4 01       	movw	r22, r8
     824:	0e 94 25 0b 	call	0x164a	; 0x164a <__divsf3>
     828:	9b 01       	movw	r18, r22
     82a:	ac 01       	movw	r20, r24
     82c:	60 93 6c 01 	sts	0x016C, r22	; 0x80016c <m>
     830:	70 93 6d 01 	sts	0x016D, r23	; 0x80016d <m+0x1>
     834:	80 93 6e 01 	sts	0x016E, r24	; 0x80016e <m+0x2>
     838:	90 93 6f 01 	sts	0x016F, r25	; 0x80016f <m+0x3>
	c=ybar-m*xbar;
     83c:	69 81       	ldd	r22, Y+1	; 0x01
     83e:	7a 81       	ldd	r23, Y+2	; 0x02
     840:	8b 81       	ldd	r24, Y+3	; 0x03
     842:	9c 81       	ldd	r25, Y+4	; 0x04
     844:	0e 94 84 0c 	call	0x1908	; 0x1908 <__mulsf3>
     848:	9b 01       	movw	r18, r22
     84a:	ac 01       	movw	r20, r24
     84c:	69 85       	ldd	r22, Y+9	; 0x09
     84e:	7a 85       	ldd	r23, Y+10	; 0x0a
     850:	8b 85       	ldd	r24, Y+11	; 0x0b
     852:	9c 85       	ldd	r25, Y+12	; 0x0c
     854:	0e 94 b3 0a 	call	0x1566	; 0x1566 <__subsf3>
     858:	60 93 68 01 	sts	0x0168, r22	; 0x800168 <c>
     85c:	70 93 69 01 	sts	0x0169, r23	; 0x800169 <c+0x1>
     860:	80 93 6a 01 	sts	0x016A, r24	; 0x80016a <c+0x2>
     864:	90 93 6b 01 	sts	0x016B, r25	; 0x80016b <c+0x3>
}
     868:	60 96       	adiw	r28, 0x10	; 16
     86a:	0f b6       	in	r0, 0x3f	; 63
     86c:	f8 94       	cli
     86e:	de bf       	out	0x3e, r29	; 62
     870:	0f be       	out	0x3f, r0	; 63
     872:	cd bf       	out	0x3d, r28	; 61
     874:	df 91       	pop	r29
     876:	cf 91       	pop	r28
     878:	ff 90       	pop	r15
     87a:	ef 90       	pop	r14
     87c:	df 90       	pop	r13
     87e:	cf 90       	pop	r12
     880:	bf 90       	pop	r11
     882:	af 90       	pop	r10
     884:	9f 90       	pop	r9
     886:	8f 90       	pop	r8
     888:	7f 90       	pop	r7
     88a:	6f 90       	pop	r6
     88c:	5f 90       	pop	r5
     88e:	4f 90       	pop	r4
     890:	08 95       	ret

00000892 <show_heart_rate>:




int show_heart_rate()
{	
     892:	4f 92       	push	r4
     894:	5f 92       	push	r5
     896:	6f 92       	push	r6
     898:	7f 92       	push	r7
     89a:	8f 92       	push	r8
     89c:	9f 92       	push	r9
     89e:	af 92       	push	r10
     8a0:	bf 92       	push	r11
     8a2:	cf 92       	push	r12
     8a4:	df 92       	push	r13
     8a6:	ef 92       	push	r14
     8a8:	ff 92       	push	r15
     8aa:	0f 93       	push	r16
     8ac:	1f 93       	push	r17
     8ae:	cf 93       	push	r28
     8b0:	df 93       	push	r29
     8b2:	cd b7       	in	r28, 0x3d	; 61
     8b4:	de b7       	in	r29, 0x3e	; 62
     8b6:	cc 56       	subi	r28, 0x6C	; 108
     8b8:	d1 09       	sbc	r29, r1
     8ba:	0f b6       	in	r0, 0x3f	; 63
     8bc:	f8 94       	cli
     8be:	de bf       	out	0x3e, r29	; 62
     8c0:	0f be       	out	0x3f, r0	; 63
     8c2:	cd bf       	out	0x3d, r28	; 61
	double sampling_rate = 0.100 ;	   	
	int time_limit = 10;
	int se=time_limit/(sampling_rate*2);
	int data_points[se+1];
	
	data_points[0]=0;
     8c4:	18 86       	std	Y+8, r1	; 0x08
     8c6:	1f 82       	std	Y+7, r1	; 0x07
     8c8:	7e 01       	movw	r14, r28
     8ca:	29 e0       	ldi	r18, 0x09	; 9
     8cc:	e2 0e       	add	r14, r18
     8ce:	f1 1c       	adc	r15, r1
     8d0:	6e 01       	movw	r12, r28
     8d2:	8d e6       	ldi	r24, 0x6D	; 109
     8d4:	c8 0e       	add	r12, r24
     8d6:	d1 1c       	adc	r13, r1
     8d8:	87 01       	movw	r16, r14
	int temp = 55;
	
	char val[6]; 
		for(i=1;i<=se;i++)
		{
			data_points[i]=ADC_Read(0);
     8da:	80 e0       	ldi	r24, 0x00	; 0
     8dc:	90 e0       	ldi	r25, 0x00	; 0
     8de:	0e 94 cc 00 	call	0x198	; 0x198 <ADC_Read>
     8e2:	f8 01       	movw	r30, r16
     8e4:	81 93       	st	Z+, r24
     8e6:	91 93       	st	Z+, r25
     8e8:	8f 01       	movw	r16, r30
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
     8ea:	4a e0       	ldi	r20, 0x0A	; 10
     8ec:	be 01       	movw	r22, r28
     8ee:	6f 5f       	subi	r22, 0xFF	; 255
     8f0:	7f 4f       	sbci	r23, 0xFF	; 255
     8f2:	0e 94 b7 0d 	call	0x1b6e	; 0x1b6e <__itoa_ncheck>
     8f6:	ff ef       	ldi	r31, 0xFF	; 255
     8f8:	20 e7       	ldi	r18, 0x70	; 112
     8fa:	82 e0       	ldi	r24, 0x02	; 2
     8fc:	f1 50       	subi	r31, 0x01	; 1
     8fe:	20 40       	sbci	r18, 0x00	; 0
     900:	80 40       	sbci	r24, 0x00	; 0
     902:	e1 f7       	brne	.-8      	; 0x8fc <show_heart_rate+0x6a>
     904:	00 c0       	rjmp	.+0      	; 0x906 <show_heart_rate+0x74>
     906:	00 00       	nop
	int h=0;
	int l=1023;
	int temp = 55;
	
	char val[6]; 
		for(i=1;i<=se;i++)
     908:	0c 15       	cp	r16, r12
     90a:	1d 05       	cpc	r17, r13
     90c:	31 f7       	brne	.-52     	; 0x8da <show_heart_rate+0x48>

			_delay_ms(sampling_rate*1000);
			
		}
	
		regression(data_points,se);
     90e:	40 e0       	ldi	r20, 0x00	; 0
     910:	50 e0       	ldi	r21, 0x00	; 0
     912:	68 e4       	ldi	r22, 0x48	; 72
     914:	72 e4       	ldi	r23, 0x42	; 66
     916:	ce 01       	movw	r24, r28
     918:	07 96       	adiw	r24, 0x07	; 7
     91a:	0e 94 78 03 	call	0x6f0	; 0x6f0 <regression>
	
		for(i=0;i<time_limit/(sampling_rate*2);i++)
		{
			thresh=(i+2)*m+c;
     91e:	40 90 6c 01 	lds	r4, 0x016C	; 0x80016c <m>
     922:	50 90 6d 01 	lds	r5, 0x016D	; 0x80016d <m+0x1>
     926:	60 90 6e 01 	lds	r6, 0x016E	; 0x80016e <m+0x2>
     92a:	70 90 6f 01 	lds	r7, 0x016F	; 0x80016f <m+0x3>
     92e:	80 90 68 01 	lds	r8, 0x0168	; 0x800168 <c>
     932:	90 90 69 01 	lds	r9, 0x0169	; 0x800169 <c+0x1>
     936:	a0 90 6a 01 	lds	r10, 0x016A	; 0x80016a <c+0x2>
     93a:	b0 90 6b 01 	lds	r11, 0x016B	; 0x80016b <c+0x3>
int show_heart_rate()
{	
	int i;
	int thresh=300;
	int count=0;
	int count2=0;
     93e:	c1 2c       	mov	r12, r1
     940:	d1 2c       	mov	r13, r1
			
		}
	
		regression(data_points,se);
	
		for(i=0;i<time_limit/(sampling_rate*2);i++)
     942:	00 e0       	ldi	r16, 0x00	; 0
     944:	10 e0       	ldi	r17, 0x00	; 0
		{
			thresh=(i+2)*m+c;
     946:	b8 01       	movw	r22, r16
     948:	6e 5f       	subi	r22, 0xFE	; 254
     94a:	7f 4f       	sbci	r23, 0xFF	; 255
     94c:	07 2e       	mov	r0, r23
     94e:	00 0c       	add	r0, r0
     950:	88 0b       	sbc	r24, r24
     952:	99 0b       	sbc	r25, r25
     954:	0e 94 cf 0b 	call	0x179e	; 0x179e <__floatsisf>
     958:	a3 01       	movw	r20, r6
     95a:	92 01       	movw	r18, r4
     95c:	0e 94 84 0c 	call	0x1908	; 0x1908 <__mulsf3>
     960:	a5 01       	movw	r20, r10
     962:	94 01       	movw	r18, r8
     964:	0e 94 b4 0a 	call	0x1568	; 0x1568 <__addsf3>
     968:	0e 94 97 0b 	call	0x172e	; 0x172e <__fixsfsi>

			int a=data_points[i+1];
     96c:	0f 5f       	subi	r16, 0xFF	; 255
     96e:	1f 4f       	sbci	r17, 0xFF	; 255
     970:	f7 01       	movw	r30, r14
     972:	41 91       	ld	r20, Z+
     974:	51 91       	ld	r21, Z+
     976:	7f 01       	movw	r14, r30
			char ccount[3];

			if(a>h)h=a; 
			if(a<l)l=a;
		
			if(a>thresh){
     978:	64 17       	cp	r22, r20
     97a:	75 07       	cpc	r23, r21
     97c:	7c f4       	brge	.+30     	; 0x99c <show_heart_rate+0x10a>
				count+=1; 
				if(a>data_points[i] && a>data_points[i+2]){
     97e:	34 97       	sbiw	r30, 0x04	; 4
     980:	20 81       	ld	r18, Z
     982:	31 81       	ldd	r19, Z+1	; 0x01
     984:	24 17       	cp	r18, r20
     986:	35 07       	cpc	r19, r21
     988:	4c f4       	brge	.+18     	; 0x99c <show_heart_rate+0x10a>
     98a:	f7 01       	movw	r30, r14
     98c:	20 81       	ld	r18, Z
     98e:	31 81       	ldd	r19, Z+1	; 0x01
     990:	24 17       	cp	r18, r20
     992:	35 07       	cpc	r19, r21
     994:	1c f4       	brge	.+6      	; 0x99c <show_heart_rate+0x10a>
					count2+=1;
     996:	ff ef       	ldi	r31, 0xFF	; 255
     998:	cf 1a       	sub	r12, r31
     99a:	df 0a       	sbc	r13, r31
			
		}
	
		regression(data_points,se);
	
		for(i=0;i<time_limit/(sampling_rate*2);i++)
     99c:	02 33       	cpi	r16, 0x32	; 50
     99e:	11 05       	cpc	r17, r1
     9a0:	91 f6       	brne	.-92     	; 0x946 <show_heart_rate+0xb4>
					count2+=1;
				}
			
			}
		}
		temp = count2*(60/time_limit);
     9a2:	c6 01       	movw	r24, r12
     9a4:	88 0f       	add	r24, r24
     9a6:	99 1f       	adc	r25, r25
     9a8:	c8 0e       	add	r12, r24
     9aa:	d9 1e       	adc	r13, r25
     9ac:	cc 0c       	add	r12, r12
     9ae:	dd 1c       	adc	r13, r13
		if(temp>60) return temp;
     9b0:	2d e3       	ldi	r18, 0x3D	; 61
     9b2:	c2 16       	cp	r12, r18
     9b4:	d1 04       	cpc	r13, r1
     9b6:	1c f0       	brlt	.+6      	; 0x9be <show_heart_rate+0x12c>
     9b8:	8c 2d       	mov	r24, r12
     9ba:	9d 2d       	mov	r25, r13
     9bc:	02 c0       	rjmp	.+4      	; 0x9c2 <show_heart_rate+0x130>
		else return 72;
     9be:	88 e4       	ldi	r24, 0x48	; 72
     9c0:	90 e0       	ldi	r25, 0x00	; 0
     9c2:	c4 59       	subi	r28, 0x94	; 148
     9c4:	df 4f       	sbci	r29, 0xFF	; 255
     9c6:	0f b6       	in	r0, 0x3f	; 63
     9c8:	f8 94       	cli
     9ca:	de bf       	out	0x3e, r29	; 62
     9cc:	0f be       	out	0x3f, r0	; 63
     9ce:	cd bf       	out	0x3d, r28	; 61
     9d0:	df 91       	pop	r29
     9d2:	cf 91       	pop	r28
     9d4:	1f 91       	pop	r17
     9d6:	0f 91       	pop	r16
     9d8:	ff 90       	pop	r15
     9da:	ef 90       	pop	r14
     9dc:	df 90       	pop	r13
     9de:	cf 90       	pop	r12
     9e0:	bf 90       	pop	r11
     9e2:	af 90       	pop	r10
     9e4:	9f 90       	pop	r9
     9e6:	8f 90       	pop	r8
     9e8:	7f 90       	pop	r7
     9ea:	6f 90       	pop	r6
     9ec:	5f 90       	pop	r5
     9ee:	4f 90       	pop	r4
     9f0:	08 95       	ret

000009f2 <SystemInit>:
/////////////////////////////////////////////////////////////////////////////////////////////////////////

//////////////////////////////////System Init////////////////////////////////////////////////////////////

void SystemInit()
{
     9f2:	0f 93       	push	r16
     9f4:	1f 93       	push	r17
	ADC_Init();
     9f6:	0e 94 c6 00 	call	0x18c	; 0x18c <ADC_Init>
	keypad_init();
     9fa:	0e 94 be 02 	call	0x57c	; 0x57c <keypad_init>
	DDRD |= (1<<PIND7) | (1<<PIND6) | (1<<PIND5);
     9fe:	81 b3       	in	r24, 0x11	; 17
     a00:	80 6e       	ori	r24, 0xE0	; 224
     a02:	81 bb       	out	0x11, r24	; 17
	PORTD &= (1<<PIND7) | (1<<PIND6) | (1<<PIND5);
     a04:	82 b3       	in	r24, 0x12	; 18
     a06:	80 7e       	andi	r24, 0xE0	; 224
     a08:	82 bb       	out	0x12, r24	; 18
	lcd_init(LCD_BACKLIGHT_OFF);
     a0a:	80 e0       	ldi	r24, 0x00	; 0
     a0c:	0e 94 03 02 	call	0x406	; 0x406 <lcd_init>
	UART_init(9600);
     a10:	60 e8       	ldi	r22, 0x80	; 128
     a12:	75 e2       	ldi	r23, 0x25	; 37
     a14:	80 e0       	ldi	r24, 0x00	; 0
     a16:	90 e0       	ldi	r25, 0x00	; 0
     a18:	0e 94 6b 0a 	call	0x14d6	; 0x14d6 <UART_init>
	hx711_init(128, 3133.353, 8390060);
     a1c:	0c ea       	ldi	r16, 0xAC	; 172
     a1e:	15 e0       	ldi	r17, 0x05	; 5
     a20:	20 e8       	ldi	r18, 0x80	; 128
     a22:	30 e0       	ldi	r19, 0x00	; 0
     a24:	46 ea       	ldi	r20, 0xA6	; 166
     a26:	55 ed       	ldi	r21, 0xD5	; 213
     a28:	63 e4       	ldi	r22, 0x43	; 67
     a2a:	75 e4       	ldi	r23, 0x45	; 69
     a2c:	80 e8       	ldi	r24, 0x80	; 128
     a2e:	0e 94 78 01 	call	0x2f0	; 0x2f0 <hx711_init>
}
     a32:	1f 91       	pop	r17
     a34:	0f 91       	pop	r16
     a36:	08 95       	ret

00000a38 <resetChip>:
void resetChip()
{
	WDTCR = 0x18;
     a38:	88 e1       	ldi	r24, 0x18	; 24
     a3a:	81 bd       	out	0x21, r24	; 33
	WDTCR = 0x08;
     a3c:	88 e0       	ldi	r24, 0x08	; 8
     a3e:	81 bd       	out	0x21, r24	; 33
     a40:	ff cf       	rjmp	.-2      	; 0xa40 <resetChip+0x8>

00000a42 <Clock>:
	while(1);
}
void Clock()
{
		if(sec==60)
     a42:	80 91 86 01 	lds	r24, 0x0186	; 0x800186 <sec>
     a46:	90 91 87 01 	lds	r25, 0x0187	; 0x800187 <sec+0x1>
     a4a:	a0 91 88 01 	lds	r26, 0x0188	; 0x800188 <sec+0x2>
     a4e:	b0 91 89 01 	lds	r27, 0x0189	; 0x800189 <sec+0x3>
     a52:	cc 97       	sbiw	r24, 0x3c	; 60
     a54:	a1 05       	cpc	r26, r1
     a56:	b1 05       	cpc	r27, r1
     a58:	09 f0       	breq	.+2      	; 0xa5c <Clock+0x1a>
     a5a:	46 c0       	rjmp	.+140    	; 0xae8 <Clock+0xa6>
		{
			minite++;
     a5c:	80 91 70 01 	lds	r24, 0x0170	; 0x800170 <minite>
     a60:	90 91 71 01 	lds	r25, 0x0171	; 0x800171 <minite+0x1>
     a64:	a0 91 72 01 	lds	r26, 0x0172	; 0x800172 <minite+0x2>
     a68:	b0 91 73 01 	lds	r27, 0x0173	; 0x800173 <minite+0x3>
     a6c:	01 96       	adiw	r24, 0x01	; 1
     a6e:	a1 1d       	adc	r26, r1
     a70:	b1 1d       	adc	r27, r1
     a72:	80 93 70 01 	sts	0x0170, r24	; 0x800170 <minite>
     a76:	90 93 71 01 	sts	0x0171, r25	; 0x800171 <minite+0x1>
     a7a:	a0 93 72 01 	sts	0x0172, r26	; 0x800172 <minite+0x2>
     a7e:	b0 93 73 01 	sts	0x0173, r27	; 0x800173 <minite+0x3>
			sec = 0;
     a82:	10 92 86 01 	sts	0x0186, r1	; 0x800186 <sec>
     a86:	10 92 87 01 	sts	0x0187, r1	; 0x800187 <sec+0x1>
     a8a:	10 92 88 01 	sts	0x0188, r1	; 0x800188 <sec+0x2>
     a8e:	10 92 89 01 	sts	0x0189, r1	; 0x800189 <sec+0x3>
			lcd_clear();
     a92:	0e 94 5f 02 	call	0x4be	; 0x4be <lcd_clear>
			if(minite==60)
     a96:	80 91 70 01 	lds	r24, 0x0170	; 0x800170 <minite>
     a9a:	90 91 71 01 	lds	r25, 0x0171	; 0x800171 <minite+0x1>
     a9e:	a0 91 72 01 	lds	r26, 0x0172	; 0x800172 <minite+0x2>
     aa2:	b0 91 73 01 	lds	r27, 0x0173	; 0x800173 <minite+0x3>
     aa6:	cc 97       	sbiw	r24, 0x3c	; 60
     aa8:	a1 05       	cpc	r26, r1
     aaa:	b1 05       	cpc	r27, r1
     aac:	e9 f4       	brne	.+58     	; 0xae8 <Clock+0xa6>
			{
				hour++;
     aae:	80 91 74 01 	lds	r24, 0x0174	; 0x800174 <hour>
     ab2:	90 91 75 01 	lds	r25, 0x0175	; 0x800175 <hour+0x1>
     ab6:	a0 91 76 01 	lds	r26, 0x0176	; 0x800176 <hour+0x2>
     aba:	b0 91 77 01 	lds	r27, 0x0177	; 0x800177 <hour+0x3>
     abe:	01 96       	adiw	r24, 0x01	; 1
     ac0:	a1 1d       	adc	r26, r1
     ac2:	b1 1d       	adc	r27, r1
     ac4:	80 93 74 01 	sts	0x0174, r24	; 0x800174 <hour>
     ac8:	90 93 75 01 	sts	0x0175, r25	; 0x800175 <hour+0x1>
     acc:	a0 93 76 01 	sts	0x0176, r26	; 0x800176 <hour+0x2>
     ad0:	b0 93 77 01 	sts	0x0177, r27	; 0x800177 <hour+0x3>
				minite = 0;
     ad4:	10 92 70 01 	sts	0x0170, r1	; 0x800170 <minite>
     ad8:	10 92 71 01 	sts	0x0171, r1	; 0x800171 <minite+0x1>
     adc:	10 92 72 01 	sts	0x0172, r1	; 0x800172 <minite+0x2>
     ae0:	10 92 73 01 	sts	0x0173, r1	; 0x800173 <minite+0x3>
				lcd_clear();
     ae4:	0e 94 5f 02 	call	0x4be	; 0x4be <lcd_clear>
			}
		}
		lcd_puts_at("Time : ",0,0);
     ae8:	40 e0       	ldi	r20, 0x00	; 0
     aea:	60 e0       	ldi	r22, 0x00	; 0
     aec:	86 e6       	ldi	r24, 0x66	; 102
     aee:	90 e0       	ldi	r25, 0x00	; 0
     af0:	0e 94 80 02 	call	0x500	; 0x500 <lcd_puts_at>
		lcd_puts_at("BPM",9,1);
     af4:	41 e0       	ldi	r20, 0x01	; 1
     af6:	69 e0       	ldi	r22, 0x09	; 9
     af8:	86 e2       	ldi	r24, 0x26	; 38
     afa:	91 e0       	ldi	r25, 0x01	; 1
     afc:	0e 94 80 02 	call	0x500	; 0x500 <lcd_puts_at>
		itoa(hour,Ttime,10);
     b00:	80 91 74 01 	lds	r24, 0x0174	; 0x800174 <hour>
     b04:	90 91 75 01 	lds	r25, 0x0175	; 0x800175 <hour+0x1>
     b08:	a0 91 76 01 	lds	r26, 0x0176	; 0x800176 <hour+0x2>
     b0c:	b0 91 77 01 	lds	r27, 0x0177	; 0x800177 <hour+0x3>
     b10:	4a e0       	ldi	r20, 0x0A	; 10
     b12:	67 ef       	ldi	r22, 0xF7	; 247
     b14:	71 e0       	ldi	r23, 0x01	; 1
     b16:	0e 94 b7 0d 	call	0x1b6e	; 0x1b6e <__itoa_ncheck>
		lcd_puts_at(Ttime,7,0);
     b1a:	40 e0       	ldi	r20, 0x00	; 0
     b1c:	67 e0       	ldi	r22, 0x07	; 7
     b1e:	87 ef       	ldi	r24, 0xF7	; 247
     b20:	91 e0       	ldi	r25, 0x01	; 1
     b22:	0e 94 80 02 	call	0x500	; 0x500 <lcd_puts_at>
		lcd_puts_at(":",9,0);
     b26:	40 e0       	ldi	r20, 0x00	; 0
     b28:	69 e0       	ldi	r22, 0x09	; 9
     b2a:	87 ea       	ldi	r24, 0xA7	; 167
     b2c:	90 e0       	ldi	r25, 0x00	; 0
     b2e:	0e 94 80 02 	call	0x500	; 0x500 <lcd_puts_at>
		itoa(minite,Ttime,10);
     b32:	80 91 70 01 	lds	r24, 0x0170	; 0x800170 <minite>
     b36:	90 91 71 01 	lds	r25, 0x0171	; 0x800171 <minite+0x1>
     b3a:	a0 91 72 01 	lds	r26, 0x0172	; 0x800172 <minite+0x2>
     b3e:	b0 91 73 01 	lds	r27, 0x0173	; 0x800173 <minite+0x3>
     b42:	4a e0       	ldi	r20, 0x0A	; 10
     b44:	67 ef       	ldi	r22, 0xF7	; 247
     b46:	71 e0       	ldi	r23, 0x01	; 1
     b48:	0e 94 b7 0d 	call	0x1b6e	; 0x1b6e <__itoa_ncheck>
		lcd_puts_at(Ttime,10,0);
     b4c:	40 e0       	ldi	r20, 0x00	; 0
     b4e:	6a e0       	ldi	r22, 0x0A	; 10
     b50:	87 ef       	ldi	r24, 0xF7	; 247
     b52:	91 e0       	ldi	r25, 0x01	; 1
     b54:	0e 94 80 02 	call	0x500	; 0x500 <lcd_puts_at>
		lcd_puts_at(":",12,0);
     b58:	40 e0       	ldi	r20, 0x00	; 0
     b5a:	6c e0       	ldi	r22, 0x0C	; 12
     b5c:	87 ea       	ldi	r24, 0xA7	; 167
     b5e:	90 e0       	ldi	r25, 0x00	; 0
     b60:	0e 94 80 02 	call	0x500	; 0x500 <lcd_puts_at>
		itoa(sec,Ttime,10);
     b64:	80 91 86 01 	lds	r24, 0x0186	; 0x800186 <sec>
     b68:	90 91 87 01 	lds	r25, 0x0187	; 0x800187 <sec+0x1>
     b6c:	a0 91 88 01 	lds	r26, 0x0188	; 0x800188 <sec+0x2>
     b70:	b0 91 89 01 	lds	r27, 0x0189	; 0x800189 <sec+0x3>
     b74:	4a e0       	ldi	r20, 0x0A	; 10
     b76:	67 ef       	ldi	r22, 0xF7	; 247
     b78:	71 e0       	ldi	r23, 0x01	; 1
     b7a:	0e 94 b7 0d 	call	0x1b6e	; 0x1b6e <__itoa_ncheck>
		lcd_puts_at(Ttime,13,0);
     b7e:	40 e0       	ldi	r20, 0x00	; 0
     b80:	6d e0       	ldi	r22, 0x0D	; 13
     b82:	87 ef       	ldi	r24, 0xF7	; 247
     b84:	91 e0       	ldi	r25, 0x01	; 1
     b86:	0e 94 80 02 	call	0x500	; 0x500 <lcd_puts_at>
     b8a:	08 95       	ret

00000b8c <weightVarience>:
}
*/


int weightVarience(double weight)
{
     b8c:	8f 92       	push	r8
     b8e:	9f 92       	push	r9
     b90:	af 92       	push	r10
     b92:	bf 92       	push	r11
     b94:	cf 92       	push	r12
     b96:	df 92       	push	r13
     b98:	ef 92       	push	r14
     b9a:	ff 92       	push	r15
     b9c:	6b 01       	movw	r12, r22
     b9e:	7c 01       	movw	r14, r24
	double varience = (InitialWeight - weight);
     ba0:	9b 01       	movw	r18, r22
     ba2:	ac 01       	movw	r20, r24
     ba4:	60 91 f3 01 	lds	r22, 0x01F3	; 0x8001f3 <InitialWeight>
     ba8:	70 91 f4 01 	lds	r23, 0x01F4	; 0x8001f4 <InitialWeight+0x1>
     bac:	80 91 f5 01 	lds	r24, 0x01F5	; 0x8001f5 <InitialWeight+0x2>
     bb0:	90 91 f6 01 	lds	r25, 0x01F6	; 0x8001f6 <InitialWeight+0x3>
     bb4:	0e 94 b3 0a 	call	0x1566	; 0x1566 <__subsf3>
     bb8:	4b 01       	movw	r8, r22
     bba:	5c 01       	movw	r10, r24
	InitialWeight = weight;
     bbc:	c0 92 f3 01 	sts	0x01F3, r12	; 0x8001f3 <InitialWeight>
     bc0:	d0 92 f4 01 	sts	0x01F4, r13	; 0x8001f4 <InitialWeight+0x1>
     bc4:	e0 92 f5 01 	sts	0x01F5, r14	; 0x8001f5 <InitialWeight+0x2>
     bc8:	f0 92 f6 01 	sts	0x01F6, r15	; 0x8001f6 <InitialWeight+0x3>
	if(varience > 0.010)
     bcc:	2a e0       	ldi	r18, 0x0A	; 10
     bce:	37 ed       	ldi	r19, 0xD7	; 215
     bd0:	43 e2       	ldi	r20, 0x23	; 35
     bd2:	5c e3       	ldi	r21, 0x3C	; 60
     bd4:	0e 94 7f 0c 	call	0x18fe	; 0x18fe <__gesf2>
     bd8:	18 16       	cp	r1, r24
     bda:	64 f0       	brlt	.+24     	; 0xbf4 <weightVarience+0x68>
		return 1;
	else if(varience==0)
     bdc:	20 e0       	ldi	r18, 0x00	; 0
     bde:	30 e0       	ldi	r19, 0x00	; 0
     be0:	a9 01       	movw	r20, r18
     be2:	c5 01       	movw	r24, r10
     be4:	b4 01       	movw	r22, r8
     be6:	0e 94 20 0b 	call	0x1640	; 0x1640 <__cmpsf2>
     bea:	88 23       	and	r24, r24
     bec:	31 f0       	breq	.+12     	; 0xbfa <weightVarience+0x6e>
		return 2;
	else
		return 3;	
     bee:	83 e0       	ldi	r24, 0x03	; 3
     bf0:	90 e0       	ldi	r25, 0x00	; 0
     bf2:	05 c0       	rjmp	.+10     	; 0xbfe <weightVarience+0x72>
int weightVarience(double weight)
{
	double varience = (InitialWeight - weight);
	InitialWeight = weight;
	if(varience > 0.010)
		return 1;
     bf4:	81 e0       	ldi	r24, 0x01	; 1
     bf6:	90 e0       	ldi	r25, 0x00	; 0
     bf8:	02 c0       	rjmp	.+4      	; 0xbfe <weightVarience+0x72>
	else if(varience==0)
		return 2;
     bfa:	82 e0       	ldi	r24, 0x02	; 2
     bfc:	90 e0       	ldi	r25, 0x00	; 0
	else
		return 3;	
}	
     bfe:	ff 90       	pop	r15
     c00:	ef 90       	pop	r14
     c02:	df 90       	pop	r13
     c04:	cf 90       	pop	r12
     c06:	bf 90       	pop	r11
     c08:	af 90       	pop	r10
     c0a:	9f 90       	pop	r9
     c0c:	8f 90       	pop	r8
     c0e:	08 95       	ret

00000c10 <valve>:
void valve(int state)
{
	DDRD |= (1<<PIND2);
     c10:	8a 9a       	sbi	0x11, 2	; 17
	int i;
	if(state==2){
     c12:	82 30       	cpi	r24, 0x02	; 2
     c14:	91 05       	cpc	r25, r1
     c16:	99 f4       	brne	.+38     	; 0xc3e <valve+0x2e>
     c18:	84 e6       	ldi	r24, 0x64	; 100
     c1a:	90 e0       	ldi	r25, 0x00	; 0
		for(i=0;i<100;i++){
			PORTD |= (1<<PIND2);
     c1c:	92 9a       	sbi	0x12, 2	; 18
     c1e:	ef e9       	ldi	r30, 0x9F	; 159
     c20:	ff e0       	ldi	r31, 0x0F	; 15
     c22:	31 97       	sbiw	r30, 0x01	; 1
     c24:	f1 f7       	brne	.-4      	; 0xc22 <valve+0x12>
     c26:	00 c0       	rjmp	.+0      	; 0xc28 <valve+0x18>
     c28:	00 00       	nop
			_delay_ms(2);
			PORTD &= ~(1<<PIND2);
     c2a:	92 98       	cbi	0x12, 2	; 18
     c2c:	ef e9       	ldi	r30, 0x9F	; 159
     c2e:	fc e8       	ldi	r31, 0x8C	; 140
     c30:	31 97       	sbiw	r30, 0x01	; 1
     c32:	f1 f7       	brne	.-4      	; 0xc30 <valve+0x20>
     c34:	00 c0       	rjmp	.+0      	; 0xc36 <valve+0x26>
     c36:	00 00       	nop
     c38:	01 97       	sbiw	r24, 0x01	; 1
void valve(int state)
{
	DDRD |= (1<<PIND2);
	int i;
	if(state==2){
		for(i=0;i<100;i++){
     c3a:	81 f7       	brne	.-32     	; 0xc1c <valve+0xc>
     c3c:	08 95       	ret
			_delay_ms(2);
			PORTD &= ~(1<<PIND2);
			_delay_ms(18);
		}
	}
	else if(state==1){
     c3e:	01 97       	sbiw	r24, 0x01	; 1
     c40:	91 f4       	brne	.+36     	; 0xc66 <valve+0x56>
     c42:	84 e6       	ldi	r24, 0x64	; 100
     c44:	90 e0       	ldi	r25, 0x00	; 0
		for(i=0;i<100;i++){
			PORTD |= (1<<PIND2);
     c46:	92 9a       	sbi	0x12, 2	; 18
     c48:	ef ec       	ldi	r30, 0xCF	; 207
     c4a:	f7 e0       	ldi	r31, 0x07	; 7
     c4c:	31 97       	sbiw	r30, 0x01	; 1
     c4e:	f1 f7       	brne	.-4      	; 0xc4c <valve+0x3c>
     c50:	00 c0       	rjmp	.+0      	; 0xc52 <valve+0x42>
     c52:	00 00       	nop
			_delay_ms(1);
			PORTD &= ~(1<<PIND2);
     c54:	92 98       	cbi	0x12, 2	; 18
     c56:	ef e6       	ldi	r30, 0x6F	; 111
     c58:	f4 e9       	ldi	r31, 0x94	; 148
     c5a:	31 97       	sbiw	r30, 0x01	; 1
     c5c:	f1 f7       	brne	.-4      	; 0xc5a <valve+0x4a>
     c5e:	00 c0       	rjmp	.+0      	; 0xc60 <valve+0x50>
     c60:	00 00       	nop
     c62:	01 97       	sbiw	r24, 0x01	; 1
			PORTD &= ~(1<<PIND2);
			_delay_ms(18);
		}
	}
	else if(state==1){
		for(i=0;i<100;i++){
     c64:	81 f7       	brne	.-32     	; 0xc46 <valve+0x36>
     c66:	08 95       	ret

00000c68 <main>:


//////////////////////////////// Main Function///////////////////////////////////////////////////////////

int main(void)
{	
     c68:	cf 93       	push	r28
     c6a:	df 93       	push	r29
     c6c:	00 d0       	rcall	.+0      	; 0xc6e <main+0x6>
     c6e:	1f 92       	push	r1
     c70:	cd b7       	in	r28, 0x3d	; 61
     c72:	de b7       	in	r29, 0x3e	; 62
	PORTC |= (1<<PINC3);
     c74:	ab 9a       	sbi	0x15, 3	; 21
	SystemInit();
     c76:	0e 94 f9 04 	call	0x9f2	; 0x9f2 <SystemInit>
	InitialWeight = hx711_getweight();
     c7a:	0e 94 2d 01 	call	0x25a	; 0x25a <hx711_getweight>
     c7e:	60 93 f3 01 	sts	0x01F3, r22	; 0x8001f3 <InitialWeight>
     c82:	70 93 f4 01 	sts	0x01F4, r23	; 0x8001f4 <InitialWeight+0x1>
     c86:	80 93 f5 01 	sts	0x01F5, r24	; 0x8001f5 <InitialWeight+0x2>
     c8a:	90 93 f6 01 	sts	0x01F6, r25	; 0x8001f6 <InitialWeight+0x3>

	while(1)
	{
		while(isPressed(BTN_SET_RESET))
		{
			A = 'B';
     c8e:	12 e4       	ldi	r17, 0x42	; 66
     c90:	06 c0       	rjmp	.+12     	; 0xc9e <main+0x36>
     c92:	10 93 65 00 	sts	0x0065, r17	; 0x800065 <A>
			lcd_init(LCD_BACKLIGHT_ON);
     c96:	88 e0       	ldi	r24, 0x08	; 8
     c98:	0e 94 03 02 	call	0x406	; 0x406 <lcd_init>
			PORTD |= (1<<PIND7);
     c9c:	97 9a       	sbi	0x12, 7	; 18
	InitialWeight = hx711_getweight();
	

	while(1)
	{
		while(isPressed(BTN_SET_RESET))
     c9e:	81 e8       	ldi	r24, 0x81	; 129
     ca0:	0e 94 d1 02 	call	0x5a2	; 0x5a2 <isPressed>
     ca4:	81 11       	cpse	r24, r1
     ca6:	f5 cf       	rjmp	.-22     	; 0xc92 <main+0x2a>
		{
			A = 'B';
			lcd_init(LCD_BACKLIGHT_ON);
			PORTD |= (1<<PIND7);
		}
		if(A == 'B')
     ca8:	90 91 65 00 	lds	r25, 0x0065	; 0x800065 <A>
     cac:	92 34       	cpi	r25, 0x42	; 66
     cae:	b9 f7       	brne	.-18     	; 0xc9e <main+0x36>
     cb0:	2f ef       	ldi	r18, 0xFF	; 255
     cb2:	33 ed       	ldi	r19, 0xD3	; 211
     cb4:	40 e3       	ldi	r20, 0x30	; 48
     cb6:	21 50       	subi	r18, 0x01	; 1
     cb8:	30 40       	sbci	r19, 0x00	; 0
     cba:	40 40       	sbci	r20, 0x00	; 0
     cbc:	e1 f7       	brne	.-8      	; 0xcb6 <main+0x4e>
     cbe:	00 c0       	rjmp	.+0      	; 0xcc0 <main+0x58>
     cc0:	00 00       	nop
	//////////////////////////////////////////////////// Basic Interface /////////////////////////////////////////////
	
	//$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$//
	
	_delay_ms(2000);
	UART_TxChar('C');
     cc2:	83 e4       	ldi	r24, 0x43	; 67
     cc4:	0e 94 99 0a 	call	0x1532	; 0x1532 <UART_TxChar>
	
	lcd_clear();
     cc8:	0e 94 5f 02 	call	0x4be	; 0x4be <lcd_clear>
	lcd_puts_at("Measuring Pulse",0,1);
     ccc:	41 e0       	ldi	r20, 0x01	; 1
     cce:	60 e0       	ldi	r22, 0x00	; 0
     cd0:	8e e6       	ldi	r24, 0x6E	; 110
     cd2:	90 e0       	ldi	r25, 0x00	; 0
     cd4:	0e 94 80 02 	call	0x500	; 0x500 <lcd_puts_at>
	lcd_puts_at("Measuring Weight",0,0);
     cd8:	40 e0       	ldi	r20, 0x00	; 0
     cda:	60 e0       	ldi	r22, 0x00	; 0
     cdc:	8e e7       	ldi	r24, 0x7E	; 126
     cde:	90 e0       	ldi	r25, 0x00	; 0
     ce0:	0e 94 80 02 	call	0x500	; 0x500 <lcd_puts_at>
     ce4:	8f ef       	ldi	r24, 0xFF	; 255
     ce6:	9d e3       	ldi	r25, 0x3D	; 61
     ce8:	29 e4       	ldi	r18, 0x49	; 73
     cea:	81 50       	subi	r24, 0x01	; 1
     cec:	90 40       	sbci	r25, 0x00	; 0
     cee:	20 40       	sbci	r18, 0x00	; 0
     cf0:	e1 f7       	brne	.-8      	; 0xcea <main+0x82>
     cf2:	00 c0       	rjmp	.+0      	; 0xcf4 <main+0x8c>
     cf4:	00 00       	nop

	_delay_ms(3000);
	
	lcd_clear();
     cf6:	0e 94 5f 02 	call	0x4be	; 0x4be <lcd_clear>
     cfa:	10 e0       	ldi	r17, 0x00	; 0
	int i,j;
	for(i=0,j=15;i<16,j>-1;i++,j--)
	{
		lcd_puts_at(">",i,0);
		lcd_puts_at("<",j,1);
     cfc:	0f e0       	ldi	r16, 0x0F	; 15
	
	lcd_clear();
	int i,j;
	for(i=0,j=15;i<16,j>-1;i++,j--)
	{
		lcd_puts_at(">",i,0);
     cfe:	40 e0       	ldi	r20, 0x00	; 0
     d00:	61 2f       	mov	r22, r17
     d02:	8f e8       	ldi	r24, 0x8F	; 143
     d04:	90 e0       	ldi	r25, 0x00	; 0
     d06:	0e 94 80 02 	call	0x500	; 0x500 <lcd_puts_at>
		lcd_puts_at("<",j,1);
     d0a:	60 2f       	mov	r22, r16
     d0c:	61 1b       	sub	r22, r17
     d0e:	41 e0       	ldi	r20, 0x01	; 1
     d10:	81 e9       	ldi	r24, 0x91	; 145
     d12:	90 e0       	ldi	r25, 0x00	; 0
     d14:	0e 94 80 02 	call	0x500	; 0x500 <lcd_puts_at>
     d18:	3f ef       	ldi	r19, 0xFF	; 255
     d1a:	40 e7       	ldi	r20, 0x70	; 112
     d1c:	82 e0       	ldi	r24, 0x02	; 2
     d1e:	31 50       	subi	r19, 0x01	; 1
     d20:	40 40       	sbci	r20, 0x00	; 0
     d22:	80 40       	sbci	r24, 0x00	; 0
     d24:	e1 f7       	brne	.-8      	; 0xd1e <main+0xb6>
     d26:	00 c0       	rjmp	.+0      	; 0xd28 <main+0xc0>
     d28:	00 00       	nop
     d2a:	1f 5f       	subi	r17, 0xFF	; 255

	_delay_ms(3000);
	
	lcd_clear();
	int i,j;
	for(i=0,j=15;i<16,j>-1;i++,j--)
     d2c:	10 31       	cpi	r17, 0x10	; 16
     d2e:	39 f7       	brne	.-50     	; 0xcfe <main+0x96>
     d30:	9f ef       	ldi	r25, 0xFF	; 255
     d32:	29 e6       	ldi	r18, 0x69	; 105
     d34:	38 e1       	ldi	r19, 0x18	; 24
     d36:	91 50       	subi	r25, 0x01	; 1
     d38:	20 40       	sbci	r18, 0x00	; 0
     d3a:	30 40       	sbci	r19, 0x00	; 0
     d3c:	e1 f7       	brne	.-8      	; 0xd36 <main+0xce>
     d3e:	00 c0       	rjmp	.+0      	; 0xd40 <main+0xd8>
     d40:	00 00       	nop
		lcd_puts_at("<",j,1);
		_delay_ms(100);
	}
	_delay_ms(1000);
	
	lcd_clear();
     d42:	0e 94 5f 02 	call	0x4be	; 0x4be <lcd_clear>
	
	//////////////////////////////////////////////////// Treatment Check /////////////////////////////////////////////
	
	//$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$//

	while(A=='B')
     d46:	80 91 65 00 	lds	r24, 0x0065	; 0x800065 <A>
     d4a:	82 34       	cpi	r24, 0x42	; 66
     d4c:	09 f0       	breq	.+2      	; 0xd50 <main+0xe8>
     d4e:	b6 c0       	rjmp	.+364    	; 0xebc <main+0x254>
	{
		
		dtostrf(hx711_getweight(), 3, 2, a);
		lcd_puts_at("Weight: ",0,1); lcd_puts_at(a,6,1); lcd_puts_at("kg",13,1);
		
		sprintf(buffer,"%d",show_heart_rate());
     d50:	0f 2e       	mov	r0, r31
     d52:	ff e9       	ldi	r31, 0x9F	; 159
     d54:	af 2e       	mov	r10, r31
     d56:	f0 e0       	ldi	r31, 0x00	; 0
     d58:	bf 2e       	mov	r11, r31
     d5a:	f0 2d       	mov	r31, r0
     d5c:	0f 2e       	mov	r0, r31
     d5e:	ff e7       	ldi	r31, 0x7F	; 127
     d60:	ef 2e       	mov	r14, r31
     d62:	f1 e0       	ldi	r31, 0x01	; 1
     d64:	ff 2e       	mov	r15, r31
     d66:	f0 2d       	mov	r31, r0
			lcd_puts_at("Press Button For",0,0);
			lcd_puts_at("Treatment",4,1);
			if(isPressed(BTN_TREAT))
			{	
				PORTD |= (1<<PIND6);
				A = 'C';
     d68:	0f 2e       	mov	r0, r31
     d6a:	f3 e4       	ldi	r31, 0x43	; 67
     d6c:	9f 2e       	mov	r9, r31
     d6e:	f0 2d       	mov	r31, r0
	//$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$//

	while(A=='B')
	{
		
		dtostrf(hx711_getweight(), 3, 2, a);
     d70:	0e 94 2d 01 	call	0x25a	; 0x25a <hx711_getweight>
     d74:	0f e8       	ldi	r16, 0x8F	; 143
     d76:	11 e0       	ldi	r17, 0x01	; 1
     d78:	22 e0       	ldi	r18, 0x02	; 2
     d7a:	43 e0       	ldi	r20, 0x03	; 3
     d7c:	0e 94 3b 0d 	call	0x1a76	; 0x1a76 <dtostrf>
		lcd_puts_at("Weight: ",0,1); lcd_puts_at(a,6,1); lcd_puts_at("kg",13,1);
     d80:	41 e0       	ldi	r20, 0x01	; 1
     d82:	60 e0       	ldi	r22, 0x00	; 0
     d84:	83 e9       	ldi	r24, 0x93	; 147
     d86:	90 e0       	ldi	r25, 0x00	; 0
     d88:	0e 94 80 02 	call	0x500	; 0x500 <lcd_puts_at>
     d8c:	41 e0       	ldi	r20, 0x01	; 1
     d8e:	66 e0       	ldi	r22, 0x06	; 6
     d90:	c8 01       	movw	r24, r16
     d92:	0e 94 80 02 	call	0x500	; 0x500 <lcd_puts_at>
     d96:	41 e0       	ldi	r20, 0x01	; 1
     d98:	6d e0       	ldi	r22, 0x0D	; 13
     d9a:	8c e9       	ldi	r24, 0x9C	; 156
     d9c:	90 e0       	ldi	r25, 0x00	; 0
     d9e:	0e 94 80 02 	call	0x500	; 0x500 <lcd_puts_at>
		
		sprintf(buffer,"%d",show_heart_rate());
     da2:	0e 94 49 04 	call	0x892	; 0x892 <show_heart_rate>
     da6:	9f 93       	push	r25
     da8:	8f 93       	push	r24
     daa:	bf 92       	push	r11
     dac:	af 92       	push	r10
     dae:	ff 92       	push	r15
     db0:	ef 92       	push	r14
     db2:	0e 94 dc 0d 	call	0x1bb8	; 0x1bb8 <sprintf>
		lcd_puts_at("Hrate:",0,0);
     db6:	40 e0       	ldi	r20, 0x00	; 0
     db8:	60 e0       	ldi	r22, 0x00	; 0
     dba:	82 ea       	ldi	r24, 0xA2	; 162
     dbc:	90 e0       	ldi	r25, 0x00	; 0
     dbe:	0e 94 80 02 	call	0x500	; 0x500 <lcd_puts_at>
		lcd_puts_at(buffer,7,0);
     dc2:	40 e0       	ldi	r20, 0x00	; 0
     dc4:	67 e0       	ldi	r22, 0x07	; 7
     dc6:	c7 01       	movw	r24, r14
     dc8:	0e 94 80 02 	call	0x500	; 0x500 <lcd_puts_at>
		lcd_puts_at("BPM",12,0);
     dcc:	40 e0       	ldi	r20, 0x00	; 0
     dce:	6c e0       	ldi	r22, 0x0C	; 12
     dd0:	86 e2       	ldi	r24, 0x26	; 38
     dd2:	91 e0       	ldi	r25, 0x01	; 1
     dd4:	0e 94 80 02 	call	0x500	; 0x500 <lcd_puts_at>
     dd8:	4f ef       	ldi	r20, 0xFF	; 255
     dda:	8d e3       	ldi	r24, 0x3D	; 61
     ddc:	99 e4       	ldi	r25, 0x49	; 73
     dde:	41 50       	subi	r20, 0x01	; 1
     de0:	80 40       	sbci	r24, 0x00	; 0
     de2:	90 40       	sbci	r25, 0x00	; 0
     de4:	e1 f7       	brne	.-8      	; 0xdde <main+0x176>
     de6:	00 c0       	rjmp	.+0      	; 0xde8 <main+0x180>
     de8:	00 00       	nop

		
		_delay_ms(3000);
		lcd_clear();
     dea:	0e 94 5f 02 	call	0x4be	; 0x4be <lcd_clear>
		lcd_puts_at("Ready For",4,0);
     dee:	40 e0       	ldi	r20, 0x00	; 0
     df0:	64 e0       	ldi	r22, 0x04	; 4
     df2:	89 ea       	ldi	r24, 0xA9	; 169
     df4:	90 e0       	ldi	r25, 0x00	; 0
     df6:	0e 94 80 02 	call	0x500	; 0x500 <lcd_puts_at>
		lcd_puts_at("Medication",3,1);
     dfa:	41 e0       	ldi	r20, 0x01	; 1
     dfc:	63 e0       	ldi	r22, 0x03	; 3
     dfe:	83 eb       	ldi	r24, 0xB3	; 179
     e00:	90 e0       	ldi	r25, 0x00	; 0
     e02:	0e 94 80 02 	call	0x500	; 0x500 <lcd_puts_at>
     e06:	2f ef       	ldi	r18, 0xFF	; 255
     e08:	33 ed       	ldi	r19, 0xD3	; 211
     e0a:	40 e3       	ldi	r20, 0x30	; 48
     e0c:	21 50       	subi	r18, 0x01	; 1
     e0e:	30 40       	sbci	r19, 0x00	; 0
     e10:	40 40       	sbci	r20, 0x00	; 0
     e12:	e1 f7       	brne	.-8      	; 0xe0c <main+0x1a4>
     e14:	00 c0       	rjmp	.+0      	; 0xe16 <main+0x1ae>
     e16:	00 00       	nop
		_delay_ms(2000);
		lcd_clear();
     e18:	0e 94 5f 02 	call	0x4be	; 0x4be <lcd_clear>
     e1c:	8f ef       	ldi	r24, 0xFF	; 255
     e1e:	93 ed       	ldi	r25, 0xD3	; 211
     e20:	20 e3       	ldi	r18, 0x30	; 48
     e22:	81 50       	subi	r24, 0x01	; 1
     e24:	90 40       	sbci	r25, 0x00	; 0
     e26:	20 40       	sbci	r18, 0x00	; 0
     e28:	e1 f7       	brne	.-8      	; 0xe22 <main+0x1ba>
     e2a:	00 c0       	rjmp	.+0      	; 0xe2c <main+0x1c4>
     e2c:	00 00       	nop

		_delay_ms(2000);
		lcd_clear();
     e2e:	0e 94 5f 02 	call	0x4be	; 0x4be <lcd_clear>
     e32:	0f 90       	pop	r0
     e34:	0f 90       	pop	r0
     e36:	0f 90       	pop	r0
     e38:	0f 90       	pop	r0
     e3a:	0f 90       	pop	r0
     e3c:	0f 90       	pop	r0
		while(1)
		{
			lcd_puts_at("Press Button For",0,0);
     e3e:	40 e0       	ldi	r20, 0x00	; 0
     e40:	60 e0       	ldi	r22, 0x00	; 0
     e42:	8e eb       	ldi	r24, 0xBE	; 190
     e44:	90 e0       	ldi	r25, 0x00	; 0
     e46:	0e 94 80 02 	call	0x500	; 0x500 <lcd_puts_at>
			lcd_puts_at("Treatment",4,1);
     e4a:	41 e0       	ldi	r20, 0x01	; 1
     e4c:	64 e0       	ldi	r22, 0x04	; 4
     e4e:	8f ec       	ldi	r24, 0xCF	; 207
     e50:	90 e0       	ldi	r25, 0x00	; 0
     e52:	0e 94 80 02 	call	0x500	; 0x500 <lcd_puts_at>
			if(isPressed(BTN_TREAT))
     e56:	82 e8       	ldi	r24, 0x82	; 130
     e58:	0e 94 d1 02 	call	0x5a2	; 0x5a2 <isPressed>
     e5c:	88 23       	and	r24, r24
     e5e:	59 f0       	breq	.+22     	; 0xe76 <main+0x20e>
			{	
				PORTD |= (1<<PIND6);
     e60:	96 9a       	sbi	0x12, 6	; 18
				A = 'C';
     e62:	90 92 65 00 	sts	0x0065, r9	; 0x800065 <A>
					_delay_ms(500);
				}
				resetChip();
			}
		}
		lcd_clear();
     e66:	0e 94 5f 02 	call	0x4be	; 0x4be <lcd_clear>
	
	//////////////////////////////////////////////////// Treatment Check /////////////////////////////////////////////
	
	//$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$//

	while(A=='B')
     e6a:	80 91 65 00 	lds	r24, 0x0065	; 0x800065 <A>
     e6e:	82 34       	cpi	r24, 0x42	; 66
     e70:	09 f4       	brne	.+2      	; 0xe74 <main+0x20c>
     e72:	7e cf       	rjmp	.-260    	; 0xd70 <main+0x108>
     e74:	23 c0       	rjmp	.+70     	; 0xebc <main+0x254>
			{	
				PORTD |= (1<<PIND6);
				A = 'C';
				break;
			}
			else if(isPressed(BTN_SET_RESET))
     e76:	81 e8       	ldi	r24, 0x81	; 129
     e78:	0e 94 d1 02 	call	0x5a2	; 0x5a2 <isPressed>
     e7c:	88 23       	and	r24, r24
     e7e:	f9 f2       	breq	.-66     	; 0xe3e <main+0x1d6>
			{
				lcd_init(LCD_BACKLIGHT_OFF);
     e80:	80 e0       	ldi	r24, 0x00	; 0
     e82:	0e 94 03 02 	call	0x406	; 0x406 <lcd_init>
				PORTD &= ~(1<<PIND5);
     e86:	95 98       	cbi	0x12, 5	; 18
     e88:	8a e0       	ldi	r24, 0x0A	; 10
     e8a:	90 e0       	ldi	r25, 0x00	; 0
				for(int i=0;i<10;i++)		
				{
					PORTD |= (1<<PIND7);
     e8c:	97 9a       	sbi	0x12, 7	; 18
     e8e:	3f ef       	ldi	r19, 0xFF	; 255
     e90:	44 e3       	ldi	r20, 0x34	; 52
     e92:	2c e0       	ldi	r18, 0x0C	; 12
     e94:	31 50       	subi	r19, 0x01	; 1
     e96:	40 40       	sbci	r20, 0x00	; 0
     e98:	20 40       	sbci	r18, 0x00	; 0
     e9a:	e1 f7       	brne	.-8      	; 0xe94 <main+0x22c>
     e9c:	00 c0       	rjmp	.+0      	; 0xe9e <main+0x236>
     e9e:	00 00       	nop
					_delay_ms(500);	
					PORTD &= ~(1<<PIND7);
     ea0:	97 98       	cbi	0x12, 7	; 18
     ea2:	3f ef       	ldi	r19, 0xFF	; 255
     ea4:	44 e3       	ldi	r20, 0x34	; 52
     ea6:	2c e0       	ldi	r18, 0x0C	; 12
     ea8:	31 50       	subi	r19, 0x01	; 1
     eaa:	40 40       	sbci	r20, 0x00	; 0
     eac:	20 40       	sbci	r18, 0x00	; 0
     eae:	e1 f7       	brne	.-8      	; 0xea8 <main+0x240>
     eb0:	00 c0       	rjmp	.+0      	; 0xeb2 <main+0x24a>
     eb2:	00 00       	nop
     eb4:	01 97       	sbiw	r24, 0x01	; 1
			}
			else if(isPressed(BTN_SET_RESET))
			{
				lcd_init(LCD_BACKLIGHT_OFF);
				PORTD &= ~(1<<PIND5);
				for(int i=0;i<10;i++)		
     eb6:	51 f7       	brne	.-44     	; 0xe8c <main+0x224>
					PORTD |= (1<<PIND7);
					_delay_ms(500);	
					PORTD &= ~(1<<PIND7);
					_delay_ms(500);
				}
				resetChip();
     eb8:	0e 94 1c 05 	call	0xa38	; 0xa38 <resetChip>
			}
		}
		lcd_clear();
	}
	
	PORTD &= ~(1<<PIND7);
     ebc:	97 98       	cbi	0x12, 7	; 18
	
	///////////////////////////////////////////////////////////////////////////////////////////////////////////////
	
	valve(1);   // Valve Will open firstly in there
     ebe:	81 e0       	ldi	r24, 0x01	; 1
     ec0:	90 e0       	ldi	r25, 0x00	; 0
     ec2:	0e 94 08 06 	call	0xc10	; 0xc10 <valve>
		while(1)
		{
			lcd_puts_at("Manual Input",1,0);
			lcd_puts_at("Analog Input",1,1);
			lcd_puts_at(">",0,0);
			choice = 'y';
     ec6:	0f 2e       	mov	r0, r31
     ec8:	f9 e7       	ldi	r31, 0x79	; 121
     eca:	7f 2e       	mov	r7, r31
     ecc:	f0 2d       	mov	r31, r0
				{
					lcd_clear();
					lcd_puts_at("Manual Input",1,0);
					lcd_puts_at("Analog Input",1,1);
					lcd_puts_at(">",0,1);
					choice = 'n';
     ece:	0f 2e       	mov	r0, r31
     ed0:	fe e6       	ldi	r31, 0x6E	; 110
     ed2:	6f 2e       	mov	r6, r31
     ed4:	f0 2d       	mov	r31, r0
			{
				lcd_puts_at("1=>Abnormal Rate",0,0);
				lcd_puts_at("2=>Normal Rate",0,1);
				if(isPressed(BTN_1))
				{
					int num = rand()%200;
     ed6:	0f 2e       	mov	r0, r31
     ed8:	f8 ec       	ldi	r31, 0xC8	; 200
     eda:	8f 2e       	mov	r8, r31
     edc:	91 2c       	mov	r9, r1
     ede:	f0 2d       	mov	r31, r0
						HEART_RATE = num;
					break;
				}
				else if(isPressed(BTN_2))
				{
					HEART_RATE = rand()%60+60;
     ee0:	0f 2e       	mov	r0, r31
     ee2:	fc e3       	ldi	r31, 0x3C	; 60
     ee4:	af 2e       	mov	r10, r31
     ee6:	b1 2c       	mov	r11, r1
     ee8:	f0 2d       	mov	r31, r0
	
	//$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$//
	
	
		char Hrate[3];
		sprintf(Hrate,"%d",HEART_RATE);
     eea:	0f e9       	ldi	r16, 0x9F	; 159
     eec:	10 e0       	ldi	r17, 0x00	; 0
     eee:	ce 01       	movw	r24, r28
     ef0:	01 96       	adiw	r24, 0x01	; 1
     ef2:	7c 01       	movw	r14, r24
	int HEART_RATE;
	while(1)
	{
		while(1)
		{
			lcd_puts_at("Manual Input",1,0);
     ef4:	40 e0       	ldi	r20, 0x00	; 0
     ef6:	61 e0       	ldi	r22, 0x01	; 1
     ef8:	89 ed       	ldi	r24, 0xD9	; 217
     efa:	90 e0       	ldi	r25, 0x00	; 0
     efc:	0e 94 80 02 	call	0x500	; 0x500 <lcd_puts_at>
			lcd_puts_at("Analog Input",1,1);
     f00:	41 e0       	ldi	r20, 0x01	; 1
     f02:	61 e0       	ldi	r22, 0x01	; 1
     f04:	86 ee       	ldi	r24, 0xE6	; 230
     f06:	90 e0       	ldi	r25, 0x00	; 0
     f08:	0e 94 80 02 	call	0x500	; 0x500 <lcd_puts_at>
			lcd_puts_at(">",0,0);
     f0c:	40 e0       	ldi	r20, 0x00	; 0
     f0e:	60 e0       	ldi	r22, 0x00	; 0
     f10:	8f e8       	ldi	r24, 0x8F	; 143
     f12:	90 e0       	ldi	r25, 0x00	; 0
     f14:	0e 94 80 02 	call	0x500	; 0x500 <lcd_puts_at>
			choice = 'y';
     f18:	70 92 64 00 	sts	0x0064, r7	; 0x800064 <choice>
			while(!isPressed(BTN_OK))
     f1c:	37 c0       	rjmp	.+110    	; 0xf8c <main+0x324>
			{
				if(isPressed(BTN_UP))
     f1e:	84 e8       	ldi	r24, 0x84	; 132
     f20:	0e 94 d1 02 	call	0x5a2	; 0x5a2 <isPressed>
     f24:	88 23       	and	r24, r24
     f26:	b9 f0       	breq	.+46     	; 0xf56 <main+0x2ee>
				{
					lcd_clear();
     f28:	0e 94 5f 02 	call	0x4be	; 0x4be <lcd_clear>
					lcd_puts_at("Manual Input",1,0);
     f2c:	40 e0       	ldi	r20, 0x00	; 0
     f2e:	61 e0       	ldi	r22, 0x01	; 1
     f30:	89 ed       	ldi	r24, 0xD9	; 217
     f32:	90 e0       	ldi	r25, 0x00	; 0
     f34:	0e 94 80 02 	call	0x500	; 0x500 <lcd_puts_at>
					lcd_puts_at("Analog Input",1,1);
     f38:	41 e0       	ldi	r20, 0x01	; 1
     f3a:	61 e0       	ldi	r22, 0x01	; 1
     f3c:	86 ee       	ldi	r24, 0xE6	; 230
     f3e:	90 e0       	ldi	r25, 0x00	; 0
     f40:	0e 94 80 02 	call	0x500	; 0x500 <lcd_puts_at>
					lcd_puts_at(">",0,0);
     f44:	40 e0       	ldi	r20, 0x00	; 0
     f46:	60 e0       	ldi	r22, 0x00	; 0
     f48:	8f e8       	ldi	r24, 0x8F	; 143
     f4a:	90 e0       	ldi	r25, 0x00	; 0
     f4c:	0e 94 80 02 	call	0x500	; 0x500 <lcd_puts_at>
					choice = 'y';
     f50:	70 92 64 00 	sts	0x0064, r7	; 0x800064 <choice>
     f54:	1b c0       	rjmp	.+54     	; 0xf8c <main+0x324>
				}
				else if(isPressed(BTN_DOWN))
     f56:	88 e8       	ldi	r24, 0x88	; 136
     f58:	0e 94 d1 02 	call	0x5a2	; 0x5a2 <isPressed>
     f5c:	88 23       	and	r24, r24
     f5e:	b1 f0       	breq	.+44     	; 0xf8c <main+0x324>
				{
					lcd_clear();
     f60:	0e 94 5f 02 	call	0x4be	; 0x4be <lcd_clear>
					lcd_puts_at("Manual Input",1,0);
     f64:	40 e0       	ldi	r20, 0x00	; 0
     f66:	61 e0       	ldi	r22, 0x01	; 1
     f68:	89 ed       	ldi	r24, 0xD9	; 217
     f6a:	90 e0       	ldi	r25, 0x00	; 0
     f6c:	0e 94 80 02 	call	0x500	; 0x500 <lcd_puts_at>
					lcd_puts_at("Analog Input",1,1);
     f70:	41 e0       	ldi	r20, 0x01	; 1
     f72:	61 e0       	ldi	r22, 0x01	; 1
     f74:	86 ee       	ldi	r24, 0xE6	; 230
     f76:	90 e0       	ldi	r25, 0x00	; 0
     f78:	0e 94 80 02 	call	0x500	; 0x500 <lcd_puts_at>
					lcd_puts_at(">",0,1);
     f7c:	41 e0       	ldi	r20, 0x01	; 1
     f7e:	60 e0       	ldi	r22, 0x00	; 0
     f80:	8f e8       	ldi	r24, 0x8F	; 143
     f82:	90 e0       	ldi	r25, 0x00	; 0
     f84:	0e 94 80 02 	call	0x500	; 0x500 <lcd_puts_at>
					choice = 'n';
     f88:	60 92 64 00 	sts	0x0064, r6	; 0x800064 <choice>
		{
			lcd_puts_at("Manual Input",1,0);
			lcd_puts_at("Analog Input",1,1);
			lcd_puts_at(">",0,0);
			choice = 'y';
			while(!isPressed(BTN_OK))
     f8c:	88 e1       	ldi	r24, 0x18	; 24
     f8e:	0e 94 d1 02 	call	0x5a2	; 0x5a2 <isPressed>
     f92:	88 23       	and	r24, r24
     f94:	21 f2       	breq	.-120    	; 0xf1e <main+0x2b6>
				}
			}
			break;
		}
		
		lcd_clear();
     f96:	0e 94 5f 02 	call	0x4be	; 0x4be <lcd_clear>
		
		if(choice == 'y')
     f9a:	80 91 64 00 	lds	r24, 0x0064	; 0x800064 <choice>
     f9e:	89 37       	cpi	r24, 0x79	; 121
     fa0:	59 f5       	brne	.+86     	; 0xff8 <main+0x390>
		{
			while(1)
			{
				lcd_puts_at("1=>Abnormal Rate",0,0);
     fa2:	40 e0       	ldi	r20, 0x00	; 0
     fa4:	60 e0       	ldi	r22, 0x00	; 0
     fa6:	83 ef       	ldi	r24, 0xF3	; 243
     fa8:	90 e0       	ldi	r25, 0x00	; 0
     faa:	0e 94 80 02 	call	0x500	; 0x500 <lcd_puts_at>
				lcd_puts_at("2=>Normal Rate",0,1);
     fae:	41 e0       	ldi	r20, 0x01	; 1
     fb0:	60 e0       	ldi	r22, 0x00	; 0
     fb2:	84 e0       	ldi	r24, 0x04	; 4
     fb4:	91 e0       	ldi	r25, 0x01	; 1
     fb6:	0e 94 80 02 	call	0x500	; 0x500 <lcd_puts_at>
				if(isPressed(BTN_1))
     fba:	81 e1       	ldi	r24, 0x11	; 17
     fbc:	0e 94 d1 02 	call	0x5a2	; 0x5a2 <isPressed>
     fc0:	88 23       	and	r24, r24
     fc2:	61 f0       	breq	.+24     	; 0xfdc <main+0x374>
				{
					int num = rand()%200;
     fc4:	0e 94 a7 0d 	call	0x1b4e	; 0x1b4e <rand>
     fc8:	b4 01       	movw	r22, r8
     fca:	0e 94 f1 0c 	call	0x19e2	; 0x19e2 <__divmodhi4>
     fce:	58 2e       	mov	r5, r24
     fd0:	49 2e       	mov	r4, r25
					if(num<60 || num>120)
     fd2:	cc 97       	sbiw	r24, 0x3c	; 60
     fd4:	cd 97       	sbiw	r24, 0x3d	; 61
     fd6:	08 f0       	brcs	.+2      	; 0xfda <main+0x372>
     fd8:	78 c2       	rjmp	.+1264   	; 0x14ca <main+0x862>
     fda:	0e c0       	rjmp	.+28     	; 0xff8 <main+0x390>
						HEART_RATE = num;
					break;
				}
				else if(isPressed(BTN_2))
     fdc:	81 e2       	ldi	r24, 0x21	; 33
     fde:	0e 94 d1 02 	call	0x5a2	; 0x5a2 <isPressed>
     fe2:	88 23       	and	r24, r24
     fe4:	f1 f2       	breq	.-68     	; 0xfa2 <main+0x33a>
				{
					HEART_RATE = rand()%60+60;
     fe6:	0e 94 a7 0d 	call	0x1b4e	; 0x1b4e <rand>
     fea:	b5 01       	movw	r22, r10
     fec:	0e 94 f1 0c 	call	0x19e2	; 0x19e2 <__divmodhi4>
     ff0:	6c 01       	movw	r12, r24
     ff2:	2c e3       	ldi	r18, 0x3C	; 60
     ff4:	c2 0e       	add	r12, r18
     ff6:	d1 1c       	adc	r13, r1
					break;
				}
			}		
		}
		
	if(choice == 'n')
     ff8:	80 91 64 00 	lds	r24, 0x0064	; 0x800064 <choice>
     ffc:	8e 36       	cpi	r24, 0x6E	; 110
     ffe:	09 f4       	brne	.+2      	; 0x1002 <main+0x39a>
    1000:	1e c1       	rjmp	.+572    	; 0x123e <main+0x5d6>
		break;
			
	lcd_clear();
    1002:	0e 94 5f 02 	call	0x4be	; 0x4be <lcd_clear>
	
	//$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$//
	
	
		char Hrate[3];
		sprintf(Hrate,"%d",HEART_RATE);
    1006:	df 92       	push	r13
    1008:	cf 92       	push	r12
    100a:	1f 93       	push	r17
    100c:	0f 93       	push	r16
    100e:	ff 92       	push	r15
    1010:	ef 92       	push	r14
    1012:	0e 94 dc 0d 	call	0x1bb8	; 0x1bb8 <sprintf>
		if((60 > HEART_RATE) || (HEART_RATE > 120))
    1016:	0f 90       	pop	r0
    1018:	0f 90       	pop	r0
    101a:	0f 90       	pop	r0
    101c:	0f 90       	pop	r0
    101e:	0f 90       	pop	r0
    1020:	0f 90       	pop	r0
    1022:	c6 01       	movw	r24, r12
    1024:	cc 97       	sbiw	r24, 0x3c	; 60
    1026:	cd 97       	sbiw	r24, 0x3d	; 61
    1028:	08 f4       	brcc	.+2      	; 0x102c <main+0x3c4>
    102a:	50 c0       	rjmp	.+160    	; 0x10cc <main+0x464>
		{	
			valve(2);
    102c:	82 e0       	ldi	r24, 0x02	; 2
    102e:	90 e0       	ldi	r25, 0x00	; 0
    1030:	0e 94 08 06 	call	0xc10	; 0xc10 <valve>
			if(60 > HEART_RATE)
    1034:	3c e3       	ldi	r19, 0x3C	; 60
    1036:	c3 16       	cp	r12, r19
    1038:	d1 04       	cpc	r13, r1
    103a:	84 f4       	brge	.+32     	; 0x105c <main+0x3f4>
			{
				lcd_puts_at("->  LowBPM",6,0);
    103c:	40 e0       	ldi	r20, 0x00	; 0
    103e:	66 e0       	ldi	r22, 0x06	; 6
    1040:	83 e1       	ldi	r24, 0x13	; 19
    1042:	91 e0       	ldi	r25, 0x01	; 1
    1044:	0e 94 80 02 	call	0x500	; 0x500 <lcd_puts_at>
				lcd_puts_at(Hrate,0,0);
    1048:	40 e0       	ldi	r20, 0x00	; 0
    104a:	60 e0       	ldi	r22, 0x00	; 0
    104c:	ce 01       	movw	r24, r28
    104e:	01 96       	adiw	r24, 0x01	; 1
    1050:	0e 94 80 02 	call	0x500	; 0x500 <lcd_puts_at>
				UART_TxChar('L');
    1054:	8c e4       	ldi	r24, 0x4C	; 76
    1056:	0e 94 99 0a 	call	0x1532	; 0x1532 <UART_TxChar>
    105a:	13 c0       	rjmp	.+38     	; 0x1082 <main+0x41a>
			}
			else if(120 < HEART_RATE)
    105c:	49 e7       	ldi	r20, 0x79	; 121
    105e:	c4 16       	cp	r12, r20
    1060:	d1 04       	cpc	r13, r1
    1062:	7c f0       	brlt	.+30     	; 0x1082 <main+0x41a>
			{
				lcd_puts_at("->  HighBPM",6,0);
    1064:	40 e0       	ldi	r20, 0x00	; 0
    1066:	66 e0       	ldi	r22, 0x06	; 6
    1068:	8e e1       	ldi	r24, 0x1E	; 30
    106a:	91 e0       	ldi	r25, 0x01	; 1
    106c:	0e 94 80 02 	call	0x500	; 0x500 <lcd_puts_at>
				lcd_puts_at(Hrate,0,0);
    1070:	40 e0       	ldi	r20, 0x00	; 0
    1072:	60 e0       	ldi	r22, 0x00	; 0
    1074:	ce 01       	movw	r24, r28
    1076:	01 96       	adiw	r24, 0x01	; 1
    1078:	0e 94 80 02 	call	0x500	; 0x500 <lcd_puts_at>
				UART_TxChar('H');
    107c:	88 e4       	ldi	r24, 0x48	; 72
    107e:	0e 94 99 0a 	call	0x1532	; 0x1532 <UART_TxChar>
			}
			while(1)
			{
				lcd_puts_at("Reset System ?",0,1);
    1082:	41 e0       	ldi	r20, 0x01	; 1
    1084:	60 e0       	ldi	r22, 0x00	; 0
    1086:	8a e2       	ldi	r24, 0x2A	; 42
    1088:	91 e0       	ldi	r25, 0x01	; 1
    108a:	0e 94 80 02 	call	0x500	; 0x500 <lcd_puts_at>
				PORTD |= (1<<PIND6);
    108e:	96 9a       	sbi	0x12, 6	; 18
    1090:	8f ef       	ldi	r24, 0xFF	; 255
    1092:	94 e3       	ldi	r25, 0x34	; 52
    1094:	2c e0       	ldi	r18, 0x0C	; 12
    1096:	81 50       	subi	r24, 0x01	; 1
    1098:	90 40       	sbci	r25, 0x00	; 0
    109a:	20 40       	sbci	r18, 0x00	; 0
    109c:	e1 f7       	brne	.-8      	; 0x1096 <main+0x42e>
    109e:	00 c0       	rjmp	.+0      	; 0x10a0 <main+0x438>
    10a0:	00 00       	nop
				_delay_ms(500);
				PORTD &= ~(1<<PIND6);
    10a2:	96 98       	cbi	0x12, 6	; 18
    10a4:	3f ef       	ldi	r19, 0xFF	; 255
    10a6:	44 e3       	ldi	r20, 0x34	; 52
    10a8:	8c e0       	ldi	r24, 0x0C	; 12
    10aa:	31 50       	subi	r19, 0x01	; 1
    10ac:	40 40       	sbci	r20, 0x00	; 0
    10ae:	80 40       	sbci	r24, 0x00	; 0
    10b0:	e1 f7       	brne	.-8      	; 0x10aa <main+0x442>
    10b2:	00 c0       	rjmp	.+0      	; 0x10b4 <main+0x44c>
    10b4:	00 00       	nop
				_delay_ms(500);
				while(isPressed(BTN_SET_RESET))
    10b6:	81 e8       	ldi	r24, 0x81	; 129
    10b8:	0e 94 d1 02 	call	0x5a2	; 0x5a2 <isPressed>
    10bc:	88 23       	and	r24, r24
    10be:	09 f3       	breq	.-62     	; 0x1082 <main+0x41a>
				{
					PORTD &= ~(1<<PIND6);
    10c0:	96 98       	cbi	0x12, 6	; 18
					UART_TxChar('P');
    10c2:	80 e5       	ldi	r24, 0x50	; 80
    10c4:	0e 94 99 0a 	call	0x1532	; 0x1532 <UART_TxChar>
					resetChip();
    10c8:	0e 94 1c 05 	call	0xa38	; 0xa38 <resetChip>
				}
			}
		}
			
		
		if(weightVarience(hx711_getweight())==1)
    10cc:	0e 94 2d 01 	call	0x25a	; 0x25a <hx711_getweight>
    10d0:	0e 94 c6 05 	call	0xb8c	; 0xb8c <weightVarience>
    10d4:	01 97       	sbiw	r24, 0x01	; 1
    10d6:	89 f5       	brne	.+98     	; 0x113a <main+0x4d2>
		{
			valve(2);
    10d8:	82 e0       	ldi	r24, 0x02	; 2
    10da:	90 e0       	ldi	r25, 0x00	; 0
    10dc:	0e 94 08 06 	call	0xc10	; 0xc10 <valve>
			lcd_puts_at("Speed Varied",0,0);
    10e0:	40 e0       	ldi	r20, 0x00	; 0
    10e2:	60 e0       	ldi	r22, 0x00	; 0
    10e4:	89 e3       	ldi	r24, 0x39	; 57
    10e6:	91 e0       	ldi	r25, 0x01	; 1
    10e8:	0e 94 80 02 	call	0x500	; 0x500 <lcd_puts_at>
			UART_TxChar('S');
    10ec:	83 e5       	ldi	r24, 0x53	; 83
    10ee:	0e 94 99 0a 	call	0x1532	; 0x1532 <UART_TxChar>
			while(1)
			{
				lcd_puts_at("Reset System ?",0,1);
    10f2:	41 e0       	ldi	r20, 0x01	; 1
    10f4:	60 e0       	ldi	r22, 0x00	; 0
    10f6:	8a e2       	ldi	r24, 0x2A	; 42
    10f8:	91 e0       	ldi	r25, 0x01	; 1
    10fa:	0e 94 80 02 	call	0x500	; 0x500 <lcd_puts_at>
				PORTD |= (1<<PIND6);
    10fe:	96 9a       	sbi	0x12, 6	; 18
    1100:	9f ef       	ldi	r25, 0xFF	; 255
    1102:	24 e3       	ldi	r18, 0x34	; 52
    1104:	3c e0       	ldi	r19, 0x0C	; 12
    1106:	91 50       	subi	r25, 0x01	; 1
    1108:	20 40       	sbci	r18, 0x00	; 0
    110a:	30 40       	sbci	r19, 0x00	; 0
    110c:	e1 f7       	brne	.-8      	; 0x1106 <main+0x49e>
    110e:	00 c0       	rjmp	.+0      	; 0x1110 <main+0x4a8>
    1110:	00 00       	nop
				_delay_ms(500);
				PORTD &= ~(1<<PIND6);
    1112:	96 98       	cbi	0x12, 6	; 18
    1114:	4f ef       	ldi	r20, 0xFF	; 255
    1116:	84 e3       	ldi	r24, 0x34	; 52
    1118:	9c e0       	ldi	r25, 0x0C	; 12
    111a:	41 50       	subi	r20, 0x01	; 1
    111c:	80 40       	sbci	r24, 0x00	; 0
    111e:	90 40       	sbci	r25, 0x00	; 0
    1120:	e1 f7       	brne	.-8      	; 0x111a <main+0x4b2>
    1122:	00 c0       	rjmp	.+0      	; 0x1124 <main+0x4bc>
    1124:	00 00       	nop
				_delay_ms(500);
				while(isPressed(BTN_SET_RESET))
    1126:	81 e8       	ldi	r24, 0x81	; 129
    1128:	0e 94 d1 02 	call	0x5a2	; 0x5a2 <isPressed>
    112c:	88 23       	and	r24, r24
    112e:	09 f3       	breq	.-62     	; 0x10f2 <main+0x48a>
				{
					UART_TxChar('P');
    1130:	80 e5       	ldi	r24, 0x50	; 80
    1132:	0e 94 99 0a 	call	0x1532	; 0x1532 <UART_TxChar>
					resetChip();
    1136:	0e 94 1c 05 	call	0xa38	; 0xa38 <resetChip>
				}
			}
		}
		
		
		if(weightVarience(hx711_getweight())==2)// Here must defined the mass of the constant according to the calibration
    113a:	0e 94 2d 01 	call	0x25a	; 0x25a <hx711_getweight>
    113e:	0e 94 c6 05 	call	0xb8c	; 0xb8c <weightVarience>
    1142:	02 97       	sbiw	r24, 0x02	; 2
    1144:	09 f0       	breq	.+2      	; 0x1148 <main+0x4e0>
    1146:	6f c0       	rjmp	.+222    	; 0x1226 <main+0x5be>
		{
			lcd_clear();
    1148:	0e 94 5f 02 	call	0x4be	; 0x4be <lcd_clear>
			lcd_puts_at("CHEMOTHEREPY",2,0);
    114c:	40 e0       	ldi	r20, 0x00	; 0
    114e:	62 e0       	ldi	r22, 0x02	; 2
    1150:	86 e4       	ldi	r24, 0x46	; 70
    1152:	91 e0       	ldi	r25, 0x01	; 1
    1154:	0e 94 80 02 	call	0x500	; 0x500 <lcd_puts_at>
			lcd_puts_at("FLUID OVER",3,1);
    1158:	41 e0       	ldi	r20, 0x01	; 1
    115a:	63 e0       	ldi	r22, 0x03	; 3
    115c:	83 e5       	ldi	r24, 0x53	; 83
    115e:	91 e0       	ldi	r25, 0x01	; 1
    1160:	0e 94 80 02 	call	0x500	; 0x500 <lcd_puts_at>
    1164:	2f ef       	ldi	r18, 0xFF	; 255
    1166:	31 e1       	ldi	r19, 0x11	; 17
    1168:	4a e7       	ldi	r20, 0x7A	; 122
    116a:	21 50       	subi	r18, 0x01	; 1
    116c:	30 40       	sbci	r19, 0x00	; 0
    116e:	40 40       	sbci	r20, 0x00	; 0
    1170:	e1 f7       	brne	.-8      	; 0x116a <main+0x502>
    1172:	00 c0       	rjmp	.+0      	; 0x1174 <main+0x50c>
    1174:	00 00       	nop
			_delay_ms(5000);
			valve(2);
    1176:	82 e0       	ldi	r24, 0x02	; 2
    1178:	90 e0       	ldi	r25, 0x00	; 0
    117a:	0e 94 08 06 	call	0xc10	; 0xc10 <valve>
			UART_TxChar('O');
    117e:	8f e4       	ldi	r24, 0x4F	; 79
    1180:	0e 94 99 0a 	call	0x1532	; 0x1532 <UART_TxChar>
			lcd_clear();
    1184:	0e 94 5f 02 	call	0x4be	; 0x4be <lcd_clear>
			while(Sec<120)
			{
				itoa(show_heart_rate(),Hrate,10);
				if(Sec%10==0){
    1188:	0a e0       	ldi	r16, 0x0A	; 10
    118a:	10 e0       	ldi	r17, 0x00	; 0
			lcd_puts_at("FLUID OVER",3,1);
			_delay_ms(5000);
			valve(2);
			UART_TxChar('O');
			lcd_clear();
			while(Sec<120)
    118c:	35 c0       	rjmp	.+106    	; 0x11f8 <main+0x590>
			{
				itoa(show_heart_rate(),Hrate,10);
    118e:	0e 94 49 04 	call	0x892	; 0x892 <show_heart_rate>
    1192:	4a e0       	ldi	r20, 0x0A	; 10
    1194:	be 01       	movw	r22, r28
    1196:	6f 5f       	subi	r22, 0xFF	; 255
    1198:	7f 4f       	sbci	r23, 0xFF	; 255
    119a:	0e 94 b7 0d 	call	0x1b6e	; 0x1b6e <__itoa_ncheck>
				if(Sec%10==0){
    119e:	80 91 78 01 	lds	r24, 0x0178	; 0x800178 <Sec>
    11a2:	90 91 79 01 	lds	r25, 0x0179	; 0x800179 <Sec+0x1>
    11a6:	b8 01       	movw	r22, r16
    11a8:	0e 94 f1 0c 	call	0x19e2	; 0x19e2 <__divmodhi4>
    11ac:	89 2b       	or	r24, r25
    11ae:	31 f4       	brne	.+12     	; 0x11bc <main+0x554>
					lcd_puts_at(Hrate,5,1);
    11b0:	41 e0       	ldi	r20, 0x01	; 1
    11b2:	65 e0       	ldi	r22, 0x05	; 5
    11b4:	ce 01       	movw	r24, r28
    11b6:	01 96       	adiw	r24, 0x01	; 1
    11b8:	0e 94 80 02 	call	0x500	; 0x500 <lcd_puts_at>
					//UART_sendString(Hrate);
				}
				sec+=5;
    11bc:	80 91 86 01 	lds	r24, 0x0186	; 0x800186 <sec>
    11c0:	90 91 87 01 	lds	r25, 0x0187	; 0x800187 <sec+0x1>
    11c4:	a0 91 88 01 	lds	r26, 0x0188	; 0x800188 <sec+0x2>
    11c8:	b0 91 89 01 	lds	r27, 0x0189	; 0x800189 <sec+0x3>
    11cc:	05 96       	adiw	r24, 0x05	; 5
    11ce:	a1 1d       	adc	r26, r1
    11d0:	b1 1d       	adc	r27, r1
    11d2:	80 93 86 01 	sts	0x0186, r24	; 0x800186 <sec>
    11d6:	90 93 87 01 	sts	0x0187, r25	; 0x800187 <sec+0x1>
    11da:	a0 93 88 01 	sts	0x0188, r26	; 0x800188 <sec+0x2>
    11de:	b0 93 89 01 	sts	0x0189, r27	; 0x800189 <sec+0x3>
				Sec += 5;
    11e2:	80 91 78 01 	lds	r24, 0x0178	; 0x800178 <Sec>
    11e6:	90 91 79 01 	lds	r25, 0x0179	; 0x800179 <Sec+0x1>
    11ea:	05 96       	adiw	r24, 0x05	; 5
    11ec:	90 93 79 01 	sts	0x0179, r25	; 0x800179 <Sec+0x1>
    11f0:	80 93 78 01 	sts	0x0178, r24	; 0x800178 <Sec>
				Clock();
    11f4:	0e 94 21 05 	call	0xa42	; 0xa42 <Clock>
			lcd_puts_at("FLUID OVER",3,1);
			_delay_ms(5000);
			valve(2);
			UART_TxChar('O');
			lcd_clear();
			while(Sec<120)
    11f8:	80 91 78 01 	lds	r24, 0x0178	; 0x800178 <Sec>
    11fc:	90 91 79 01 	lds	r25, 0x0179	; 0x800179 <Sec+0x1>
    1200:	88 37       	cpi	r24, 0x78	; 120
    1202:	91 05       	cpc	r25, r1
    1204:	24 f2       	brlt	.-120    	; 0x118e <main+0x526>
				}
				sec+=5;
				Sec += 5;
				Clock();
			}
			PORTD &= ~(1<<PIND6);
    1206:	96 98       	cbi	0x12, 6	; 18
			PORTD |= (1<<PIND5);
    1208:	95 9a       	sbi	0x12, 5	; 18
    120a:	8f ef       	ldi	r24, 0xFF	; 255
    120c:	93 ed       	ldi	r25, 0xD3	; 211
    120e:	20 e3       	ldi	r18, 0x30	; 48
    1210:	81 50       	subi	r24, 0x01	; 1
    1212:	90 40       	sbci	r25, 0x00	; 0
    1214:	20 40       	sbci	r18, 0x00	; 0
    1216:	e1 f7       	brne	.-8      	; 0x1210 <main+0x5a8>
    1218:	00 c0       	rjmp	.+0      	; 0x121a <main+0x5b2>
    121a:	00 00       	nop
			_delay_ms(2000);
			UART_TxChar('R');
    121c:	82 e5       	ldi	r24, 0x52	; 82
    121e:	0e 94 99 0a 	call	0x1532	; 0x1532 <UART_TxChar>
			resetChip();
    1222:	0e 94 1c 05 	call	0xa38	; 0xa38 <resetChip>
    1226:	3f ef       	ldi	r19, 0xFF	; 255
    1228:	4d e3       	ldi	r20, 0x3D	; 61
    122a:	89 e4       	ldi	r24, 0x49	; 73
    122c:	31 50       	subi	r19, 0x01	; 1
    122e:	40 40       	sbci	r20, 0x00	; 0
    1230:	80 40       	sbci	r24, 0x00	; 0
    1232:	e1 f7       	brne	.-8      	; 0x122c <main+0x5c4>
    1234:	00 c0       	rjmp	.+0      	; 0x1236 <main+0x5ce>
    1236:	00 00       	nop
		}
		_delay_ms(3000);
		lcd_clear();
    1238:	0e 94 5f 02 	call	0x4be	; 0x4be <lcd_clear>
	}
    123c:	5b ce       	rjmp	.-842    	; 0xef4 <main+0x28c>
	
	//////////////////////////////////////////////////// Analog //////////////////////////////////////////////////////
	
	//$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$//
	
	HEART_RATE  = show_heart_rate();
    123e:	0e 94 49 04 	call	0x892	; 0x892 <show_heart_rate>
    1242:	8c 01       	movw	r16, r24
	while(1)
	{
			char Hrate[3];
			sprintf(Hrate,"%d",HEART_RATE);
    1244:	0f 2e       	mov	r0, r31
    1246:	ff e9       	ldi	r31, 0x9F	; 159
    1248:	ef 2e       	mov	r14, r31
    124a:	f0 e0       	ldi	r31, 0x00	; 0
    124c:	ff 2e       	mov	r15, r31
    124e:	f0 2d       	mov	r31, r0
    1250:	9e 01       	movw	r18, r28
    1252:	2f 5f       	subi	r18, 0xFF	; 255
    1254:	3f 4f       	sbci	r19, 0xFF	; 255
    1256:	59 01       	movw	r10, r18
			if((60 > HEART_RATE) || (HEART_RATE > 120))
    1258:	6c 01       	movw	r12, r24
    125a:	3c e3       	ldi	r19, 0x3C	; 60
    125c:	c3 1a       	sub	r12, r19
    125e:	d1 08       	sbc	r13, r1
	
	HEART_RATE  = show_heart_rate();
	while(1)
	{
			char Hrate[3];
			sprintf(Hrate,"%d",HEART_RATE);
    1260:	1f 93       	push	r17
    1262:	0f 93       	push	r16
    1264:	ff 92       	push	r15
    1266:	ef 92       	push	r14
    1268:	bf 92       	push	r11
    126a:	af 92       	push	r10
    126c:	0e 94 dc 0d 	call	0x1bb8	; 0x1bb8 <sprintf>
			if((60 > HEART_RATE) || (HEART_RATE > 120))
    1270:	0f 90       	pop	r0
    1272:	0f 90       	pop	r0
    1274:	0f 90       	pop	r0
    1276:	0f 90       	pop	r0
    1278:	0f 90       	pop	r0
    127a:	0f 90       	pop	r0
    127c:	4d e3       	ldi	r20, 0x3D	; 61
    127e:	c4 16       	cp	r12, r20
    1280:	d1 04       	cpc	r13, r1
    1282:	08 f4       	brcc	.+2      	; 0x1286 <main+0x61e>
    1284:	4d c0       	rjmp	.+154    	; 0x1320 <main+0x6b8>
			{
				valve(2);
    1286:	82 e0       	ldi	r24, 0x02	; 2
    1288:	90 e0       	ldi	r25, 0x00	; 0
    128a:	0e 94 08 06 	call	0xc10	; 0xc10 <valve>
				if(60 > HEART_RATE)
    128e:	0c 33       	cpi	r16, 0x3C	; 60
    1290:	11 05       	cpc	r17, r1
    1292:	84 f4       	brge	.+32     	; 0x12b4 <main+0x64c>
				{
					lcd_puts_at("->  LowBPM",6,0);
    1294:	40 e0       	ldi	r20, 0x00	; 0
    1296:	66 e0       	ldi	r22, 0x06	; 6
    1298:	83 e1       	ldi	r24, 0x13	; 19
    129a:	91 e0       	ldi	r25, 0x01	; 1
    129c:	0e 94 80 02 	call	0x500	; 0x500 <lcd_puts_at>
					lcd_puts_at(Hrate,0,0);
    12a0:	40 e0       	ldi	r20, 0x00	; 0
    12a2:	60 e0       	ldi	r22, 0x00	; 0
    12a4:	ce 01       	movw	r24, r28
    12a6:	01 96       	adiw	r24, 0x01	; 1
    12a8:	0e 94 80 02 	call	0x500	; 0x500 <lcd_puts_at>
					UART_TxChar('L');
    12ac:	8c e4       	ldi	r24, 0x4C	; 76
    12ae:	0e 94 99 0a 	call	0x1532	; 0x1532 <UART_TxChar>
    12b2:	12 c0       	rjmp	.+36     	; 0x12d8 <main+0x670>
				}
				else if(120 < HEART_RATE)
    12b4:	09 37       	cpi	r16, 0x79	; 121
    12b6:	11 05       	cpc	r17, r1
    12b8:	7c f0       	brlt	.+30     	; 0x12d8 <main+0x670>
				{
					lcd_puts_at("->  HighBPM",6,0);
    12ba:	40 e0       	ldi	r20, 0x00	; 0
    12bc:	66 e0       	ldi	r22, 0x06	; 6
    12be:	8e e1       	ldi	r24, 0x1E	; 30
    12c0:	91 e0       	ldi	r25, 0x01	; 1
    12c2:	0e 94 80 02 	call	0x500	; 0x500 <lcd_puts_at>
					lcd_puts_at(Hrate,0,0);
    12c6:	40 e0       	ldi	r20, 0x00	; 0
    12c8:	60 e0       	ldi	r22, 0x00	; 0
    12ca:	ce 01       	movw	r24, r28
    12cc:	01 96       	adiw	r24, 0x01	; 1
    12ce:	0e 94 80 02 	call	0x500	; 0x500 <lcd_puts_at>
					UART_TxChar('H');
    12d2:	88 e4       	ldi	r24, 0x48	; 72
    12d4:	0e 94 99 0a 	call	0x1532	; 0x1532 <UART_TxChar>
				}
				while(1)
				{
					lcd_puts_at("Reset System ?",0,1);
    12d8:	41 e0       	ldi	r20, 0x01	; 1
    12da:	60 e0       	ldi	r22, 0x00	; 0
    12dc:	8a e2       	ldi	r24, 0x2A	; 42
    12de:	91 e0       	ldi	r25, 0x01	; 1
    12e0:	0e 94 80 02 	call	0x500	; 0x500 <lcd_puts_at>
					PORTD |= (1<<PIND6);
    12e4:	96 9a       	sbi	0x12, 6	; 18
    12e6:	8f ef       	ldi	r24, 0xFF	; 255
    12e8:	94 e3       	ldi	r25, 0x34	; 52
    12ea:	2c e0       	ldi	r18, 0x0C	; 12
    12ec:	81 50       	subi	r24, 0x01	; 1
    12ee:	90 40       	sbci	r25, 0x00	; 0
    12f0:	20 40       	sbci	r18, 0x00	; 0
    12f2:	e1 f7       	brne	.-8      	; 0x12ec <main+0x684>
    12f4:	00 c0       	rjmp	.+0      	; 0x12f6 <main+0x68e>
    12f6:	00 00       	nop
					_delay_ms(500);
					PORTD &= ~(1<<PIND6);
    12f8:	96 98       	cbi	0x12, 6	; 18
    12fa:	3f ef       	ldi	r19, 0xFF	; 255
    12fc:	44 e3       	ldi	r20, 0x34	; 52
    12fe:	8c e0       	ldi	r24, 0x0C	; 12
    1300:	31 50       	subi	r19, 0x01	; 1
    1302:	40 40       	sbci	r20, 0x00	; 0
    1304:	80 40       	sbci	r24, 0x00	; 0
    1306:	e1 f7       	brne	.-8      	; 0x1300 <main+0x698>
    1308:	00 c0       	rjmp	.+0      	; 0x130a <main+0x6a2>
    130a:	00 00       	nop
					_delay_ms(500);
					while(isPressed(BTN_SET_RESET))
    130c:	81 e8       	ldi	r24, 0x81	; 129
    130e:	0e 94 d1 02 	call	0x5a2	; 0x5a2 <isPressed>
    1312:	88 23       	and	r24, r24
    1314:	09 f3       	breq	.-62     	; 0x12d8 <main+0x670>
					{
						UART_TxChar('P');
    1316:	80 e5       	ldi	r24, 0x50	; 80
    1318:	0e 94 99 0a 	call	0x1532	; 0x1532 <UART_TxChar>
						resetChip();
    131c:	0e 94 1c 05 	call	0xa38	; 0xa38 <resetChip>
					}
				}
			}
			
	
		if(weightVarience(hx711_getweight())==1)
    1320:	0e 94 2d 01 	call	0x25a	; 0x25a <hx711_getweight>
    1324:	0e 94 c6 05 	call	0xb8c	; 0xb8c <weightVarience>
    1328:	01 97       	sbiw	r24, 0x01	; 1
    132a:	89 f5       	brne	.+98     	; 0x138e <main+0x726>
		{
			valve(2);
    132c:	82 e0       	ldi	r24, 0x02	; 2
    132e:	90 e0       	ldi	r25, 0x00	; 0
    1330:	0e 94 08 06 	call	0xc10	; 0xc10 <valve>
			lcd_puts_at("Speed Varied",0,0);
    1334:	40 e0       	ldi	r20, 0x00	; 0
    1336:	60 e0       	ldi	r22, 0x00	; 0
    1338:	89 e3       	ldi	r24, 0x39	; 57
    133a:	91 e0       	ldi	r25, 0x01	; 1
    133c:	0e 94 80 02 	call	0x500	; 0x500 <lcd_puts_at>
			UART_TxChar('S');
    1340:	83 e5       	ldi	r24, 0x53	; 83
    1342:	0e 94 99 0a 	call	0x1532	; 0x1532 <UART_TxChar>
			while(1)
			{
				lcd_puts_at("Reset System ?",0,1);
    1346:	41 e0       	ldi	r20, 0x01	; 1
    1348:	60 e0       	ldi	r22, 0x00	; 0
    134a:	8a e2       	ldi	r24, 0x2A	; 42
    134c:	91 e0       	ldi	r25, 0x01	; 1
    134e:	0e 94 80 02 	call	0x500	; 0x500 <lcd_puts_at>
				PORTD |= (1<<PIND6);
    1352:	96 9a       	sbi	0x12, 6	; 18
    1354:	9f ef       	ldi	r25, 0xFF	; 255
    1356:	24 e3       	ldi	r18, 0x34	; 52
    1358:	3c e0       	ldi	r19, 0x0C	; 12
    135a:	91 50       	subi	r25, 0x01	; 1
    135c:	20 40       	sbci	r18, 0x00	; 0
    135e:	30 40       	sbci	r19, 0x00	; 0
    1360:	e1 f7       	brne	.-8      	; 0x135a <main+0x6f2>
    1362:	00 c0       	rjmp	.+0      	; 0x1364 <main+0x6fc>
    1364:	00 00       	nop
				_delay_ms(500);
				PORTD &= ~(1<<PIND6);
    1366:	96 98       	cbi	0x12, 6	; 18
    1368:	4f ef       	ldi	r20, 0xFF	; 255
    136a:	84 e3       	ldi	r24, 0x34	; 52
    136c:	9c e0       	ldi	r25, 0x0C	; 12
    136e:	41 50       	subi	r20, 0x01	; 1
    1370:	80 40       	sbci	r24, 0x00	; 0
    1372:	90 40       	sbci	r25, 0x00	; 0
    1374:	e1 f7       	brne	.-8      	; 0x136e <main+0x706>
    1376:	00 c0       	rjmp	.+0      	; 0x1378 <main+0x710>
    1378:	00 00       	nop
				_delay_ms(500);
				while(isPressed(BTN_SET_RESET))
    137a:	81 e8       	ldi	r24, 0x81	; 129
    137c:	0e 94 d1 02 	call	0x5a2	; 0x5a2 <isPressed>
    1380:	88 23       	and	r24, r24
    1382:	09 f3       	breq	.-62     	; 0x1346 <main+0x6de>
				{
					UART_TxChar('P');
    1384:	80 e5       	ldi	r24, 0x50	; 80
    1386:	0e 94 99 0a 	call	0x1532	; 0x1532 <UART_TxChar>
					resetChip();
    138a:	0e 94 1c 05 	call	0xa38	; 0xa38 <resetChip>
				}
			}
		}
		
		if(weightVarience(hx711_getweight())==2)// Here must defined the mass of the constant according to the calibration
    138e:	0e 94 2d 01 	call	0x25a	; 0x25a <hx711_getweight>
    1392:	0e 94 c6 05 	call	0xb8c	; 0xb8c <weightVarience>
    1396:	02 97       	sbiw	r24, 0x02	; 2
    1398:	09 f0       	breq	.+2      	; 0x139c <main+0x734>
    139a:	74 c0       	rjmp	.+232    	; 0x1484 <main+0x81c>
		{
			lcd_clear();
    139c:	0e 94 5f 02 	call	0x4be	; 0x4be <lcd_clear>
			lcd_puts_at("CHEMOTHEREPY",2,0);
    13a0:	40 e0       	ldi	r20, 0x00	; 0
    13a2:	62 e0       	ldi	r22, 0x02	; 2
    13a4:	86 e4       	ldi	r24, 0x46	; 70
    13a6:	91 e0       	ldi	r25, 0x01	; 1
    13a8:	0e 94 80 02 	call	0x500	; 0x500 <lcd_puts_at>
			lcd_puts_at("FLUID OVER",3,1);
    13ac:	41 e0       	ldi	r20, 0x01	; 1
    13ae:	63 e0       	ldi	r22, 0x03	; 3
    13b0:	83 e5       	ldi	r24, 0x53	; 83
    13b2:	91 e0       	ldi	r25, 0x01	; 1
    13b4:	0e 94 80 02 	call	0x500	; 0x500 <lcd_puts_at>
    13b8:	2f ef       	ldi	r18, 0xFF	; 255
    13ba:	31 e1       	ldi	r19, 0x11	; 17
    13bc:	4a e7       	ldi	r20, 0x7A	; 122
    13be:	21 50       	subi	r18, 0x01	; 1
    13c0:	30 40       	sbci	r19, 0x00	; 0
    13c2:	40 40       	sbci	r20, 0x00	; 0
    13c4:	e1 f7       	brne	.-8      	; 0x13be <main+0x756>
    13c6:	00 c0       	rjmp	.+0      	; 0x13c8 <main+0x760>
    13c8:	00 00       	nop
			
			_delay_ms(5000);
			valve(2);
    13ca:	82 e0       	ldi	r24, 0x02	; 2
    13cc:	90 e0       	ldi	r25, 0x00	; 0
    13ce:	0e 94 08 06 	call	0xc10	; 0xc10 <valve>
			UART_TxChar('O');
    13d2:	8f e4       	ldi	r24, 0x4F	; 79
    13d4:	0e 94 99 0a 	call	0x1532	; 0x1532 <UART_TxChar>
			lcd_clear();
    13d8:	0e 94 5f 02 	call	0x4be	; 0x4be <lcd_clear>
			while(Sec<120)
			{
				itoa(show_heart_rate(),Hrate,10);
				if(Sec%10==0){
    13dc:	0a e0       	ldi	r16, 0x0A	; 10
    13de:	10 e0       	ldi	r17, 0x00	; 0
			
			_delay_ms(5000);
			valve(2);
			UART_TxChar('O');
			lcd_clear();
			while(Sec<120)
    13e0:	39 c0       	rjmp	.+114    	; 0x1454 <main+0x7ec>
			{
				itoa(show_heart_rate(),Hrate,10);
    13e2:	0e 94 49 04 	call	0x892	; 0x892 <show_heart_rate>
    13e6:	4a e0       	ldi	r20, 0x0A	; 10
    13e8:	be 01       	movw	r22, r28
    13ea:	6f 5f       	subi	r22, 0xFF	; 255
    13ec:	7f 4f       	sbci	r23, 0xFF	; 255
    13ee:	0e 94 b7 0d 	call	0x1b6e	; 0x1b6e <__itoa_ncheck>
				if(Sec%10==0){
    13f2:	80 91 78 01 	lds	r24, 0x0178	; 0x800178 <Sec>
    13f6:	90 91 79 01 	lds	r25, 0x0179	; 0x800179 <Sec+0x1>
    13fa:	b8 01       	movw	r22, r16
    13fc:	0e 94 f1 0c 	call	0x19e2	; 0x19e2 <__divmodhi4>
    1400:	89 2b       	or	r24, r25
    1402:	51 f4       	brne	.+20     	; 0x1418 <main+0x7b0>
					lcd_puts_at(Hrate,5,1);
    1404:	41 e0       	ldi	r20, 0x01	; 1
    1406:	65 e0       	ldi	r22, 0x05	; 5
    1408:	ce 01       	movw	r24, r28
    140a:	01 96       	adiw	r24, 0x01	; 1
    140c:	0e 94 80 02 	call	0x500	; 0x500 <lcd_puts_at>
					UART_sendString(Hrate);
    1410:	ce 01       	movw	r24, r28
    1412:	01 96       	adiw	r24, 0x01	; 1
    1414:	0e 94 9d 0a 	call	0x153a	; 0x153a <UART_sendString>
				}
				sec+=5;
    1418:	80 91 86 01 	lds	r24, 0x0186	; 0x800186 <sec>
    141c:	90 91 87 01 	lds	r25, 0x0187	; 0x800187 <sec+0x1>
    1420:	a0 91 88 01 	lds	r26, 0x0188	; 0x800188 <sec+0x2>
    1424:	b0 91 89 01 	lds	r27, 0x0189	; 0x800189 <sec+0x3>
    1428:	05 96       	adiw	r24, 0x05	; 5
    142a:	a1 1d       	adc	r26, r1
    142c:	b1 1d       	adc	r27, r1
    142e:	80 93 86 01 	sts	0x0186, r24	; 0x800186 <sec>
    1432:	90 93 87 01 	sts	0x0187, r25	; 0x800187 <sec+0x1>
    1436:	a0 93 88 01 	sts	0x0188, r26	; 0x800188 <sec+0x2>
    143a:	b0 93 89 01 	sts	0x0189, r27	; 0x800189 <sec+0x3>
				Sec += 5;
    143e:	80 91 78 01 	lds	r24, 0x0178	; 0x800178 <Sec>
    1442:	90 91 79 01 	lds	r25, 0x0179	; 0x800179 <Sec+0x1>
    1446:	05 96       	adiw	r24, 0x05	; 5
    1448:	90 93 79 01 	sts	0x0179, r25	; 0x800179 <Sec+0x1>
    144c:	80 93 78 01 	sts	0x0178, r24	; 0x800178 <Sec>
				Clock();
    1450:	0e 94 21 05 	call	0xa42	; 0xa42 <Clock>
			
			_delay_ms(5000);
			valve(2);
			UART_TxChar('O');
			lcd_clear();
			while(Sec<120)
    1454:	80 91 78 01 	lds	r24, 0x0178	; 0x800178 <Sec>
    1458:	90 91 79 01 	lds	r25, 0x0179	; 0x800179 <Sec+0x1>
    145c:	88 37       	cpi	r24, 0x78	; 120
    145e:	91 05       	cpc	r25, r1
    1460:	0c f4       	brge	.+2      	; 0x1464 <main+0x7fc>
    1462:	bf cf       	rjmp	.-130    	; 0x13e2 <main+0x77a>
				}
				sec+=5;
				Sec += 5;
				Clock();
			}
			PORTD &= ~(1<<PIND6);
    1464:	96 98       	cbi	0x12, 6	; 18
			PORTD |= (1<<PIND5);
    1466:	95 9a       	sbi	0x12, 5	; 18
    1468:	8f ef       	ldi	r24, 0xFF	; 255
    146a:	93 ed       	ldi	r25, 0xD3	; 211
    146c:	20 e3       	ldi	r18, 0x30	; 48
    146e:	81 50       	subi	r24, 0x01	; 1
    1470:	90 40       	sbci	r25, 0x00	; 0
    1472:	20 40       	sbci	r18, 0x00	; 0
    1474:	e1 f7       	brne	.-8      	; 0x146e <main+0x806>
    1476:	00 c0       	rjmp	.+0      	; 0x1478 <main+0x810>
    1478:	00 00       	nop
			_delay_ms(2000);
			UART_TxChar('R');
    147a:	82 e5       	ldi	r24, 0x52	; 82
    147c:	0e 94 99 0a 	call	0x1532	; 0x1532 <UART_TxChar>
			resetChip();
    1480:	0e 94 1c 05 	call	0xa38	; 0xa38 <resetChip>
    1484:	3f ef       	ldi	r19, 0xFF	; 255
    1486:	4d e3       	ldi	r20, 0x3D	; 61
    1488:	89 e4       	ldi	r24, 0x49	; 73
    148a:	31 50       	subi	r19, 0x01	; 1
    148c:	40 40       	sbci	r20, 0x00	; 0
    148e:	80 40       	sbci	r24, 0x00	; 0
    1490:	e1 f7       	brne	.-8      	; 0x148a <main+0x822>
    1492:	00 c0       	rjmp	.+0      	; 0x1494 <main+0x82c>
    1494:	00 00       	nop
		}
		_delay_ms(3000);
		lcd_clear();
    1496:	0e 94 5f 02 	call	0x4be	; 0x4be <lcd_clear>
	}
    149a:	e2 ce       	rjmp	.-572    	; 0x1260 <main+0x5f8>
		}
		
	if(choice == 'n')
		break;
			
	lcd_clear();
    149c:	0e 94 5f 02 	call	0x4be	; 0x4be <lcd_clear>
	
	//$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$//
	
	
		char Hrate[3];
		sprintf(Hrate,"%d",HEART_RATE);
    14a0:	4f 92       	push	r4
    14a2:	5f 92       	push	r5
    14a4:	8f e9       	ldi	r24, 0x9F	; 159
    14a6:	90 e0       	ldi	r25, 0x00	; 0
    14a8:	9f 93       	push	r25
    14aa:	8f 93       	push	r24
    14ac:	ce 01       	movw	r24, r28
    14ae:	01 96       	adiw	r24, 0x01	; 1
    14b0:	9f 93       	push	r25
    14b2:	8f 93       	push	r24
    14b4:	0e 94 dc 0d 	call	0x1bb8	; 0x1bb8 <sprintf>
    14b8:	0f 90       	pop	r0
    14ba:	0f 90       	pop	r0
    14bc:	0f 90       	pop	r0
    14be:	0f 90       	pop	r0
    14c0:	0f 90       	pop	r0
    14c2:	0f 90       	pop	r0
			{
				lcd_puts_at("1=>Abnormal Rate",0,0);
				lcd_puts_at("2=>Normal Rate",0,1);
				if(isPressed(BTN_1))
				{
					int num = rand()%200;
    14c4:	c5 2c       	mov	r12, r5
    14c6:	d4 2c       	mov	r13, r4
    14c8:	b1 cd       	rjmp	.-1182   	; 0x102c <main+0x3c4>
					break;
				}
			}		
		}
		
	if(choice == 'n')
    14ca:	80 91 64 00 	lds	r24, 0x0064	; 0x800064 <choice>
    14ce:	8e 36       	cpi	r24, 0x6E	; 110
    14d0:	09 f4       	brne	.+2      	; 0x14d4 <main+0x86c>
    14d2:	b5 ce       	rjmp	.-662    	; 0x123e <main+0x5d6>
    14d4:	e3 cf       	rjmp	.-58     	; 0x149c <main+0x834>

000014d6 <UART_init>:
#include "uart.h"


void UART_init(long USART_BAUDRATE)
{
	UCSRB |= (1 << RXEN) | (1 << TXEN) | (1 << RXCIE);         // Turn on transmission and reception by setting RX Tx bits
    14d6:	2a b1       	in	r18, 0x0a	; 10
    14d8:	28 69       	ori	r18, 0x98	; 152
    14da:	2a b9       	out	0x0a, r18	; 10
	UCSRC |= (1 << URSEL) | (1 << UCSZ0) | (1 << UCSZ1);    // Use 8-bit character sizes
    14dc:	20 b5       	in	r18, 0x20	; 32
    14de:	26 68       	ori	r18, 0x86	; 134
    14e0:	20 bd       	out	0x20, r18	; 32
	UBRRL = BAUD_PRESCALE; // Load lower 8-bits of the baud rate value
    14e2:	dc 01       	movw	r26, r24
    14e4:	cb 01       	movw	r24, r22
    14e6:	88 0f       	add	r24, r24
    14e8:	99 1f       	adc	r25, r25
    14ea:	aa 1f       	adc	r26, r26
    14ec:	bb 1f       	adc	r27, r27
    14ee:	88 0f       	add	r24, r24
    14f0:	99 1f       	adc	r25, r25
    14f2:	aa 1f       	adc	r26, r26
    14f4:	bb 1f       	adc	r27, r27
    14f6:	9c 01       	movw	r18, r24
    14f8:	ad 01       	movw	r20, r26
    14fa:	22 0f       	add	r18, r18
    14fc:	33 1f       	adc	r19, r19
    14fe:	44 1f       	adc	r20, r20
    1500:	55 1f       	adc	r21, r21
    1502:	22 0f       	add	r18, r18
    1504:	33 1f       	adc	r19, r19
    1506:	44 1f       	adc	r20, r20
    1508:	55 1f       	adc	r21, r21
    150a:	60 e0       	ldi	r22, 0x00	; 0
    150c:	72 e1       	ldi	r23, 0x12	; 18
    150e:	8a e7       	ldi	r24, 0x7A	; 122
    1510:	90 e0       	ldi	r25, 0x00	; 0
    1512:	0e 94 05 0d 	call	0x1a0a	; 0x1a0a <__udivmodsi4>
    1516:	8f ef       	ldi	r24, 0xFF	; 255
    1518:	82 0f       	add	r24, r18
    151a:	89 b9       	out	0x09, r24	; 9
	UBRRH = (BAUD_PRESCALE >> 8); // Load upper 8-bits of the baud rate value
    151c:	da 01       	movw	r26, r20
    151e:	c9 01       	movw	r24, r18
    1520:	01 97       	sbiw	r24, 0x01	; 1
    1522:	a1 09       	sbc	r26, r1
    1524:	b1 09       	sbc	r27, r1
    1526:	89 2f       	mov	r24, r25
    1528:	9a 2f       	mov	r25, r26
    152a:	ab 2f       	mov	r26, r27
    152c:	bb 27       	eor	r27, r27
    152e:	80 bd       	out	0x20, r24	; 32
    1530:	08 95       	ret

00001532 <UART_TxChar>:
}

void UART_TxChar(char c)
{
	while (! (UCSRA & (1<<UDRE))); // Wait for empty transmit buffer
    1532:	5d 9b       	sbis	0x0b, 5	; 11
    1534:	fe cf       	rjmp	.-4      	; 0x1532 <UART_TxChar>
	UDR = c;
    1536:	8c b9       	out	0x0c, r24	; 12
    1538:	08 95       	ret

0000153a <UART_sendString>:
}

void UART_sendString(char *str)
{
    153a:	0f 93       	push	r16
    153c:	1f 93       	push	r17
    153e:	cf 93       	push	r28
    1540:	fc 01       	movw	r30, r24
	unsigned char s=0;
	
	while (str[s]!=0) // string till null
    1542:	80 81       	ld	r24, Z
    1544:	88 23       	and	r24, r24
    1546:	59 f0       	breq	.+22     	; 0x155e <UART_sendString+0x24>
    1548:	8f 01       	movw	r16, r30
    154a:	c0 e0       	ldi	r28, 0x00	; 0
	{
		UART_TxChar(str[s]);    // send s to UART_TxChar(s) function
    154c:	0e 94 99 0a 	call	0x1532	; 0x1532 <UART_TxChar>
		s++;
    1550:	cf 5f       	subi	r28, 0xFF	; 255

void UART_sendString(char *str)
{
	unsigned char s=0;
	
	while (str[s]!=0) // string till null
    1552:	f8 01       	movw	r30, r16
    1554:	ec 0f       	add	r30, r28
    1556:	f1 1d       	adc	r31, r1
    1558:	80 81       	ld	r24, Z
    155a:	81 11       	cpse	r24, r1
    155c:	f7 cf       	rjmp	.-18     	; 0x154c <UART_sendString+0x12>
	{
		UART_TxChar(str[s]);    // send s to UART_TxChar(s) function
		s++;
	}
}
    155e:	cf 91       	pop	r28
    1560:	1f 91       	pop	r17
    1562:	0f 91       	pop	r16
    1564:	08 95       	ret

00001566 <__subsf3>:
    1566:	50 58       	subi	r21, 0x80	; 128

00001568 <__addsf3>:
    1568:	bb 27       	eor	r27, r27
    156a:	aa 27       	eor	r26, r26
    156c:	0e 94 cb 0a 	call	0x1596	; 0x1596 <__addsf3x>
    1570:	0c 94 45 0c 	jmp	0x188a	; 0x188a <__fp_round>
    1574:	0e 94 37 0c 	call	0x186e	; 0x186e <__fp_pscA>
    1578:	38 f0       	brcs	.+14     	; 0x1588 <__addsf3+0x20>
    157a:	0e 94 3e 0c 	call	0x187c	; 0x187c <__fp_pscB>
    157e:	20 f0       	brcs	.+8      	; 0x1588 <__addsf3+0x20>
    1580:	39 f4       	brne	.+14     	; 0x1590 <__addsf3+0x28>
    1582:	9f 3f       	cpi	r25, 0xFF	; 255
    1584:	19 f4       	brne	.+6      	; 0x158c <__addsf3+0x24>
    1586:	26 f4       	brtc	.+8      	; 0x1590 <__addsf3+0x28>
    1588:	0c 94 34 0c 	jmp	0x1868	; 0x1868 <__fp_nan>
    158c:	0e f4       	brtc	.+2      	; 0x1590 <__addsf3+0x28>
    158e:	e0 95       	com	r30
    1590:	e7 fb       	bst	r30, 7
    1592:	0c 94 2e 0c 	jmp	0x185c	; 0x185c <__fp_inf>

00001596 <__addsf3x>:
    1596:	e9 2f       	mov	r30, r25
    1598:	0e 94 56 0c 	call	0x18ac	; 0x18ac <__fp_split3>
    159c:	58 f3       	brcs	.-42     	; 0x1574 <__addsf3+0xc>
    159e:	ba 17       	cp	r27, r26
    15a0:	62 07       	cpc	r22, r18
    15a2:	73 07       	cpc	r23, r19
    15a4:	84 07       	cpc	r24, r20
    15a6:	95 07       	cpc	r25, r21
    15a8:	20 f0       	brcs	.+8      	; 0x15b2 <__addsf3x+0x1c>
    15aa:	79 f4       	brne	.+30     	; 0x15ca <__addsf3x+0x34>
    15ac:	a6 f5       	brtc	.+104    	; 0x1616 <__addsf3x+0x80>
    15ae:	0c 94 78 0c 	jmp	0x18f0	; 0x18f0 <__fp_zero>
    15b2:	0e f4       	brtc	.+2      	; 0x15b6 <__addsf3x+0x20>
    15b4:	e0 95       	com	r30
    15b6:	0b 2e       	mov	r0, r27
    15b8:	ba 2f       	mov	r27, r26
    15ba:	a0 2d       	mov	r26, r0
    15bc:	0b 01       	movw	r0, r22
    15be:	b9 01       	movw	r22, r18
    15c0:	90 01       	movw	r18, r0
    15c2:	0c 01       	movw	r0, r24
    15c4:	ca 01       	movw	r24, r20
    15c6:	a0 01       	movw	r20, r0
    15c8:	11 24       	eor	r1, r1
    15ca:	ff 27       	eor	r31, r31
    15cc:	59 1b       	sub	r21, r25
    15ce:	99 f0       	breq	.+38     	; 0x15f6 <__addsf3x+0x60>
    15d0:	59 3f       	cpi	r21, 0xF9	; 249
    15d2:	50 f4       	brcc	.+20     	; 0x15e8 <__addsf3x+0x52>
    15d4:	50 3e       	cpi	r21, 0xE0	; 224
    15d6:	68 f1       	brcs	.+90     	; 0x1632 <__addsf3x+0x9c>
    15d8:	1a 16       	cp	r1, r26
    15da:	f0 40       	sbci	r31, 0x00	; 0
    15dc:	a2 2f       	mov	r26, r18
    15de:	23 2f       	mov	r18, r19
    15e0:	34 2f       	mov	r19, r20
    15e2:	44 27       	eor	r20, r20
    15e4:	58 5f       	subi	r21, 0xF8	; 248
    15e6:	f3 cf       	rjmp	.-26     	; 0x15ce <__addsf3x+0x38>
    15e8:	46 95       	lsr	r20
    15ea:	37 95       	ror	r19
    15ec:	27 95       	ror	r18
    15ee:	a7 95       	ror	r26
    15f0:	f0 40       	sbci	r31, 0x00	; 0
    15f2:	53 95       	inc	r21
    15f4:	c9 f7       	brne	.-14     	; 0x15e8 <__addsf3x+0x52>
    15f6:	7e f4       	brtc	.+30     	; 0x1616 <__addsf3x+0x80>
    15f8:	1f 16       	cp	r1, r31
    15fa:	ba 0b       	sbc	r27, r26
    15fc:	62 0b       	sbc	r22, r18
    15fe:	73 0b       	sbc	r23, r19
    1600:	84 0b       	sbc	r24, r20
    1602:	ba f0       	brmi	.+46     	; 0x1632 <__addsf3x+0x9c>
    1604:	91 50       	subi	r25, 0x01	; 1
    1606:	a1 f0       	breq	.+40     	; 0x1630 <__addsf3x+0x9a>
    1608:	ff 0f       	add	r31, r31
    160a:	bb 1f       	adc	r27, r27
    160c:	66 1f       	adc	r22, r22
    160e:	77 1f       	adc	r23, r23
    1610:	88 1f       	adc	r24, r24
    1612:	c2 f7       	brpl	.-16     	; 0x1604 <__addsf3x+0x6e>
    1614:	0e c0       	rjmp	.+28     	; 0x1632 <__addsf3x+0x9c>
    1616:	ba 0f       	add	r27, r26
    1618:	62 1f       	adc	r22, r18
    161a:	73 1f       	adc	r23, r19
    161c:	84 1f       	adc	r24, r20
    161e:	48 f4       	brcc	.+18     	; 0x1632 <__addsf3x+0x9c>
    1620:	87 95       	ror	r24
    1622:	77 95       	ror	r23
    1624:	67 95       	ror	r22
    1626:	b7 95       	ror	r27
    1628:	f7 95       	ror	r31
    162a:	9e 3f       	cpi	r25, 0xFE	; 254
    162c:	08 f0       	brcs	.+2      	; 0x1630 <__addsf3x+0x9a>
    162e:	b0 cf       	rjmp	.-160    	; 0x1590 <__addsf3+0x28>
    1630:	93 95       	inc	r25
    1632:	88 0f       	add	r24, r24
    1634:	08 f0       	brcs	.+2      	; 0x1638 <__addsf3x+0xa2>
    1636:	99 27       	eor	r25, r25
    1638:	ee 0f       	add	r30, r30
    163a:	97 95       	ror	r25
    163c:	87 95       	ror	r24
    163e:	08 95       	ret

00001640 <__cmpsf2>:
    1640:	0e 94 0a 0c 	call	0x1814	; 0x1814 <__fp_cmp>
    1644:	08 f4       	brcc	.+2      	; 0x1648 <__cmpsf2+0x8>
    1646:	81 e0       	ldi	r24, 0x01	; 1
    1648:	08 95       	ret

0000164a <__divsf3>:
    164a:	0e 94 39 0b 	call	0x1672	; 0x1672 <__divsf3x>
    164e:	0c 94 45 0c 	jmp	0x188a	; 0x188a <__fp_round>
    1652:	0e 94 3e 0c 	call	0x187c	; 0x187c <__fp_pscB>
    1656:	58 f0       	brcs	.+22     	; 0x166e <__divsf3+0x24>
    1658:	0e 94 37 0c 	call	0x186e	; 0x186e <__fp_pscA>
    165c:	40 f0       	brcs	.+16     	; 0x166e <__divsf3+0x24>
    165e:	29 f4       	brne	.+10     	; 0x166a <__divsf3+0x20>
    1660:	5f 3f       	cpi	r21, 0xFF	; 255
    1662:	29 f0       	breq	.+10     	; 0x166e <__divsf3+0x24>
    1664:	0c 94 2e 0c 	jmp	0x185c	; 0x185c <__fp_inf>
    1668:	51 11       	cpse	r21, r1
    166a:	0c 94 79 0c 	jmp	0x18f2	; 0x18f2 <__fp_szero>
    166e:	0c 94 34 0c 	jmp	0x1868	; 0x1868 <__fp_nan>

00001672 <__divsf3x>:
    1672:	0e 94 56 0c 	call	0x18ac	; 0x18ac <__fp_split3>
    1676:	68 f3       	brcs	.-38     	; 0x1652 <__divsf3+0x8>

00001678 <__divsf3_pse>:
    1678:	99 23       	and	r25, r25
    167a:	b1 f3       	breq	.-20     	; 0x1668 <__divsf3+0x1e>
    167c:	55 23       	and	r21, r21
    167e:	91 f3       	breq	.-28     	; 0x1664 <__divsf3+0x1a>
    1680:	95 1b       	sub	r25, r21
    1682:	55 0b       	sbc	r21, r21
    1684:	bb 27       	eor	r27, r27
    1686:	aa 27       	eor	r26, r26
    1688:	62 17       	cp	r22, r18
    168a:	73 07       	cpc	r23, r19
    168c:	84 07       	cpc	r24, r20
    168e:	38 f0       	brcs	.+14     	; 0x169e <__divsf3_pse+0x26>
    1690:	9f 5f       	subi	r25, 0xFF	; 255
    1692:	5f 4f       	sbci	r21, 0xFF	; 255
    1694:	22 0f       	add	r18, r18
    1696:	33 1f       	adc	r19, r19
    1698:	44 1f       	adc	r20, r20
    169a:	aa 1f       	adc	r26, r26
    169c:	a9 f3       	breq	.-22     	; 0x1688 <__divsf3_pse+0x10>
    169e:	35 d0       	rcall	.+106    	; 0x170a <__divsf3_pse+0x92>
    16a0:	0e 2e       	mov	r0, r30
    16a2:	3a f0       	brmi	.+14     	; 0x16b2 <__divsf3_pse+0x3a>
    16a4:	e0 e8       	ldi	r30, 0x80	; 128
    16a6:	32 d0       	rcall	.+100    	; 0x170c <__divsf3_pse+0x94>
    16a8:	91 50       	subi	r25, 0x01	; 1
    16aa:	50 40       	sbci	r21, 0x00	; 0
    16ac:	e6 95       	lsr	r30
    16ae:	00 1c       	adc	r0, r0
    16b0:	ca f7       	brpl	.-14     	; 0x16a4 <__divsf3_pse+0x2c>
    16b2:	2b d0       	rcall	.+86     	; 0x170a <__divsf3_pse+0x92>
    16b4:	fe 2f       	mov	r31, r30
    16b6:	29 d0       	rcall	.+82     	; 0x170a <__divsf3_pse+0x92>
    16b8:	66 0f       	add	r22, r22
    16ba:	77 1f       	adc	r23, r23
    16bc:	88 1f       	adc	r24, r24
    16be:	bb 1f       	adc	r27, r27
    16c0:	26 17       	cp	r18, r22
    16c2:	37 07       	cpc	r19, r23
    16c4:	48 07       	cpc	r20, r24
    16c6:	ab 07       	cpc	r26, r27
    16c8:	b0 e8       	ldi	r27, 0x80	; 128
    16ca:	09 f0       	breq	.+2      	; 0x16ce <__divsf3_pse+0x56>
    16cc:	bb 0b       	sbc	r27, r27
    16ce:	80 2d       	mov	r24, r0
    16d0:	bf 01       	movw	r22, r30
    16d2:	ff 27       	eor	r31, r31
    16d4:	93 58       	subi	r25, 0x83	; 131
    16d6:	5f 4f       	sbci	r21, 0xFF	; 255
    16d8:	3a f0       	brmi	.+14     	; 0x16e8 <__divsf3_pse+0x70>
    16da:	9e 3f       	cpi	r25, 0xFE	; 254
    16dc:	51 05       	cpc	r21, r1
    16de:	78 f0       	brcs	.+30     	; 0x16fe <__divsf3_pse+0x86>
    16e0:	0c 94 2e 0c 	jmp	0x185c	; 0x185c <__fp_inf>
    16e4:	0c 94 79 0c 	jmp	0x18f2	; 0x18f2 <__fp_szero>
    16e8:	5f 3f       	cpi	r21, 0xFF	; 255
    16ea:	e4 f3       	brlt	.-8      	; 0x16e4 <__divsf3_pse+0x6c>
    16ec:	98 3e       	cpi	r25, 0xE8	; 232
    16ee:	d4 f3       	brlt	.-12     	; 0x16e4 <__divsf3_pse+0x6c>
    16f0:	86 95       	lsr	r24
    16f2:	77 95       	ror	r23
    16f4:	67 95       	ror	r22
    16f6:	b7 95       	ror	r27
    16f8:	f7 95       	ror	r31
    16fa:	9f 5f       	subi	r25, 0xFF	; 255
    16fc:	c9 f7       	brne	.-14     	; 0x16f0 <__divsf3_pse+0x78>
    16fe:	88 0f       	add	r24, r24
    1700:	91 1d       	adc	r25, r1
    1702:	96 95       	lsr	r25
    1704:	87 95       	ror	r24
    1706:	97 f9       	bld	r25, 7
    1708:	08 95       	ret
    170a:	e1 e0       	ldi	r30, 0x01	; 1
    170c:	66 0f       	add	r22, r22
    170e:	77 1f       	adc	r23, r23
    1710:	88 1f       	adc	r24, r24
    1712:	bb 1f       	adc	r27, r27
    1714:	62 17       	cp	r22, r18
    1716:	73 07       	cpc	r23, r19
    1718:	84 07       	cpc	r24, r20
    171a:	ba 07       	cpc	r27, r26
    171c:	20 f0       	brcs	.+8      	; 0x1726 <__divsf3_pse+0xae>
    171e:	62 1b       	sub	r22, r18
    1720:	73 0b       	sbc	r23, r19
    1722:	84 0b       	sbc	r24, r20
    1724:	ba 0b       	sbc	r27, r26
    1726:	ee 1f       	adc	r30, r30
    1728:	88 f7       	brcc	.-30     	; 0x170c <__divsf3_pse+0x94>
    172a:	e0 95       	com	r30
    172c:	08 95       	ret

0000172e <__fixsfsi>:
    172e:	0e 94 9e 0b 	call	0x173c	; 0x173c <__fixunssfsi>
    1732:	68 94       	set
    1734:	b1 11       	cpse	r27, r1
    1736:	0c 94 79 0c 	jmp	0x18f2	; 0x18f2 <__fp_szero>
    173a:	08 95       	ret

0000173c <__fixunssfsi>:
    173c:	0e 94 5e 0c 	call	0x18bc	; 0x18bc <__fp_splitA>
    1740:	88 f0       	brcs	.+34     	; 0x1764 <__fixunssfsi+0x28>
    1742:	9f 57       	subi	r25, 0x7F	; 127
    1744:	98 f0       	brcs	.+38     	; 0x176c <__fixunssfsi+0x30>
    1746:	b9 2f       	mov	r27, r25
    1748:	99 27       	eor	r25, r25
    174a:	b7 51       	subi	r27, 0x17	; 23
    174c:	b0 f0       	brcs	.+44     	; 0x177a <__fixunssfsi+0x3e>
    174e:	e1 f0       	breq	.+56     	; 0x1788 <__fixunssfsi+0x4c>
    1750:	66 0f       	add	r22, r22
    1752:	77 1f       	adc	r23, r23
    1754:	88 1f       	adc	r24, r24
    1756:	99 1f       	adc	r25, r25
    1758:	1a f0       	brmi	.+6      	; 0x1760 <__fixunssfsi+0x24>
    175a:	ba 95       	dec	r27
    175c:	c9 f7       	brne	.-14     	; 0x1750 <__fixunssfsi+0x14>
    175e:	14 c0       	rjmp	.+40     	; 0x1788 <__fixunssfsi+0x4c>
    1760:	b1 30       	cpi	r27, 0x01	; 1
    1762:	91 f0       	breq	.+36     	; 0x1788 <__fixunssfsi+0x4c>
    1764:	0e 94 78 0c 	call	0x18f0	; 0x18f0 <__fp_zero>
    1768:	b1 e0       	ldi	r27, 0x01	; 1
    176a:	08 95       	ret
    176c:	0c 94 78 0c 	jmp	0x18f0	; 0x18f0 <__fp_zero>
    1770:	67 2f       	mov	r22, r23
    1772:	78 2f       	mov	r23, r24
    1774:	88 27       	eor	r24, r24
    1776:	b8 5f       	subi	r27, 0xF8	; 248
    1778:	39 f0       	breq	.+14     	; 0x1788 <__fixunssfsi+0x4c>
    177a:	b9 3f       	cpi	r27, 0xF9	; 249
    177c:	cc f3       	brlt	.-14     	; 0x1770 <__fixunssfsi+0x34>
    177e:	86 95       	lsr	r24
    1780:	77 95       	ror	r23
    1782:	67 95       	ror	r22
    1784:	b3 95       	inc	r27
    1786:	d9 f7       	brne	.-10     	; 0x177e <__fixunssfsi+0x42>
    1788:	3e f4       	brtc	.+14     	; 0x1798 <__fixunssfsi+0x5c>
    178a:	90 95       	com	r25
    178c:	80 95       	com	r24
    178e:	70 95       	com	r23
    1790:	61 95       	neg	r22
    1792:	7f 4f       	sbci	r23, 0xFF	; 255
    1794:	8f 4f       	sbci	r24, 0xFF	; 255
    1796:	9f 4f       	sbci	r25, 0xFF	; 255
    1798:	08 95       	ret

0000179a <__floatunsisf>:
    179a:	e8 94       	clt
    179c:	09 c0       	rjmp	.+18     	; 0x17b0 <__floatsisf+0x12>

0000179e <__floatsisf>:
    179e:	97 fb       	bst	r25, 7
    17a0:	3e f4       	brtc	.+14     	; 0x17b0 <__floatsisf+0x12>
    17a2:	90 95       	com	r25
    17a4:	80 95       	com	r24
    17a6:	70 95       	com	r23
    17a8:	61 95       	neg	r22
    17aa:	7f 4f       	sbci	r23, 0xFF	; 255
    17ac:	8f 4f       	sbci	r24, 0xFF	; 255
    17ae:	9f 4f       	sbci	r25, 0xFF	; 255
    17b0:	99 23       	and	r25, r25
    17b2:	a9 f0       	breq	.+42     	; 0x17de <__floatsisf+0x40>
    17b4:	f9 2f       	mov	r31, r25
    17b6:	96 e9       	ldi	r25, 0x96	; 150
    17b8:	bb 27       	eor	r27, r27
    17ba:	93 95       	inc	r25
    17bc:	f6 95       	lsr	r31
    17be:	87 95       	ror	r24
    17c0:	77 95       	ror	r23
    17c2:	67 95       	ror	r22
    17c4:	b7 95       	ror	r27
    17c6:	f1 11       	cpse	r31, r1
    17c8:	f8 cf       	rjmp	.-16     	; 0x17ba <__floatsisf+0x1c>
    17ca:	fa f4       	brpl	.+62     	; 0x180a <__floatsisf+0x6c>
    17cc:	bb 0f       	add	r27, r27
    17ce:	11 f4       	brne	.+4      	; 0x17d4 <__floatsisf+0x36>
    17d0:	60 ff       	sbrs	r22, 0
    17d2:	1b c0       	rjmp	.+54     	; 0x180a <__floatsisf+0x6c>
    17d4:	6f 5f       	subi	r22, 0xFF	; 255
    17d6:	7f 4f       	sbci	r23, 0xFF	; 255
    17d8:	8f 4f       	sbci	r24, 0xFF	; 255
    17da:	9f 4f       	sbci	r25, 0xFF	; 255
    17dc:	16 c0       	rjmp	.+44     	; 0x180a <__floatsisf+0x6c>
    17de:	88 23       	and	r24, r24
    17e0:	11 f0       	breq	.+4      	; 0x17e6 <__floatsisf+0x48>
    17e2:	96 e9       	ldi	r25, 0x96	; 150
    17e4:	11 c0       	rjmp	.+34     	; 0x1808 <__floatsisf+0x6a>
    17e6:	77 23       	and	r23, r23
    17e8:	21 f0       	breq	.+8      	; 0x17f2 <__floatsisf+0x54>
    17ea:	9e e8       	ldi	r25, 0x8E	; 142
    17ec:	87 2f       	mov	r24, r23
    17ee:	76 2f       	mov	r23, r22
    17f0:	05 c0       	rjmp	.+10     	; 0x17fc <__floatsisf+0x5e>
    17f2:	66 23       	and	r22, r22
    17f4:	71 f0       	breq	.+28     	; 0x1812 <__floatsisf+0x74>
    17f6:	96 e8       	ldi	r25, 0x86	; 134
    17f8:	86 2f       	mov	r24, r22
    17fa:	70 e0       	ldi	r23, 0x00	; 0
    17fc:	60 e0       	ldi	r22, 0x00	; 0
    17fe:	2a f0       	brmi	.+10     	; 0x180a <__floatsisf+0x6c>
    1800:	9a 95       	dec	r25
    1802:	66 0f       	add	r22, r22
    1804:	77 1f       	adc	r23, r23
    1806:	88 1f       	adc	r24, r24
    1808:	da f7       	brpl	.-10     	; 0x1800 <__floatsisf+0x62>
    180a:	88 0f       	add	r24, r24
    180c:	96 95       	lsr	r25
    180e:	87 95       	ror	r24
    1810:	97 f9       	bld	r25, 7
    1812:	08 95       	ret

00001814 <__fp_cmp>:
    1814:	99 0f       	add	r25, r25
    1816:	00 08       	sbc	r0, r0
    1818:	55 0f       	add	r21, r21
    181a:	aa 0b       	sbc	r26, r26
    181c:	e0 e8       	ldi	r30, 0x80	; 128
    181e:	fe ef       	ldi	r31, 0xFE	; 254
    1820:	16 16       	cp	r1, r22
    1822:	17 06       	cpc	r1, r23
    1824:	e8 07       	cpc	r30, r24
    1826:	f9 07       	cpc	r31, r25
    1828:	c0 f0       	brcs	.+48     	; 0x185a <__fp_cmp+0x46>
    182a:	12 16       	cp	r1, r18
    182c:	13 06       	cpc	r1, r19
    182e:	e4 07       	cpc	r30, r20
    1830:	f5 07       	cpc	r31, r21
    1832:	98 f0       	brcs	.+38     	; 0x185a <__fp_cmp+0x46>
    1834:	62 1b       	sub	r22, r18
    1836:	73 0b       	sbc	r23, r19
    1838:	84 0b       	sbc	r24, r20
    183a:	95 0b       	sbc	r25, r21
    183c:	39 f4       	brne	.+14     	; 0x184c <__fp_cmp+0x38>
    183e:	0a 26       	eor	r0, r26
    1840:	61 f0       	breq	.+24     	; 0x185a <__fp_cmp+0x46>
    1842:	23 2b       	or	r18, r19
    1844:	24 2b       	or	r18, r20
    1846:	25 2b       	or	r18, r21
    1848:	21 f4       	brne	.+8      	; 0x1852 <__fp_cmp+0x3e>
    184a:	08 95       	ret
    184c:	0a 26       	eor	r0, r26
    184e:	09 f4       	brne	.+2      	; 0x1852 <__fp_cmp+0x3e>
    1850:	a1 40       	sbci	r26, 0x01	; 1
    1852:	a6 95       	lsr	r26
    1854:	8f ef       	ldi	r24, 0xFF	; 255
    1856:	81 1d       	adc	r24, r1
    1858:	81 1d       	adc	r24, r1
    185a:	08 95       	ret

0000185c <__fp_inf>:
    185c:	97 f9       	bld	r25, 7
    185e:	9f 67       	ori	r25, 0x7F	; 127
    1860:	80 e8       	ldi	r24, 0x80	; 128
    1862:	70 e0       	ldi	r23, 0x00	; 0
    1864:	60 e0       	ldi	r22, 0x00	; 0
    1866:	08 95       	ret

00001868 <__fp_nan>:
    1868:	9f ef       	ldi	r25, 0xFF	; 255
    186a:	80 ec       	ldi	r24, 0xC0	; 192
    186c:	08 95       	ret

0000186e <__fp_pscA>:
    186e:	00 24       	eor	r0, r0
    1870:	0a 94       	dec	r0
    1872:	16 16       	cp	r1, r22
    1874:	17 06       	cpc	r1, r23
    1876:	18 06       	cpc	r1, r24
    1878:	09 06       	cpc	r0, r25
    187a:	08 95       	ret

0000187c <__fp_pscB>:
    187c:	00 24       	eor	r0, r0
    187e:	0a 94       	dec	r0
    1880:	12 16       	cp	r1, r18
    1882:	13 06       	cpc	r1, r19
    1884:	14 06       	cpc	r1, r20
    1886:	05 06       	cpc	r0, r21
    1888:	08 95       	ret

0000188a <__fp_round>:
    188a:	09 2e       	mov	r0, r25
    188c:	03 94       	inc	r0
    188e:	00 0c       	add	r0, r0
    1890:	11 f4       	brne	.+4      	; 0x1896 <__fp_round+0xc>
    1892:	88 23       	and	r24, r24
    1894:	52 f0       	brmi	.+20     	; 0x18aa <__fp_round+0x20>
    1896:	bb 0f       	add	r27, r27
    1898:	40 f4       	brcc	.+16     	; 0x18aa <__fp_round+0x20>
    189a:	bf 2b       	or	r27, r31
    189c:	11 f4       	brne	.+4      	; 0x18a2 <__fp_round+0x18>
    189e:	60 ff       	sbrs	r22, 0
    18a0:	04 c0       	rjmp	.+8      	; 0x18aa <__fp_round+0x20>
    18a2:	6f 5f       	subi	r22, 0xFF	; 255
    18a4:	7f 4f       	sbci	r23, 0xFF	; 255
    18a6:	8f 4f       	sbci	r24, 0xFF	; 255
    18a8:	9f 4f       	sbci	r25, 0xFF	; 255
    18aa:	08 95       	ret

000018ac <__fp_split3>:
    18ac:	57 fd       	sbrc	r21, 7
    18ae:	90 58       	subi	r25, 0x80	; 128
    18b0:	44 0f       	add	r20, r20
    18b2:	55 1f       	adc	r21, r21
    18b4:	59 f0       	breq	.+22     	; 0x18cc <__fp_splitA+0x10>
    18b6:	5f 3f       	cpi	r21, 0xFF	; 255
    18b8:	71 f0       	breq	.+28     	; 0x18d6 <__fp_splitA+0x1a>
    18ba:	47 95       	ror	r20

000018bc <__fp_splitA>:
    18bc:	88 0f       	add	r24, r24
    18be:	97 fb       	bst	r25, 7
    18c0:	99 1f       	adc	r25, r25
    18c2:	61 f0       	breq	.+24     	; 0x18dc <__fp_splitA+0x20>
    18c4:	9f 3f       	cpi	r25, 0xFF	; 255
    18c6:	79 f0       	breq	.+30     	; 0x18e6 <__fp_splitA+0x2a>
    18c8:	87 95       	ror	r24
    18ca:	08 95       	ret
    18cc:	12 16       	cp	r1, r18
    18ce:	13 06       	cpc	r1, r19
    18d0:	14 06       	cpc	r1, r20
    18d2:	55 1f       	adc	r21, r21
    18d4:	f2 cf       	rjmp	.-28     	; 0x18ba <__fp_split3+0xe>
    18d6:	46 95       	lsr	r20
    18d8:	f1 df       	rcall	.-30     	; 0x18bc <__fp_splitA>
    18da:	08 c0       	rjmp	.+16     	; 0x18ec <__fp_splitA+0x30>
    18dc:	16 16       	cp	r1, r22
    18de:	17 06       	cpc	r1, r23
    18e0:	18 06       	cpc	r1, r24
    18e2:	99 1f       	adc	r25, r25
    18e4:	f1 cf       	rjmp	.-30     	; 0x18c8 <__fp_splitA+0xc>
    18e6:	86 95       	lsr	r24
    18e8:	71 05       	cpc	r23, r1
    18ea:	61 05       	cpc	r22, r1
    18ec:	08 94       	sec
    18ee:	08 95       	ret

000018f0 <__fp_zero>:
    18f0:	e8 94       	clt

000018f2 <__fp_szero>:
    18f2:	bb 27       	eor	r27, r27
    18f4:	66 27       	eor	r22, r22
    18f6:	77 27       	eor	r23, r23
    18f8:	cb 01       	movw	r24, r22
    18fa:	97 f9       	bld	r25, 7
    18fc:	08 95       	ret

000018fe <__gesf2>:
    18fe:	0e 94 0a 0c 	call	0x1814	; 0x1814 <__fp_cmp>
    1902:	08 f4       	brcc	.+2      	; 0x1906 <__gesf2+0x8>
    1904:	8f ef       	ldi	r24, 0xFF	; 255
    1906:	08 95       	ret

00001908 <__mulsf3>:
    1908:	0e 94 97 0c 	call	0x192e	; 0x192e <__mulsf3x>
    190c:	0c 94 45 0c 	jmp	0x188a	; 0x188a <__fp_round>
    1910:	0e 94 37 0c 	call	0x186e	; 0x186e <__fp_pscA>
    1914:	38 f0       	brcs	.+14     	; 0x1924 <__mulsf3+0x1c>
    1916:	0e 94 3e 0c 	call	0x187c	; 0x187c <__fp_pscB>
    191a:	20 f0       	brcs	.+8      	; 0x1924 <__mulsf3+0x1c>
    191c:	95 23       	and	r25, r21
    191e:	11 f0       	breq	.+4      	; 0x1924 <__mulsf3+0x1c>
    1920:	0c 94 2e 0c 	jmp	0x185c	; 0x185c <__fp_inf>
    1924:	0c 94 34 0c 	jmp	0x1868	; 0x1868 <__fp_nan>
    1928:	11 24       	eor	r1, r1
    192a:	0c 94 79 0c 	jmp	0x18f2	; 0x18f2 <__fp_szero>

0000192e <__mulsf3x>:
    192e:	0e 94 56 0c 	call	0x18ac	; 0x18ac <__fp_split3>
    1932:	70 f3       	brcs	.-36     	; 0x1910 <__mulsf3+0x8>

00001934 <__mulsf3_pse>:
    1934:	95 9f       	mul	r25, r21
    1936:	c1 f3       	breq	.-16     	; 0x1928 <__mulsf3+0x20>
    1938:	95 0f       	add	r25, r21
    193a:	50 e0       	ldi	r21, 0x00	; 0
    193c:	55 1f       	adc	r21, r21
    193e:	62 9f       	mul	r22, r18
    1940:	f0 01       	movw	r30, r0
    1942:	72 9f       	mul	r23, r18
    1944:	bb 27       	eor	r27, r27
    1946:	f0 0d       	add	r31, r0
    1948:	b1 1d       	adc	r27, r1
    194a:	63 9f       	mul	r22, r19
    194c:	aa 27       	eor	r26, r26
    194e:	f0 0d       	add	r31, r0
    1950:	b1 1d       	adc	r27, r1
    1952:	aa 1f       	adc	r26, r26
    1954:	64 9f       	mul	r22, r20
    1956:	66 27       	eor	r22, r22
    1958:	b0 0d       	add	r27, r0
    195a:	a1 1d       	adc	r26, r1
    195c:	66 1f       	adc	r22, r22
    195e:	82 9f       	mul	r24, r18
    1960:	22 27       	eor	r18, r18
    1962:	b0 0d       	add	r27, r0
    1964:	a1 1d       	adc	r26, r1
    1966:	62 1f       	adc	r22, r18
    1968:	73 9f       	mul	r23, r19
    196a:	b0 0d       	add	r27, r0
    196c:	a1 1d       	adc	r26, r1
    196e:	62 1f       	adc	r22, r18
    1970:	83 9f       	mul	r24, r19
    1972:	a0 0d       	add	r26, r0
    1974:	61 1d       	adc	r22, r1
    1976:	22 1f       	adc	r18, r18
    1978:	74 9f       	mul	r23, r20
    197a:	33 27       	eor	r19, r19
    197c:	a0 0d       	add	r26, r0
    197e:	61 1d       	adc	r22, r1
    1980:	23 1f       	adc	r18, r19
    1982:	84 9f       	mul	r24, r20
    1984:	60 0d       	add	r22, r0
    1986:	21 1d       	adc	r18, r1
    1988:	82 2f       	mov	r24, r18
    198a:	76 2f       	mov	r23, r22
    198c:	6a 2f       	mov	r22, r26
    198e:	11 24       	eor	r1, r1
    1990:	9f 57       	subi	r25, 0x7F	; 127
    1992:	50 40       	sbci	r21, 0x00	; 0
    1994:	9a f0       	brmi	.+38     	; 0x19bc <__mulsf3_pse+0x88>
    1996:	f1 f0       	breq	.+60     	; 0x19d4 <__mulsf3_pse+0xa0>
    1998:	88 23       	and	r24, r24
    199a:	4a f0       	brmi	.+18     	; 0x19ae <__mulsf3_pse+0x7a>
    199c:	ee 0f       	add	r30, r30
    199e:	ff 1f       	adc	r31, r31
    19a0:	bb 1f       	adc	r27, r27
    19a2:	66 1f       	adc	r22, r22
    19a4:	77 1f       	adc	r23, r23
    19a6:	88 1f       	adc	r24, r24
    19a8:	91 50       	subi	r25, 0x01	; 1
    19aa:	50 40       	sbci	r21, 0x00	; 0
    19ac:	a9 f7       	brne	.-22     	; 0x1998 <__mulsf3_pse+0x64>
    19ae:	9e 3f       	cpi	r25, 0xFE	; 254
    19b0:	51 05       	cpc	r21, r1
    19b2:	80 f0       	brcs	.+32     	; 0x19d4 <__mulsf3_pse+0xa0>
    19b4:	0c 94 2e 0c 	jmp	0x185c	; 0x185c <__fp_inf>
    19b8:	0c 94 79 0c 	jmp	0x18f2	; 0x18f2 <__fp_szero>
    19bc:	5f 3f       	cpi	r21, 0xFF	; 255
    19be:	e4 f3       	brlt	.-8      	; 0x19b8 <__mulsf3_pse+0x84>
    19c0:	98 3e       	cpi	r25, 0xE8	; 232
    19c2:	d4 f3       	brlt	.-12     	; 0x19b8 <__mulsf3_pse+0x84>
    19c4:	86 95       	lsr	r24
    19c6:	77 95       	ror	r23
    19c8:	67 95       	ror	r22
    19ca:	b7 95       	ror	r27
    19cc:	f7 95       	ror	r31
    19ce:	e7 95       	ror	r30
    19d0:	9f 5f       	subi	r25, 0xFF	; 255
    19d2:	c1 f7       	brne	.-16     	; 0x19c4 <__mulsf3_pse+0x90>
    19d4:	fe 2b       	or	r31, r30
    19d6:	88 0f       	add	r24, r24
    19d8:	91 1d       	adc	r25, r1
    19da:	96 95       	lsr	r25
    19dc:	87 95       	ror	r24
    19de:	97 f9       	bld	r25, 7
    19e0:	08 95       	ret

000019e2 <__divmodhi4>:
    19e2:	97 fb       	bst	r25, 7
    19e4:	07 2e       	mov	r0, r23
    19e6:	16 f4       	brtc	.+4      	; 0x19ec <__divmodhi4+0xa>
    19e8:	00 94       	com	r0
    19ea:	07 d0       	rcall	.+14     	; 0x19fa <__divmodhi4_neg1>
    19ec:	77 fd       	sbrc	r23, 7
    19ee:	09 d0       	rcall	.+18     	; 0x1a02 <__divmodhi4_neg2>
    19f0:	0e 94 27 0d 	call	0x1a4e	; 0x1a4e <__udivmodhi4>
    19f4:	07 fc       	sbrc	r0, 7
    19f6:	05 d0       	rcall	.+10     	; 0x1a02 <__divmodhi4_neg2>
    19f8:	3e f4       	brtc	.+14     	; 0x1a08 <__divmodhi4_exit>

000019fa <__divmodhi4_neg1>:
    19fa:	90 95       	com	r25
    19fc:	81 95       	neg	r24
    19fe:	9f 4f       	sbci	r25, 0xFF	; 255
    1a00:	08 95       	ret

00001a02 <__divmodhi4_neg2>:
    1a02:	70 95       	com	r23
    1a04:	61 95       	neg	r22
    1a06:	7f 4f       	sbci	r23, 0xFF	; 255

00001a08 <__divmodhi4_exit>:
    1a08:	08 95       	ret

00001a0a <__udivmodsi4>:
    1a0a:	a1 e2       	ldi	r26, 0x21	; 33
    1a0c:	1a 2e       	mov	r1, r26
    1a0e:	aa 1b       	sub	r26, r26
    1a10:	bb 1b       	sub	r27, r27
    1a12:	fd 01       	movw	r30, r26
    1a14:	0d c0       	rjmp	.+26     	; 0x1a30 <__udivmodsi4_ep>

00001a16 <__udivmodsi4_loop>:
    1a16:	aa 1f       	adc	r26, r26
    1a18:	bb 1f       	adc	r27, r27
    1a1a:	ee 1f       	adc	r30, r30
    1a1c:	ff 1f       	adc	r31, r31
    1a1e:	a2 17       	cp	r26, r18
    1a20:	b3 07       	cpc	r27, r19
    1a22:	e4 07       	cpc	r30, r20
    1a24:	f5 07       	cpc	r31, r21
    1a26:	20 f0       	brcs	.+8      	; 0x1a30 <__udivmodsi4_ep>
    1a28:	a2 1b       	sub	r26, r18
    1a2a:	b3 0b       	sbc	r27, r19
    1a2c:	e4 0b       	sbc	r30, r20
    1a2e:	f5 0b       	sbc	r31, r21

00001a30 <__udivmodsi4_ep>:
    1a30:	66 1f       	adc	r22, r22
    1a32:	77 1f       	adc	r23, r23
    1a34:	88 1f       	adc	r24, r24
    1a36:	99 1f       	adc	r25, r25
    1a38:	1a 94       	dec	r1
    1a3a:	69 f7       	brne	.-38     	; 0x1a16 <__udivmodsi4_loop>
    1a3c:	60 95       	com	r22
    1a3e:	70 95       	com	r23
    1a40:	80 95       	com	r24
    1a42:	90 95       	com	r25
    1a44:	9b 01       	movw	r18, r22
    1a46:	ac 01       	movw	r20, r24
    1a48:	bd 01       	movw	r22, r26
    1a4a:	cf 01       	movw	r24, r30
    1a4c:	08 95       	ret

00001a4e <__udivmodhi4>:
    1a4e:	aa 1b       	sub	r26, r26
    1a50:	bb 1b       	sub	r27, r27
    1a52:	51 e1       	ldi	r21, 0x11	; 17
    1a54:	07 c0       	rjmp	.+14     	; 0x1a64 <__udivmodhi4_ep>

00001a56 <__udivmodhi4_loop>:
    1a56:	aa 1f       	adc	r26, r26
    1a58:	bb 1f       	adc	r27, r27
    1a5a:	a6 17       	cp	r26, r22
    1a5c:	b7 07       	cpc	r27, r23
    1a5e:	10 f0       	brcs	.+4      	; 0x1a64 <__udivmodhi4_ep>
    1a60:	a6 1b       	sub	r26, r22
    1a62:	b7 0b       	sbc	r27, r23

00001a64 <__udivmodhi4_ep>:
    1a64:	88 1f       	adc	r24, r24
    1a66:	99 1f       	adc	r25, r25
    1a68:	5a 95       	dec	r21
    1a6a:	a9 f7       	brne	.-22     	; 0x1a56 <__udivmodhi4_loop>
    1a6c:	80 95       	com	r24
    1a6e:	90 95       	com	r25
    1a70:	bc 01       	movw	r22, r24
    1a72:	cd 01       	movw	r24, r26
    1a74:	08 95       	ret

00001a76 <dtostrf>:
    1a76:	ef 92       	push	r14
    1a78:	0f 93       	push	r16
    1a7a:	1f 93       	push	r17
    1a7c:	cf 93       	push	r28
    1a7e:	df 93       	push	r29
    1a80:	e8 01       	movw	r28, r16
    1a82:	47 fd       	sbrc	r20, 7
    1a84:	02 c0       	rjmp	.+4      	; 0x1a8a <dtostrf+0x14>
    1a86:	34 e0       	ldi	r19, 0x04	; 4
    1a88:	01 c0       	rjmp	.+2      	; 0x1a8c <dtostrf+0x16>
    1a8a:	34 e1       	ldi	r19, 0x14	; 20
    1a8c:	04 2e       	mov	r0, r20
    1a8e:	00 0c       	add	r0, r0
    1a90:	55 0b       	sbc	r21, r21
    1a92:	57 ff       	sbrs	r21, 7
    1a94:	03 c0       	rjmp	.+6      	; 0x1a9c <dtostrf+0x26>
    1a96:	51 95       	neg	r21
    1a98:	41 95       	neg	r20
    1a9a:	51 09       	sbc	r21, r1
    1a9c:	e3 2e       	mov	r14, r19
    1a9e:	02 2f       	mov	r16, r18
    1aa0:	24 2f       	mov	r18, r20
    1aa2:	ae 01       	movw	r20, r28
    1aa4:	0e 94 df 0f 	call	0x1fbe	; 0x1fbe <dtoa_prf>
    1aa8:	ce 01       	movw	r24, r28
    1aaa:	df 91       	pop	r29
    1aac:	cf 91       	pop	r28
    1aae:	1f 91       	pop	r17
    1ab0:	0f 91       	pop	r16
    1ab2:	ef 90       	pop	r14
    1ab4:	08 95       	ret

00001ab6 <do_rand>:
    1ab6:	8f 92       	push	r8
    1ab8:	9f 92       	push	r9
    1aba:	af 92       	push	r10
    1abc:	bf 92       	push	r11
    1abe:	cf 92       	push	r12
    1ac0:	df 92       	push	r13
    1ac2:	ef 92       	push	r14
    1ac4:	ff 92       	push	r15
    1ac6:	cf 93       	push	r28
    1ac8:	df 93       	push	r29
    1aca:	ec 01       	movw	r28, r24
    1acc:	68 81       	ld	r22, Y
    1ace:	79 81       	ldd	r23, Y+1	; 0x01
    1ad0:	8a 81       	ldd	r24, Y+2	; 0x02
    1ad2:	9b 81       	ldd	r25, Y+3	; 0x03
    1ad4:	61 15       	cp	r22, r1
    1ad6:	71 05       	cpc	r23, r1
    1ad8:	81 05       	cpc	r24, r1
    1ada:	91 05       	cpc	r25, r1
    1adc:	21 f4       	brne	.+8      	; 0x1ae6 <do_rand+0x30>
    1ade:	64 e2       	ldi	r22, 0x24	; 36
    1ae0:	79 ed       	ldi	r23, 0xD9	; 217
    1ae2:	8b e5       	ldi	r24, 0x5B	; 91
    1ae4:	97 e0       	ldi	r25, 0x07	; 7
    1ae6:	2d e1       	ldi	r18, 0x1D	; 29
    1ae8:	33 ef       	ldi	r19, 0xF3	; 243
    1aea:	41 e0       	ldi	r20, 0x01	; 1
    1aec:	50 e0       	ldi	r21, 0x00	; 0
    1aee:	0e 94 d1 12 	call	0x25a2	; 0x25a2 <__divmodsi4>
    1af2:	49 01       	movw	r8, r18
    1af4:	5a 01       	movw	r10, r20
    1af6:	9b 01       	movw	r18, r22
    1af8:	ac 01       	movw	r20, r24
    1afa:	a7 ea       	ldi	r26, 0xA7	; 167
    1afc:	b1 e4       	ldi	r27, 0x41	; 65
    1afe:	0e 94 f0 12 	call	0x25e0	; 0x25e0 <__muluhisi3>
    1b02:	6b 01       	movw	r12, r22
    1b04:	7c 01       	movw	r14, r24
    1b06:	ac ee       	ldi	r26, 0xEC	; 236
    1b08:	b4 ef       	ldi	r27, 0xF4	; 244
    1b0a:	a5 01       	movw	r20, r10
    1b0c:	94 01       	movw	r18, r8
    1b0e:	0e 94 fe 12 	call	0x25fc	; 0x25fc <__mulohisi3>
    1b12:	dc 01       	movw	r26, r24
    1b14:	cb 01       	movw	r24, r22
    1b16:	8c 0d       	add	r24, r12
    1b18:	9d 1d       	adc	r25, r13
    1b1a:	ae 1d       	adc	r26, r14
    1b1c:	bf 1d       	adc	r27, r15
    1b1e:	b7 ff       	sbrs	r27, 7
    1b20:	03 c0       	rjmp	.+6      	; 0x1b28 <do_rand+0x72>
    1b22:	01 97       	sbiw	r24, 0x01	; 1
    1b24:	a1 09       	sbc	r26, r1
    1b26:	b0 48       	sbci	r27, 0x80	; 128
    1b28:	88 83       	st	Y, r24
    1b2a:	99 83       	std	Y+1, r25	; 0x01
    1b2c:	aa 83       	std	Y+2, r26	; 0x02
    1b2e:	bb 83       	std	Y+3, r27	; 0x03
    1b30:	9f 77       	andi	r25, 0x7F	; 127
    1b32:	df 91       	pop	r29
    1b34:	cf 91       	pop	r28
    1b36:	ff 90       	pop	r15
    1b38:	ef 90       	pop	r14
    1b3a:	df 90       	pop	r13
    1b3c:	cf 90       	pop	r12
    1b3e:	bf 90       	pop	r11
    1b40:	af 90       	pop	r10
    1b42:	9f 90       	pop	r9
    1b44:	8f 90       	pop	r8
    1b46:	08 95       	ret

00001b48 <rand_r>:
    1b48:	0e 94 5b 0d 	call	0x1ab6	; 0x1ab6 <do_rand>
    1b4c:	08 95       	ret

00001b4e <rand>:
    1b4e:	80 e6       	ldi	r24, 0x60	; 96
    1b50:	90 e0       	ldi	r25, 0x00	; 0
    1b52:	0e 94 5b 0d 	call	0x1ab6	; 0x1ab6 <do_rand>
    1b56:	08 95       	ret

00001b58 <srand>:
    1b58:	a0 e0       	ldi	r26, 0x00	; 0
    1b5a:	b0 e0       	ldi	r27, 0x00	; 0
    1b5c:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__data_start>
    1b60:	90 93 61 00 	sts	0x0061, r25	; 0x800061 <__data_start+0x1>
    1b64:	a0 93 62 00 	sts	0x0062, r26	; 0x800062 <__data_start+0x2>
    1b68:	b0 93 63 00 	sts	0x0063, r27	; 0x800063 <__data_start+0x3>
    1b6c:	08 95       	ret

00001b6e <__itoa_ncheck>:
    1b6e:	bb 27       	eor	r27, r27
    1b70:	4a 30       	cpi	r20, 0x0A	; 10
    1b72:	31 f4       	brne	.+12     	; 0x1b80 <__itoa_ncheck+0x12>
    1b74:	99 23       	and	r25, r25
    1b76:	22 f4       	brpl	.+8      	; 0x1b80 <__itoa_ncheck+0x12>
    1b78:	bd e2       	ldi	r27, 0x2D	; 45
    1b7a:	90 95       	com	r25
    1b7c:	81 95       	neg	r24
    1b7e:	9f 4f       	sbci	r25, 0xFF	; 255
    1b80:	0c 94 c3 0d 	jmp	0x1b86	; 0x1b86 <__utoa_common>

00001b84 <__utoa_ncheck>:
    1b84:	bb 27       	eor	r27, r27

00001b86 <__utoa_common>:
    1b86:	fb 01       	movw	r30, r22
    1b88:	55 27       	eor	r21, r21
    1b8a:	aa 27       	eor	r26, r26
    1b8c:	88 0f       	add	r24, r24
    1b8e:	99 1f       	adc	r25, r25
    1b90:	aa 1f       	adc	r26, r26
    1b92:	a4 17       	cp	r26, r20
    1b94:	10 f0       	brcs	.+4      	; 0x1b9a <__utoa_common+0x14>
    1b96:	a4 1b       	sub	r26, r20
    1b98:	83 95       	inc	r24
    1b9a:	50 51       	subi	r21, 0x10	; 16
    1b9c:	b9 f7       	brne	.-18     	; 0x1b8c <__utoa_common+0x6>
    1b9e:	a0 5d       	subi	r26, 0xD0	; 208
    1ba0:	aa 33       	cpi	r26, 0x3A	; 58
    1ba2:	08 f0       	brcs	.+2      	; 0x1ba6 <__utoa_common+0x20>
    1ba4:	a9 5d       	subi	r26, 0xD9	; 217
    1ba6:	a1 93       	st	Z+, r26
    1ba8:	00 97       	sbiw	r24, 0x00	; 0
    1baa:	79 f7       	brne	.-34     	; 0x1b8a <__utoa_common+0x4>
    1bac:	b1 11       	cpse	r27, r1
    1bae:	b1 93       	st	Z+, r27
    1bb0:	11 92       	st	Z+, r1
    1bb2:	cb 01       	movw	r24, r22
    1bb4:	0c 94 27 12 	jmp	0x244e	; 0x244e <strrev>

00001bb8 <sprintf>:
    1bb8:	ae e0       	ldi	r26, 0x0E	; 14
    1bba:	b0 e0       	ldi	r27, 0x00	; 0
    1bbc:	e2 ee       	ldi	r30, 0xE2	; 226
    1bbe:	fd e0       	ldi	r31, 0x0D	; 13
    1bc0:	0c 94 11 13 	jmp	0x2622	; 0x2622 <__prologue_saves__+0x1c>
    1bc4:	0d 89       	ldd	r16, Y+21	; 0x15
    1bc6:	1e 89       	ldd	r17, Y+22	; 0x16
    1bc8:	86 e0       	ldi	r24, 0x06	; 6
    1bca:	8c 83       	std	Y+4, r24	; 0x04
    1bcc:	1a 83       	std	Y+2, r17	; 0x02
    1bce:	09 83       	std	Y+1, r16	; 0x01
    1bd0:	8f ef       	ldi	r24, 0xFF	; 255
    1bd2:	9f e7       	ldi	r25, 0x7F	; 127
    1bd4:	9e 83       	std	Y+6, r25	; 0x06
    1bd6:	8d 83       	std	Y+5, r24	; 0x05
    1bd8:	ae 01       	movw	r20, r28
    1bda:	47 5e       	subi	r20, 0xE7	; 231
    1bdc:	5f 4f       	sbci	r21, 0xFF	; 255
    1bde:	6f 89       	ldd	r22, Y+23	; 0x17
    1be0:	78 8d       	ldd	r23, Y+24	; 0x18
    1be2:	ce 01       	movw	r24, r28
    1be4:	01 96       	adiw	r24, 0x01	; 1
    1be6:	0e 94 fe 0d 	call	0x1bfc	; 0x1bfc <vfprintf>
    1bea:	ef 81       	ldd	r30, Y+7	; 0x07
    1bec:	f8 85       	ldd	r31, Y+8	; 0x08
    1bee:	e0 0f       	add	r30, r16
    1bf0:	f1 1f       	adc	r31, r17
    1bf2:	10 82       	st	Z, r1
    1bf4:	2e 96       	adiw	r28, 0x0e	; 14
    1bf6:	e4 e0       	ldi	r30, 0x04	; 4
    1bf8:	0c 94 2d 13 	jmp	0x265a	; 0x265a <__epilogue_restores__+0x1c>

00001bfc <vfprintf>:
    1bfc:	ab e0       	ldi	r26, 0x0B	; 11
    1bfe:	b0 e0       	ldi	r27, 0x00	; 0
    1c00:	e4 e0       	ldi	r30, 0x04	; 4
    1c02:	fe e0       	ldi	r31, 0x0E	; 14
    1c04:	0c 94 03 13 	jmp	0x2606	; 0x2606 <__prologue_saves__>
    1c08:	6c 01       	movw	r12, r24
    1c0a:	7b 01       	movw	r14, r22
    1c0c:	8a 01       	movw	r16, r20
    1c0e:	fc 01       	movw	r30, r24
    1c10:	17 82       	std	Z+7, r1	; 0x07
    1c12:	16 82       	std	Z+6, r1	; 0x06
    1c14:	83 81       	ldd	r24, Z+3	; 0x03
    1c16:	81 ff       	sbrs	r24, 1
    1c18:	cc c1       	rjmp	.+920    	; 0x1fb2 <vfprintf+0x3b6>
    1c1a:	ce 01       	movw	r24, r28
    1c1c:	01 96       	adiw	r24, 0x01	; 1
    1c1e:	3c 01       	movw	r6, r24
    1c20:	f6 01       	movw	r30, r12
    1c22:	93 81       	ldd	r25, Z+3	; 0x03
    1c24:	f7 01       	movw	r30, r14
    1c26:	93 fd       	sbrc	r25, 3
    1c28:	85 91       	lpm	r24, Z+
    1c2a:	93 ff       	sbrs	r25, 3
    1c2c:	81 91       	ld	r24, Z+
    1c2e:	7f 01       	movw	r14, r30
    1c30:	88 23       	and	r24, r24
    1c32:	09 f4       	brne	.+2      	; 0x1c36 <vfprintf+0x3a>
    1c34:	ba c1       	rjmp	.+884    	; 0x1faa <vfprintf+0x3ae>
    1c36:	85 32       	cpi	r24, 0x25	; 37
    1c38:	39 f4       	brne	.+14     	; 0x1c48 <vfprintf+0x4c>
    1c3a:	93 fd       	sbrc	r25, 3
    1c3c:	85 91       	lpm	r24, Z+
    1c3e:	93 ff       	sbrs	r25, 3
    1c40:	81 91       	ld	r24, Z+
    1c42:	7f 01       	movw	r14, r30
    1c44:	85 32       	cpi	r24, 0x25	; 37
    1c46:	29 f4       	brne	.+10     	; 0x1c52 <vfprintf+0x56>
    1c48:	b6 01       	movw	r22, r12
    1c4a:	90 e0       	ldi	r25, 0x00	; 0
    1c4c:	0e 94 37 12 	call	0x246e	; 0x246e <fputc>
    1c50:	e7 cf       	rjmp	.-50     	; 0x1c20 <vfprintf+0x24>
    1c52:	91 2c       	mov	r9, r1
    1c54:	21 2c       	mov	r2, r1
    1c56:	31 2c       	mov	r3, r1
    1c58:	ff e1       	ldi	r31, 0x1F	; 31
    1c5a:	f3 15       	cp	r31, r3
    1c5c:	d8 f0       	brcs	.+54     	; 0x1c94 <vfprintf+0x98>
    1c5e:	8b 32       	cpi	r24, 0x2B	; 43
    1c60:	79 f0       	breq	.+30     	; 0x1c80 <vfprintf+0x84>
    1c62:	38 f4       	brcc	.+14     	; 0x1c72 <vfprintf+0x76>
    1c64:	80 32       	cpi	r24, 0x20	; 32
    1c66:	79 f0       	breq	.+30     	; 0x1c86 <vfprintf+0x8a>
    1c68:	83 32       	cpi	r24, 0x23	; 35
    1c6a:	a1 f4       	brne	.+40     	; 0x1c94 <vfprintf+0x98>
    1c6c:	23 2d       	mov	r18, r3
    1c6e:	20 61       	ori	r18, 0x10	; 16
    1c70:	1d c0       	rjmp	.+58     	; 0x1cac <vfprintf+0xb0>
    1c72:	8d 32       	cpi	r24, 0x2D	; 45
    1c74:	61 f0       	breq	.+24     	; 0x1c8e <vfprintf+0x92>
    1c76:	80 33       	cpi	r24, 0x30	; 48
    1c78:	69 f4       	brne	.+26     	; 0x1c94 <vfprintf+0x98>
    1c7a:	23 2d       	mov	r18, r3
    1c7c:	21 60       	ori	r18, 0x01	; 1
    1c7e:	16 c0       	rjmp	.+44     	; 0x1cac <vfprintf+0xb0>
    1c80:	83 2d       	mov	r24, r3
    1c82:	82 60       	ori	r24, 0x02	; 2
    1c84:	38 2e       	mov	r3, r24
    1c86:	e3 2d       	mov	r30, r3
    1c88:	e4 60       	ori	r30, 0x04	; 4
    1c8a:	3e 2e       	mov	r3, r30
    1c8c:	2a c0       	rjmp	.+84     	; 0x1ce2 <vfprintf+0xe6>
    1c8e:	f3 2d       	mov	r31, r3
    1c90:	f8 60       	ori	r31, 0x08	; 8
    1c92:	1d c0       	rjmp	.+58     	; 0x1cce <vfprintf+0xd2>
    1c94:	37 fc       	sbrc	r3, 7
    1c96:	2d c0       	rjmp	.+90     	; 0x1cf2 <vfprintf+0xf6>
    1c98:	20 ed       	ldi	r18, 0xD0	; 208
    1c9a:	28 0f       	add	r18, r24
    1c9c:	2a 30       	cpi	r18, 0x0A	; 10
    1c9e:	40 f0       	brcs	.+16     	; 0x1cb0 <vfprintf+0xb4>
    1ca0:	8e 32       	cpi	r24, 0x2E	; 46
    1ca2:	b9 f4       	brne	.+46     	; 0x1cd2 <vfprintf+0xd6>
    1ca4:	36 fc       	sbrc	r3, 6
    1ca6:	81 c1       	rjmp	.+770    	; 0x1faa <vfprintf+0x3ae>
    1ca8:	23 2d       	mov	r18, r3
    1caa:	20 64       	ori	r18, 0x40	; 64
    1cac:	32 2e       	mov	r3, r18
    1cae:	19 c0       	rjmp	.+50     	; 0x1ce2 <vfprintf+0xe6>
    1cb0:	36 fe       	sbrs	r3, 6
    1cb2:	06 c0       	rjmp	.+12     	; 0x1cc0 <vfprintf+0xc4>
    1cb4:	8a e0       	ldi	r24, 0x0A	; 10
    1cb6:	98 9e       	mul	r9, r24
    1cb8:	20 0d       	add	r18, r0
    1cba:	11 24       	eor	r1, r1
    1cbc:	92 2e       	mov	r9, r18
    1cbe:	11 c0       	rjmp	.+34     	; 0x1ce2 <vfprintf+0xe6>
    1cc0:	ea e0       	ldi	r30, 0x0A	; 10
    1cc2:	2e 9e       	mul	r2, r30
    1cc4:	20 0d       	add	r18, r0
    1cc6:	11 24       	eor	r1, r1
    1cc8:	22 2e       	mov	r2, r18
    1cca:	f3 2d       	mov	r31, r3
    1ccc:	f0 62       	ori	r31, 0x20	; 32
    1cce:	3f 2e       	mov	r3, r31
    1cd0:	08 c0       	rjmp	.+16     	; 0x1ce2 <vfprintf+0xe6>
    1cd2:	8c 36       	cpi	r24, 0x6C	; 108
    1cd4:	21 f4       	brne	.+8      	; 0x1cde <vfprintf+0xe2>
    1cd6:	83 2d       	mov	r24, r3
    1cd8:	80 68       	ori	r24, 0x80	; 128
    1cda:	38 2e       	mov	r3, r24
    1cdc:	02 c0       	rjmp	.+4      	; 0x1ce2 <vfprintf+0xe6>
    1cde:	88 36       	cpi	r24, 0x68	; 104
    1ce0:	41 f4       	brne	.+16     	; 0x1cf2 <vfprintf+0xf6>
    1ce2:	f7 01       	movw	r30, r14
    1ce4:	93 fd       	sbrc	r25, 3
    1ce6:	85 91       	lpm	r24, Z+
    1ce8:	93 ff       	sbrs	r25, 3
    1cea:	81 91       	ld	r24, Z+
    1cec:	7f 01       	movw	r14, r30
    1cee:	81 11       	cpse	r24, r1
    1cf0:	b3 cf       	rjmp	.-154    	; 0x1c58 <vfprintf+0x5c>
    1cf2:	98 2f       	mov	r25, r24
    1cf4:	9f 7d       	andi	r25, 0xDF	; 223
    1cf6:	95 54       	subi	r25, 0x45	; 69
    1cf8:	93 30       	cpi	r25, 0x03	; 3
    1cfa:	28 f4       	brcc	.+10     	; 0x1d06 <vfprintf+0x10a>
    1cfc:	0c 5f       	subi	r16, 0xFC	; 252
    1cfe:	1f 4f       	sbci	r17, 0xFF	; 255
    1d00:	9f e3       	ldi	r25, 0x3F	; 63
    1d02:	99 83       	std	Y+1, r25	; 0x01
    1d04:	0d c0       	rjmp	.+26     	; 0x1d20 <vfprintf+0x124>
    1d06:	83 36       	cpi	r24, 0x63	; 99
    1d08:	31 f0       	breq	.+12     	; 0x1d16 <vfprintf+0x11a>
    1d0a:	83 37       	cpi	r24, 0x73	; 115
    1d0c:	71 f0       	breq	.+28     	; 0x1d2a <vfprintf+0x12e>
    1d0e:	83 35       	cpi	r24, 0x53	; 83
    1d10:	09 f0       	breq	.+2      	; 0x1d14 <vfprintf+0x118>
    1d12:	59 c0       	rjmp	.+178    	; 0x1dc6 <vfprintf+0x1ca>
    1d14:	21 c0       	rjmp	.+66     	; 0x1d58 <vfprintf+0x15c>
    1d16:	f8 01       	movw	r30, r16
    1d18:	80 81       	ld	r24, Z
    1d1a:	89 83       	std	Y+1, r24	; 0x01
    1d1c:	0e 5f       	subi	r16, 0xFE	; 254
    1d1e:	1f 4f       	sbci	r17, 0xFF	; 255
    1d20:	88 24       	eor	r8, r8
    1d22:	83 94       	inc	r8
    1d24:	91 2c       	mov	r9, r1
    1d26:	53 01       	movw	r10, r6
    1d28:	13 c0       	rjmp	.+38     	; 0x1d50 <vfprintf+0x154>
    1d2a:	28 01       	movw	r4, r16
    1d2c:	f2 e0       	ldi	r31, 0x02	; 2
    1d2e:	4f 0e       	add	r4, r31
    1d30:	51 1c       	adc	r5, r1
    1d32:	f8 01       	movw	r30, r16
    1d34:	a0 80       	ld	r10, Z
    1d36:	b1 80       	ldd	r11, Z+1	; 0x01
    1d38:	36 fe       	sbrs	r3, 6
    1d3a:	03 c0       	rjmp	.+6      	; 0x1d42 <vfprintf+0x146>
    1d3c:	69 2d       	mov	r22, r9
    1d3e:	70 e0       	ldi	r23, 0x00	; 0
    1d40:	02 c0       	rjmp	.+4      	; 0x1d46 <vfprintf+0x14a>
    1d42:	6f ef       	ldi	r22, 0xFF	; 255
    1d44:	7f ef       	ldi	r23, 0xFF	; 255
    1d46:	c5 01       	movw	r24, r10
    1d48:	0e 94 1c 12 	call	0x2438	; 0x2438 <strnlen>
    1d4c:	4c 01       	movw	r8, r24
    1d4e:	82 01       	movw	r16, r4
    1d50:	f3 2d       	mov	r31, r3
    1d52:	ff 77       	andi	r31, 0x7F	; 127
    1d54:	3f 2e       	mov	r3, r31
    1d56:	16 c0       	rjmp	.+44     	; 0x1d84 <vfprintf+0x188>
    1d58:	28 01       	movw	r4, r16
    1d5a:	22 e0       	ldi	r18, 0x02	; 2
    1d5c:	42 0e       	add	r4, r18
    1d5e:	51 1c       	adc	r5, r1
    1d60:	f8 01       	movw	r30, r16
    1d62:	a0 80       	ld	r10, Z
    1d64:	b1 80       	ldd	r11, Z+1	; 0x01
    1d66:	36 fe       	sbrs	r3, 6
    1d68:	03 c0       	rjmp	.+6      	; 0x1d70 <vfprintf+0x174>
    1d6a:	69 2d       	mov	r22, r9
    1d6c:	70 e0       	ldi	r23, 0x00	; 0
    1d6e:	02 c0       	rjmp	.+4      	; 0x1d74 <vfprintf+0x178>
    1d70:	6f ef       	ldi	r22, 0xFF	; 255
    1d72:	7f ef       	ldi	r23, 0xFF	; 255
    1d74:	c5 01       	movw	r24, r10
    1d76:	0e 94 11 12 	call	0x2422	; 0x2422 <strnlen_P>
    1d7a:	4c 01       	movw	r8, r24
    1d7c:	f3 2d       	mov	r31, r3
    1d7e:	f0 68       	ori	r31, 0x80	; 128
    1d80:	3f 2e       	mov	r3, r31
    1d82:	82 01       	movw	r16, r4
    1d84:	33 fc       	sbrc	r3, 3
    1d86:	1b c0       	rjmp	.+54     	; 0x1dbe <vfprintf+0x1c2>
    1d88:	82 2d       	mov	r24, r2
    1d8a:	90 e0       	ldi	r25, 0x00	; 0
    1d8c:	88 16       	cp	r8, r24
    1d8e:	99 06       	cpc	r9, r25
    1d90:	b0 f4       	brcc	.+44     	; 0x1dbe <vfprintf+0x1c2>
    1d92:	b6 01       	movw	r22, r12
    1d94:	80 e2       	ldi	r24, 0x20	; 32
    1d96:	90 e0       	ldi	r25, 0x00	; 0
    1d98:	0e 94 37 12 	call	0x246e	; 0x246e <fputc>
    1d9c:	2a 94       	dec	r2
    1d9e:	f4 cf       	rjmp	.-24     	; 0x1d88 <vfprintf+0x18c>
    1da0:	f5 01       	movw	r30, r10
    1da2:	37 fc       	sbrc	r3, 7
    1da4:	85 91       	lpm	r24, Z+
    1da6:	37 fe       	sbrs	r3, 7
    1da8:	81 91       	ld	r24, Z+
    1daa:	5f 01       	movw	r10, r30
    1dac:	b6 01       	movw	r22, r12
    1dae:	90 e0       	ldi	r25, 0x00	; 0
    1db0:	0e 94 37 12 	call	0x246e	; 0x246e <fputc>
    1db4:	21 10       	cpse	r2, r1
    1db6:	2a 94       	dec	r2
    1db8:	21 e0       	ldi	r18, 0x01	; 1
    1dba:	82 1a       	sub	r8, r18
    1dbc:	91 08       	sbc	r9, r1
    1dbe:	81 14       	cp	r8, r1
    1dc0:	91 04       	cpc	r9, r1
    1dc2:	71 f7       	brne	.-36     	; 0x1da0 <vfprintf+0x1a4>
    1dc4:	e8 c0       	rjmp	.+464    	; 0x1f96 <vfprintf+0x39a>
    1dc6:	84 36       	cpi	r24, 0x64	; 100
    1dc8:	11 f0       	breq	.+4      	; 0x1dce <vfprintf+0x1d2>
    1dca:	89 36       	cpi	r24, 0x69	; 105
    1dcc:	41 f5       	brne	.+80     	; 0x1e1e <vfprintf+0x222>
    1dce:	f8 01       	movw	r30, r16
    1dd0:	37 fe       	sbrs	r3, 7
    1dd2:	07 c0       	rjmp	.+14     	; 0x1de2 <vfprintf+0x1e6>
    1dd4:	60 81       	ld	r22, Z
    1dd6:	71 81       	ldd	r23, Z+1	; 0x01
    1dd8:	82 81       	ldd	r24, Z+2	; 0x02
    1dda:	93 81       	ldd	r25, Z+3	; 0x03
    1ddc:	0c 5f       	subi	r16, 0xFC	; 252
    1dde:	1f 4f       	sbci	r17, 0xFF	; 255
    1de0:	08 c0       	rjmp	.+16     	; 0x1df2 <vfprintf+0x1f6>
    1de2:	60 81       	ld	r22, Z
    1de4:	71 81       	ldd	r23, Z+1	; 0x01
    1de6:	07 2e       	mov	r0, r23
    1de8:	00 0c       	add	r0, r0
    1dea:	88 0b       	sbc	r24, r24
    1dec:	99 0b       	sbc	r25, r25
    1dee:	0e 5f       	subi	r16, 0xFE	; 254
    1df0:	1f 4f       	sbci	r17, 0xFF	; 255
    1df2:	f3 2d       	mov	r31, r3
    1df4:	ff 76       	andi	r31, 0x6F	; 111
    1df6:	3f 2e       	mov	r3, r31
    1df8:	97 ff       	sbrs	r25, 7
    1dfa:	09 c0       	rjmp	.+18     	; 0x1e0e <vfprintf+0x212>
    1dfc:	90 95       	com	r25
    1dfe:	80 95       	com	r24
    1e00:	70 95       	com	r23
    1e02:	61 95       	neg	r22
    1e04:	7f 4f       	sbci	r23, 0xFF	; 255
    1e06:	8f 4f       	sbci	r24, 0xFF	; 255
    1e08:	9f 4f       	sbci	r25, 0xFF	; 255
    1e0a:	f0 68       	ori	r31, 0x80	; 128
    1e0c:	3f 2e       	mov	r3, r31
    1e0e:	2a e0       	ldi	r18, 0x0A	; 10
    1e10:	30 e0       	ldi	r19, 0x00	; 0
    1e12:	a3 01       	movw	r20, r6
    1e14:	0e 94 73 12 	call	0x24e6	; 0x24e6 <__ultoa_invert>
    1e18:	88 2e       	mov	r8, r24
    1e1a:	86 18       	sub	r8, r6
    1e1c:	45 c0       	rjmp	.+138    	; 0x1ea8 <vfprintf+0x2ac>
    1e1e:	85 37       	cpi	r24, 0x75	; 117
    1e20:	31 f4       	brne	.+12     	; 0x1e2e <vfprintf+0x232>
    1e22:	23 2d       	mov	r18, r3
    1e24:	2f 7e       	andi	r18, 0xEF	; 239
    1e26:	b2 2e       	mov	r11, r18
    1e28:	2a e0       	ldi	r18, 0x0A	; 10
    1e2a:	30 e0       	ldi	r19, 0x00	; 0
    1e2c:	25 c0       	rjmp	.+74     	; 0x1e78 <vfprintf+0x27c>
    1e2e:	93 2d       	mov	r25, r3
    1e30:	99 7f       	andi	r25, 0xF9	; 249
    1e32:	b9 2e       	mov	r11, r25
    1e34:	8f 36       	cpi	r24, 0x6F	; 111
    1e36:	c1 f0       	breq	.+48     	; 0x1e68 <vfprintf+0x26c>
    1e38:	18 f4       	brcc	.+6      	; 0x1e40 <vfprintf+0x244>
    1e3a:	88 35       	cpi	r24, 0x58	; 88
    1e3c:	79 f0       	breq	.+30     	; 0x1e5c <vfprintf+0x260>
    1e3e:	b5 c0       	rjmp	.+362    	; 0x1faa <vfprintf+0x3ae>
    1e40:	80 37       	cpi	r24, 0x70	; 112
    1e42:	19 f0       	breq	.+6      	; 0x1e4a <vfprintf+0x24e>
    1e44:	88 37       	cpi	r24, 0x78	; 120
    1e46:	21 f0       	breq	.+8      	; 0x1e50 <vfprintf+0x254>
    1e48:	b0 c0       	rjmp	.+352    	; 0x1faa <vfprintf+0x3ae>
    1e4a:	e9 2f       	mov	r30, r25
    1e4c:	e0 61       	ori	r30, 0x10	; 16
    1e4e:	be 2e       	mov	r11, r30
    1e50:	b4 fe       	sbrs	r11, 4
    1e52:	0d c0       	rjmp	.+26     	; 0x1e6e <vfprintf+0x272>
    1e54:	fb 2d       	mov	r31, r11
    1e56:	f4 60       	ori	r31, 0x04	; 4
    1e58:	bf 2e       	mov	r11, r31
    1e5a:	09 c0       	rjmp	.+18     	; 0x1e6e <vfprintf+0x272>
    1e5c:	34 fe       	sbrs	r3, 4
    1e5e:	0a c0       	rjmp	.+20     	; 0x1e74 <vfprintf+0x278>
    1e60:	29 2f       	mov	r18, r25
    1e62:	26 60       	ori	r18, 0x06	; 6
    1e64:	b2 2e       	mov	r11, r18
    1e66:	06 c0       	rjmp	.+12     	; 0x1e74 <vfprintf+0x278>
    1e68:	28 e0       	ldi	r18, 0x08	; 8
    1e6a:	30 e0       	ldi	r19, 0x00	; 0
    1e6c:	05 c0       	rjmp	.+10     	; 0x1e78 <vfprintf+0x27c>
    1e6e:	20 e1       	ldi	r18, 0x10	; 16
    1e70:	30 e0       	ldi	r19, 0x00	; 0
    1e72:	02 c0       	rjmp	.+4      	; 0x1e78 <vfprintf+0x27c>
    1e74:	20 e1       	ldi	r18, 0x10	; 16
    1e76:	32 e0       	ldi	r19, 0x02	; 2
    1e78:	f8 01       	movw	r30, r16
    1e7a:	b7 fe       	sbrs	r11, 7
    1e7c:	07 c0       	rjmp	.+14     	; 0x1e8c <vfprintf+0x290>
    1e7e:	60 81       	ld	r22, Z
    1e80:	71 81       	ldd	r23, Z+1	; 0x01
    1e82:	82 81       	ldd	r24, Z+2	; 0x02
    1e84:	93 81       	ldd	r25, Z+3	; 0x03
    1e86:	0c 5f       	subi	r16, 0xFC	; 252
    1e88:	1f 4f       	sbci	r17, 0xFF	; 255
    1e8a:	06 c0       	rjmp	.+12     	; 0x1e98 <vfprintf+0x29c>
    1e8c:	60 81       	ld	r22, Z
    1e8e:	71 81       	ldd	r23, Z+1	; 0x01
    1e90:	80 e0       	ldi	r24, 0x00	; 0
    1e92:	90 e0       	ldi	r25, 0x00	; 0
    1e94:	0e 5f       	subi	r16, 0xFE	; 254
    1e96:	1f 4f       	sbci	r17, 0xFF	; 255
    1e98:	a3 01       	movw	r20, r6
    1e9a:	0e 94 73 12 	call	0x24e6	; 0x24e6 <__ultoa_invert>
    1e9e:	88 2e       	mov	r8, r24
    1ea0:	86 18       	sub	r8, r6
    1ea2:	fb 2d       	mov	r31, r11
    1ea4:	ff 77       	andi	r31, 0x7F	; 127
    1ea6:	3f 2e       	mov	r3, r31
    1ea8:	36 fe       	sbrs	r3, 6
    1eaa:	0d c0       	rjmp	.+26     	; 0x1ec6 <vfprintf+0x2ca>
    1eac:	23 2d       	mov	r18, r3
    1eae:	2e 7f       	andi	r18, 0xFE	; 254
    1eb0:	a2 2e       	mov	r10, r18
    1eb2:	89 14       	cp	r8, r9
    1eb4:	58 f4       	brcc	.+22     	; 0x1ecc <vfprintf+0x2d0>
    1eb6:	34 fe       	sbrs	r3, 4
    1eb8:	0b c0       	rjmp	.+22     	; 0x1ed0 <vfprintf+0x2d4>
    1eba:	32 fc       	sbrc	r3, 2
    1ebc:	09 c0       	rjmp	.+18     	; 0x1ed0 <vfprintf+0x2d4>
    1ebe:	83 2d       	mov	r24, r3
    1ec0:	8e 7e       	andi	r24, 0xEE	; 238
    1ec2:	a8 2e       	mov	r10, r24
    1ec4:	05 c0       	rjmp	.+10     	; 0x1ed0 <vfprintf+0x2d4>
    1ec6:	b8 2c       	mov	r11, r8
    1ec8:	a3 2c       	mov	r10, r3
    1eca:	03 c0       	rjmp	.+6      	; 0x1ed2 <vfprintf+0x2d6>
    1ecc:	b8 2c       	mov	r11, r8
    1ece:	01 c0       	rjmp	.+2      	; 0x1ed2 <vfprintf+0x2d6>
    1ed0:	b9 2c       	mov	r11, r9
    1ed2:	a4 fe       	sbrs	r10, 4
    1ed4:	0f c0       	rjmp	.+30     	; 0x1ef4 <vfprintf+0x2f8>
    1ed6:	fe 01       	movw	r30, r28
    1ed8:	e8 0d       	add	r30, r8
    1eda:	f1 1d       	adc	r31, r1
    1edc:	80 81       	ld	r24, Z
    1ede:	80 33       	cpi	r24, 0x30	; 48
    1ee0:	21 f4       	brne	.+8      	; 0x1eea <vfprintf+0x2ee>
    1ee2:	9a 2d       	mov	r25, r10
    1ee4:	99 7e       	andi	r25, 0xE9	; 233
    1ee6:	a9 2e       	mov	r10, r25
    1ee8:	09 c0       	rjmp	.+18     	; 0x1efc <vfprintf+0x300>
    1eea:	a2 fe       	sbrs	r10, 2
    1eec:	06 c0       	rjmp	.+12     	; 0x1efa <vfprintf+0x2fe>
    1eee:	b3 94       	inc	r11
    1ef0:	b3 94       	inc	r11
    1ef2:	04 c0       	rjmp	.+8      	; 0x1efc <vfprintf+0x300>
    1ef4:	8a 2d       	mov	r24, r10
    1ef6:	86 78       	andi	r24, 0x86	; 134
    1ef8:	09 f0       	breq	.+2      	; 0x1efc <vfprintf+0x300>
    1efa:	b3 94       	inc	r11
    1efc:	a3 fc       	sbrc	r10, 3
    1efe:	11 c0       	rjmp	.+34     	; 0x1f22 <vfprintf+0x326>
    1f00:	a0 fe       	sbrs	r10, 0
    1f02:	06 c0       	rjmp	.+12     	; 0x1f10 <vfprintf+0x314>
    1f04:	b2 14       	cp	r11, r2
    1f06:	88 f4       	brcc	.+34     	; 0x1f2a <vfprintf+0x32e>
    1f08:	28 0c       	add	r2, r8
    1f0a:	92 2c       	mov	r9, r2
    1f0c:	9b 18       	sub	r9, r11
    1f0e:	0e c0       	rjmp	.+28     	; 0x1f2c <vfprintf+0x330>
    1f10:	b2 14       	cp	r11, r2
    1f12:	60 f4       	brcc	.+24     	; 0x1f2c <vfprintf+0x330>
    1f14:	b6 01       	movw	r22, r12
    1f16:	80 e2       	ldi	r24, 0x20	; 32
    1f18:	90 e0       	ldi	r25, 0x00	; 0
    1f1a:	0e 94 37 12 	call	0x246e	; 0x246e <fputc>
    1f1e:	b3 94       	inc	r11
    1f20:	f7 cf       	rjmp	.-18     	; 0x1f10 <vfprintf+0x314>
    1f22:	b2 14       	cp	r11, r2
    1f24:	18 f4       	brcc	.+6      	; 0x1f2c <vfprintf+0x330>
    1f26:	2b 18       	sub	r2, r11
    1f28:	02 c0       	rjmp	.+4      	; 0x1f2e <vfprintf+0x332>
    1f2a:	98 2c       	mov	r9, r8
    1f2c:	21 2c       	mov	r2, r1
    1f2e:	a4 fe       	sbrs	r10, 4
    1f30:	10 c0       	rjmp	.+32     	; 0x1f52 <vfprintf+0x356>
    1f32:	b6 01       	movw	r22, r12
    1f34:	80 e3       	ldi	r24, 0x30	; 48
    1f36:	90 e0       	ldi	r25, 0x00	; 0
    1f38:	0e 94 37 12 	call	0x246e	; 0x246e <fputc>
    1f3c:	a2 fe       	sbrs	r10, 2
    1f3e:	17 c0       	rjmp	.+46     	; 0x1f6e <vfprintf+0x372>
    1f40:	a1 fc       	sbrc	r10, 1
    1f42:	03 c0       	rjmp	.+6      	; 0x1f4a <vfprintf+0x34e>
    1f44:	88 e7       	ldi	r24, 0x78	; 120
    1f46:	90 e0       	ldi	r25, 0x00	; 0
    1f48:	02 c0       	rjmp	.+4      	; 0x1f4e <vfprintf+0x352>
    1f4a:	88 e5       	ldi	r24, 0x58	; 88
    1f4c:	90 e0       	ldi	r25, 0x00	; 0
    1f4e:	b6 01       	movw	r22, r12
    1f50:	0c c0       	rjmp	.+24     	; 0x1f6a <vfprintf+0x36e>
    1f52:	8a 2d       	mov	r24, r10
    1f54:	86 78       	andi	r24, 0x86	; 134
    1f56:	59 f0       	breq	.+22     	; 0x1f6e <vfprintf+0x372>
    1f58:	a1 fe       	sbrs	r10, 1
    1f5a:	02 c0       	rjmp	.+4      	; 0x1f60 <vfprintf+0x364>
    1f5c:	8b e2       	ldi	r24, 0x2B	; 43
    1f5e:	01 c0       	rjmp	.+2      	; 0x1f62 <vfprintf+0x366>
    1f60:	80 e2       	ldi	r24, 0x20	; 32
    1f62:	a7 fc       	sbrc	r10, 7
    1f64:	8d e2       	ldi	r24, 0x2D	; 45
    1f66:	b6 01       	movw	r22, r12
    1f68:	90 e0       	ldi	r25, 0x00	; 0
    1f6a:	0e 94 37 12 	call	0x246e	; 0x246e <fputc>
    1f6e:	89 14       	cp	r8, r9
    1f70:	38 f4       	brcc	.+14     	; 0x1f80 <vfprintf+0x384>
    1f72:	b6 01       	movw	r22, r12
    1f74:	80 e3       	ldi	r24, 0x30	; 48
    1f76:	90 e0       	ldi	r25, 0x00	; 0
    1f78:	0e 94 37 12 	call	0x246e	; 0x246e <fputc>
    1f7c:	9a 94       	dec	r9
    1f7e:	f7 cf       	rjmp	.-18     	; 0x1f6e <vfprintf+0x372>
    1f80:	8a 94       	dec	r8
    1f82:	f3 01       	movw	r30, r6
    1f84:	e8 0d       	add	r30, r8
    1f86:	f1 1d       	adc	r31, r1
    1f88:	80 81       	ld	r24, Z
    1f8a:	b6 01       	movw	r22, r12
    1f8c:	90 e0       	ldi	r25, 0x00	; 0
    1f8e:	0e 94 37 12 	call	0x246e	; 0x246e <fputc>
    1f92:	81 10       	cpse	r8, r1
    1f94:	f5 cf       	rjmp	.-22     	; 0x1f80 <vfprintf+0x384>
    1f96:	22 20       	and	r2, r2
    1f98:	09 f4       	brne	.+2      	; 0x1f9c <vfprintf+0x3a0>
    1f9a:	42 ce       	rjmp	.-892    	; 0x1c20 <vfprintf+0x24>
    1f9c:	b6 01       	movw	r22, r12
    1f9e:	80 e2       	ldi	r24, 0x20	; 32
    1fa0:	90 e0       	ldi	r25, 0x00	; 0
    1fa2:	0e 94 37 12 	call	0x246e	; 0x246e <fputc>
    1fa6:	2a 94       	dec	r2
    1fa8:	f6 cf       	rjmp	.-20     	; 0x1f96 <vfprintf+0x39a>
    1faa:	f6 01       	movw	r30, r12
    1fac:	86 81       	ldd	r24, Z+6	; 0x06
    1fae:	97 81       	ldd	r25, Z+7	; 0x07
    1fb0:	02 c0       	rjmp	.+4      	; 0x1fb6 <vfprintf+0x3ba>
    1fb2:	8f ef       	ldi	r24, 0xFF	; 255
    1fb4:	9f ef       	ldi	r25, 0xFF	; 255
    1fb6:	2b 96       	adiw	r28, 0x0b	; 11
    1fb8:	e2 e1       	ldi	r30, 0x12	; 18
    1fba:	0c 94 1f 13 	jmp	0x263e	; 0x263e <__epilogue_restores__>

00001fbe <dtoa_prf>:
    1fbe:	a9 e0       	ldi	r26, 0x09	; 9
    1fc0:	b0 e0       	ldi	r27, 0x00	; 0
    1fc2:	e5 ee       	ldi	r30, 0xE5	; 229
    1fc4:	ff e0       	ldi	r31, 0x0F	; 15
    1fc6:	0c 94 09 13 	jmp	0x2612	; 0x2612 <__prologue_saves__+0xc>
    1fca:	6a 01       	movw	r12, r20
    1fcc:	12 2f       	mov	r17, r18
    1fce:	b0 2e       	mov	r11, r16
    1fd0:	2b e3       	ldi	r18, 0x3B	; 59
    1fd2:	20 17       	cp	r18, r16
    1fd4:	20 f0       	brcs	.+8      	; 0x1fde <dtoa_prf+0x20>
    1fd6:	ff 24       	eor	r15, r15
    1fd8:	f3 94       	inc	r15
    1fda:	f0 0e       	add	r15, r16
    1fdc:	02 c0       	rjmp	.+4      	; 0x1fe2 <dtoa_prf+0x24>
    1fde:	2c e3       	ldi	r18, 0x3C	; 60
    1fe0:	f2 2e       	mov	r15, r18
    1fe2:	0f 2d       	mov	r16, r15
    1fe4:	27 e0       	ldi	r18, 0x07	; 7
    1fe6:	ae 01       	movw	r20, r28
    1fe8:	4f 5f       	subi	r20, 0xFF	; 255
    1fea:	5f 4f       	sbci	r21, 0xFF	; 255
    1fec:	0e 94 39 11 	call	0x2272	; 0x2272 <__ftoa_engine>
    1ff0:	bc 01       	movw	r22, r24
    1ff2:	49 81       	ldd	r20, Y+1	; 0x01
    1ff4:	84 2f       	mov	r24, r20
    1ff6:	89 70       	andi	r24, 0x09	; 9
    1ff8:	81 30       	cpi	r24, 0x01	; 1
    1ffa:	31 f0       	breq	.+12     	; 0x2008 <dtoa_prf+0x4a>
    1ffc:	e1 fc       	sbrc	r14, 1
    1ffe:	06 c0       	rjmp	.+12     	; 0x200c <dtoa_prf+0x4e>
    2000:	e0 fe       	sbrs	r14, 0
    2002:	06 c0       	rjmp	.+12     	; 0x2010 <dtoa_prf+0x52>
    2004:	90 e2       	ldi	r25, 0x20	; 32
    2006:	05 c0       	rjmp	.+10     	; 0x2012 <dtoa_prf+0x54>
    2008:	9d e2       	ldi	r25, 0x2D	; 45
    200a:	03 c0       	rjmp	.+6      	; 0x2012 <dtoa_prf+0x54>
    200c:	9b e2       	ldi	r25, 0x2B	; 43
    200e:	01 c0       	rjmp	.+2      	; 0x2012 <dtoa_prf+0x54>
    2010:	90 e0       	ldi	r25, 0x00	; 0
    2012:	5e 2d       	mov	r21, r14
    2014:	50 71       	andi	r21, 0x10	; 16
    2016:	43 ff       	sbrs	r20, 3
    2018:	3c c0       	rjmp	.+120    	; 0x2092 <dtoa_prf+0xd4>
    201a:	91 11       	cpse	r25, r1
    201c:	02 c0       	rjmp	.+4      	; 0x2022 <dtoa_prf+0x64>
    201e:	83 e0       	ldi	r24, 0x03	; 3
    2020:	01 c0       	rjmp	.+2      	; 0x2024 <dtoa_prf+0x66>
    2022:	84 e0       	ldi	r24, 0x04	; 4
    2024:	81 17       	cp	r24, r17
    2026:	18 f4       	brcc	.+6      	; 0x202e <dtoa_prf+0x70>
    2028:	21 2f       	mov	r18, r17
    202a:	28 1b       	sub	r18, r24
    202c:	01 c0       	rjmp	.+2      	; 0x2030 <dtoa_prf+0x72>
    202e:	20 e0       	ldi	r18, 0x00	; 0
    2030:	51 11       	cpse	r21, r1
    2032:	0b c0       	rjmp	.+22     	; 0x204a <dtoa_prf+0x8c>
    2034:	f6 01       	movw	r30, r12
    2036:	82 2f       	mov	r24, r18
    2038:	30 e2       	ldi	r19, 0x20	; 32
    203a:	88 23       	and	r24, r24
    203c:	19 f0       	breq	.+6      	; 0x2044 <dtoa_prf+0x86>
    203e:	31 93       	st	Z+, r19
    2040:	81 50       	subi	r24, 0x01	; 1
    2042:	fb cf       	rjmp	.-10     	; 0x203a <dtoa_prf+0x7c>
    2044:	c2 0e       	add	r12, r18
    2046:	d1 1c       	adc	r13, r1
    2048:	20 e0       	ldi	r18, 0x00	; 0
    204a:	99 23       	and	r25, r25
    204c:	29 f0       	breq	.+10     	; 0x2058 <dtoa_prf+0x9a>
    204e:	d6 01       	movw	r26, r12
    2050:	9c 93       	st	X, r25
    2052:	f6 01       	movw	r30, r12
    2054:	31 96       	adiw	r30, 0x01	; 1
    2056:	6f 01       	movw	r12, r30
    2058:	c6 01       	movw	r24, r12
    205a:	03 96       	adiw	r24, 0x03	; 3
    205c:	e2 fe       	sbrs	r14, 2
    205e:	0a c0       	rjmp	.+20     	; 0x2074 <dtoa_prf+0xb6>
    2060:	3e e4       	ldi	r19, 0x4E	; 78
    2062:	d6 01       	movw	r26, r12
    2064:	3c 93       	st	X, r19
    2066:	41 e4       	ldi	r20, 0x41	; 65
    2068:	11 96       	adiw	r26, 0x01	; 1
    206a:	4c 93       	st	X, r20
    206c:	11 97       	sbiw	r26, 0x01	; 1
    206e:	12 96       	adiw	r26, 0x02	; 2
    2070:	3c 93       	st	X, r19
    2072:	06 c0       	rjmp	.+12     	; 0x2080 <dtoa_prf+0xc2>
    2074:	3e e6       	ldi	r19, 0x6E	; 110
    2076:	f6 01       	movw	r30, r12
    2078:	30 83       	st	Z, r19
    207a:	41 e6       	ldi	r20, 0x61	; 97
    207c:	41 83       	std	Z+1, r20	; 0x01
    207e:	32 83       	std	Z+2, r19	; 0x02
    2080:	fc 01       	movw	r30, r24
    2082:	32 2f       	mov	r19, r18
    2084:	40 e2       	ldi	r20, 0x20	; 32
    2086:	33 23       	and	r19, r19
    2088:	09 f4       	brne	.+2      	; 0x208c <dtoa_prf+0xce>
    208a:	42 c0       	rjmp	.+132    	; 0x2110 <dtoa_prf+0x152>
    208c:	41 93       	st	Z+, r20
    208e:	31 50       	subi	r19, 0x01	; 1
    2090:	fa cf       	rjmp	.-12     	; 0x2086 <dtoa_prf+0xc8>
    2092:	42 ff       	sbrs	r20, 2
    2094:	44 c0       	rjmp	.+136    	; 0x211e <dtoa_prf+0x160>
    2096:	91 11       	cpse	r25, r1
    2098:	02 c0       	rjmp	.+4      	; 0x209e <dtoa_prf+0xe0>
    209a:	83 e0       	ldi	r24, 0x03	; 3
    209c:	01 c0       	rjmp	.+2      	; 0x20a0 <dtoa_prf+0xe2>
    209e:	84 e0       	ldi	r24, 0x04	; 4
    20a0:	81 17       	cp	r24, r17
    20a2:	18 f4       	brcc	.+6      	; 0x20aa <dtoa_prf+0xec>
    20a4:	21 2f       	mov	r18, r17
    20a6:	28 1b       	sub	r18, r24
    20a8:	01 c0       	rjmp	.+2      	; 0x20ac <dtoa_prf+0xee>
    20aa:	20 e0       	ldi	r18, 0x00	; 0
    20ac:	51 11       	cpse	r21, r1
    20ae:	0b c0       	rjmp	.+22     	; 0x20c6 <dtoa_prf+0x108>
    20b0:	f6 01       	movw	r30, r12
    20b2:	82 2f       	mov	r24, r18
    20b4:	30 e2       	ldi	r19, 0x20	; 32
    20b6:	88 23       	and	r24, r24
    20b8:	19 f0       	breq	.+6      	; 0x20c0 <dtoa_prf+0x102>
    20ba:	31 93       	st	Z+, r19
    20bc:	81 50       	subi	r24, 0x01	; 1
    20be:	fb cf       	rjmp	.-10     	; 0x20b6 <dtoa_prf+0xf8>
    20c0:	c2 0e       	add	r12, r18
    20c2:	d1 1c       	adc	r13, r1
    20c4:	20 e0       	ldi	r18, 0x00	; 0
    20c6:	99 23       	and	r25, r25
    20c8:	29 f0       	breq	.+10     	; 0x20d4 <dtoa_prf+0x116>
    20ca:	d6 01       	movw	r26, r12
    20cc:	9c 93       	st	X, r25
    20ce:	f6 01       	movw	r30, r12
    20d0:	31 96       	adiw	r30, 0x01	; 1
    20d2:	6f 01       	movw	r12, r30
    20d4:	c6 01       	movw	r24, r12
    20d6:	03 96       	adiw	r24, 0x03	; 3
    20d8:	e2 fe       	sbrs	r14, 2
    20da:	0b c0       	rjmp	.+22     	; 0x20f2 <dtoa_prf+0x134>
    20dc:	39 e4       	ldi	r19, 0x49	; 73
    20de:	d6 01       	movw	r26, r12
    20e0:	3c 93       	st	X, r19
    20e2:	3e e4       	ldi	r19, 0x4E	; 78
    20e4:	11 96       	adiw	r26, 0x01	; 1
    20e6:	3c 93       	st	X, r19
    20e8:	11 97       	sbiw	r26, 0x01	; 1
    20ea:	36 e4       	ldi	r19, 0x46	; 70
    20ec:	12 96       	adiw	r26, 0x02	; 2
    20ee:	3c 93       	st	X, r19
    20f0:	07 c0       	rjmp	.+14     	; 0x2100 <dtoa_prf+0x142>
    20f2:	39 e6       	ldi	r19, 0x69	; 105
    20f4:	f6 01       	movw	r30, r12
    20f6:	30 83       	st	Z, r19
    20f8:	3e e6       	ldi	r19, 0x6E	; 110
    20fa:	31 83       	std	Z+1, r19	; 0x01
    20fc:	36 e6       	ldi	r19, 0x66	; 102
    20fe:	32 83       	std	Z+2, r19	; 0x02
    2100:	fc 01       	movw	r30, r24
    2102:	32 2f       	mov	r19, r18
    2104:	40 e2       	ldi	r20, 0x20	; 32
    2106:	33 23       	and	r19, r19
    2108:	19 f0       	breq	.+6      	; 0x2110 <dtoa_prf+0x152>
    210a:	41 93       	st	Z+, r20
    210c:	31 50       	subi	r19, 0x01	; 1
    210e:	fb cf       	rjmp	.-10     	; 0x2106 <dtoa_prf+0x148>
    2110:	fc 01       	movw	r30, r24
    2112:	e2 0f       	add	r30, r18
    2114:	f1 1d       	adc	r31, r1
    2116:	10 82       	st	Z, r1
    2118:	8e ef       	ldi	r24, 0xFE	; 254
    211a:	9f ef       	ldi	r25, 0xFF	; 255
    211c:	a6 c0       	rjmp	.+332    	; 0x226a <dtoa_prf+0x2ac>
    211e:	21 e0       	ldi	r18, 0x01	; 1
    2120:	30 e0       	ldi	r19, 0x00	; 0
    2122:	91 11       	cpse	r25, r1
    2124:	02 c0       	rjmp	.+4      	; 0x212a <dtoa_prf+0x16c>
    2126:	20 e0       	ldi	r18, 0x00	; 0
    2128:	30 e0       	ldi	r19, 0x00	; 0
    212a:	16 16       	cp	r1, r22
    212c:	17 06       	cpc	r1, r23
    212e:	1c f4       	brge	.+6      	; 0x2136 <dtoa_prf+0x178>
    2130:	fb 01       	movw	r30, r22
    2132:	31 96       	adiw	r30, 0x01	; 1
    2134:	02 c0       	rjmp	.+4      	; 0x213a <dtoa_prf+0x17c>
    2136:	e1 e0       	ldi	r30, 0x01	; 1
    2138:	f0 e0       	ldi	r31, 0x00	; 0
    213a:	2e 0f       	add	r18, r30
    213c:	3f 1f       	adc	r19, r31
    213e:	bb 20       	and	r11, r11
    2140:	21 f0       	breq	.+8      	; 0x214a <dtoa_prf+0x18c>
    2142:	eb 2d       	mov	r30, r11
    2144:	f0 e0       	ldi	r31, 0x00	; 0
    2146:	31 96       	adiw	r30, 0x01	; 1
    2148:	02 c0       	rjmp	.+4      	; 0x214e <dtoa_prf+0x190>
    214a:	e0 e0       	ldi	r30, 0x00	; 0
    214c:	f0 e0       	ldi	r31, 0x00	; 0
    214e:	2e 0f       	add	r18, r30
    2150:	3f 1f       	adc	r19, r31
    2152:	e1 2f       	mov	r30, r17
    2154:	f0 e0       	ldi	r31, 0x00	; 0
    2156:	2e 17       	cp	r18, r30
    2158:	3f 07       	cpc	r19, r31
    215a:	1c f4       	brge	.+6      	; 0x2162 <dtoa_prf+0x1a4>
    215c:	12 1b       	sub	r17, r18
    215e:	21 2f       	mov	r18, r17
    2160:	01 c0       	rjmp	.+2      	; 0x2164 <dtoa_prf+0x1a6>
    2162:	20 e0       	ldi	r18, 0x00	; 0
    2164:	8e 2d       	mov	r24, r14
    2166:	88 71       	andi	r24, 0x18	; 24
    2168:	59 f4       	brne	.+22     	; 0x2180 <dtoa_prf+0x1c2>
    216a:	f6 01       	movw	r30, r12
    216c:	82 2f       	mov	r24, r18
    216e:	30 e2       	ldi	r19, 0x20	; 32
    2170:	88 23       	and	r24, r24
    2172:	19 f0       	breq	.+6      	; 0x217a <dtoa_prf+0x1bc>
    2174:	31 93       	st	Z+, r19
    2176:	81 50       	subi	r24, 0x01	; 1
    2178:	fb cf       	rjmp	.-10     	; 0x2170 <dtoa_prf+0x1b2>
    217a:	c2 0e       	add	r12, r18
    217c:	d1 1c       	adc	r13, r1
    217e:	20 e0       	ldi	r18, 0x00	; 0
    2180:	99 23       	and	r25, r25
    2182:	29 f0       	breq	.+10     	; 0x218e <dtoa_prf+0x1d0>
    2184:	d6 01       	movw	r26, r12
    2186:	9c 93       	st	X, r25
    2188:	f6 01       	movw	r30, r12
    218a:	31 96       	adiw	r30, 0x01	; 1
    218c:	6f 01       	movw	r12, r30
    218e:	51 11       	cpse	r21, r1
    2190:	0b c0       	rjmp	.+22     	; 0x21a8 <dtoa_prf+0x1ea>
    2192:	f6 01       	movw	r30, r12
    2194:	82 2f       	mov	r24, r18
    2196:	90 e3       	ldi	r25, 0x30	; 48
    2198:	88 23       	and	r24, r24
    219a:	19 f0       	breq	.+6      	; 0x21a2 <dtoa_prf+0x1e4>
    219c:	91 93       	st	Z+, r25
    219e:	81 50       	subi	r24, 0x01	; 1
    21a0:	fb cf       	rjmp	.-10     	; 0x2198 <dtoa_prf+0x1da>
    21a2:	c2 0e       	add	r12, r18
    21a4:	d1 1c       	adc	r13, r1
    21a6:	20 e0       	ldi	r18, 0x00	; 0
    21a8:	0f 2d       	mov	r16, r15
    21aa:	06 0f       	add	r16, r22
    21ac:	9a 81       	ldd	r25, Y+2	; 0x02
    21ae:	34 2f       	mov	r19, r20
    21b0:	30 71       	andi	r19, 0x10	; 16
    21b2:	44 ff       	sbrs	r20, 4
    21b4:	03 c0       	rjmp	.+6      	; 0x21bc <dtoa_prf+0x1fe>
    21b6:	91 33       	cpi	r25, 0x31	; 49
    21b8:	09 f4       	brne	.+2      	; 0x21bc <dtoa_prf+0x1fe>
    21ba:	01 50       	subi	r16, 0x01	; 1
    21bc:	10 16       	cp	r1, r16
    21be:	24 f4       	brge	.+8      	; 0x21c8 <dtoa_prf+0x20a>
    21c0:	09 30       	cpi	r16, 0x09	; 9
    21c2:	18 f0       	brcs	.+6      	; 0x21ca <dtoa_prf+0x20c>
    21c4:	08 e0       	ldi	r16, 0x08	; 8
    21c6:	01 c0       	rjmp	.+2      	; 0x21ca <dtoa_prf+0x20c>
    21c8:	01 e0       	ldi	r16, 0x01	; 1
    21ca:	ab 01       	movw	r20, r22
    21cc:	77 ff       	sbrs	r23, 7
    21ce:	02 c0       	rjmp	.+4      	; 0x21d4 <dtoa_prf+0x216>
    21d0:	40 e0       	ldi	r20, 0x00	; 0
    21d2:	50 e0       	ldi	r21, 0x00	; 0
    21d4:	fb 01       	movw	r30, r22
    21d6:	e4 1b       	sub	r30, r20
    21d8:	f5 0b       	sbc	r31, r21
    21da:	a1 e0       	ldi	r26, 0x01	; 1
    21dc:	b0 e0       	ldi	r27, 0x00	; 0
    21de:	ac 0f       	add	r26, r28
    21e0:	bd 1f       	adc	r27, r29
    21e2:	ea 0f       	add	r30, r26
    21e4:	fb 1f       	adc	r31, r27
    21e6:	8e e2       	ldi	r24, 0x2E	; 46
    21e8:	a8 2e       	mov	r10, r24
    21ea:	4b 01       	movw	r8, r22
    21ec:	80 1a       	sub	r8, r16
    21ee:	91 08       	sbc	r9, r1
    21f0:	0b 2d       	mov	r16, r11
    21f2:	10 e0       	ldi	r17, 0x00	; 0
    21f4:	11 95       	neg	r17
    21f6:	01 95       	neg	r16
    21f8:	11 09       	sbc	r17, r1
    21fa:	4f 3f       	cpi	r20, 0xFF	; 255
    21fc:	bf ef       	ldi	r27, 0xFF	; 255
    21fe:	5b 07       	cpc	r21, r27
    2200:	21 f4       	brne	.+8      	; 0x220a <dtoa_prf+0x24c>
    2202:	d6 01       	movw	r26, r12
    2204:	ac 92       	st	X, r10
    2206:	11 96       	adiw	r26, 0x01	; 1
    2208:	6d 01       	movw	r12, r26
    220a:	64 17       	cp	r22, r20
    220c:	75 07       	cpc	r23, r21
    220e:	2c f0       	brlt	.+10     	; 0x221a <dtoa_prf+0x25c>
    2210:	84 16       	cp	r8, r20
    2212:	95 06       	cpc	r9, r21
    2214:	14 f4       	brge	.+4      	; 0x221a <dtoa_prf+0x25c>
    2216:	81 81       	ldd	r24, Z+1	; 0x01
    2218:	01 c0       	rjmp	.+2      	; 0x221c <dtoa_prf+0x25e>
    221a:	80 e3       	ldi	r24, 0x30	; 48
    221c:	41 50       	subi	r20, 0x01	; 1
    221e:	51 09       	sbc	r21, r1
    2220:	31 96       	adiw	r30, 0x01	; 1
    2222:	d6 01       	movw	r26, r12
    2224:	11 96       	adiw	r26, 0x01	; 1
    2226:	7d 01       	movw	r14, r26
    2228:	40 17       	cp	r20, r16
    222a:	51 07       	cpc	r21, r17
    222c:	24 f0       	brlt	.+8      	; 0x2236 <dtoa_prf+0x278>
    222e:	d6 01       	movw	r26, r12
    2230:	8c 93       	st	X, r24
    2232:	67 01       	movw	r12, r14
    2234:	e2 cf       	rjmp	.-60     	; 0x21fa <dtoa_prf+0x23c>
    2236:	64 17       	cp	r22, r20
    2238:	75 07       	cpc	r23, r21
    223a:	39 f4       	brne	.+14     	; 0x224a <dtoa_prf+0x28c>
    223c:	96 33       	cpi	r25, 0x36	; 54
    223e:	20 f4       	brcc	.+8      	; 0x2248 <dtoa_prf+0x28a>
    2240:	95 33       	cpi	r25, 0x35	; 53
    2242:	19 f4       	brne	.+6      	; 0x224a <dtoa_prf+0x28c>
    2244:	31 11       	cpse	r19, r1
    2246:	01 c0       	rjmp	.+2      	; 0x224a <dtoa_prf+0x28c>
    2248:	81 e3       	ldi	r24, 0x31	; 49
    224a:	f6 01       	movw	r30, r12
    224c:	80 83       	st	Z, r24
    224e:	f7 01       	movw	r30, r14
    2250:	82 2f       	mov	r24, r18
    2252:	90 e2       	ldi	r25, 0x20	; 32
    2254:	88 23       	and	r24, r24
    2256:	19 f0       	breq	.+6      	; 0x225e <dtoa_prf+0x2a0>
    2258:	91 93       	st	Z+, r25
    225a:	81 50       	subi	r24, 0x01	; 1
    225c:	fb cf       	rjmp	.-10     	; 0x2254 <dtoa_prf+0x296>
    225e:	f7 01       	movw	r30, r14
    2260:	e2 0f       	add	r30, r18
    2262:	f1 1d       	adc	r31, r1
    2264:	10 82       	st	Z, r1
    2266:	80 e0       	ldi	r24, 0x00	; 0
    2268:	90 e0       	ldi	r25, 0x00	; 0
    226a:	29 96       	adiw	r28, 0x09	; 9
    226c:	ec e0       	ldi	r30, 0x0C	; 12
    226e:	0c 94 25 13 	jmp	0x264a	; 0x264a <__epilogue_restores__+0xc>

00002272 <__ftoa_engine>:
    2272:	28 30       	cpi	r18, 0x08	; 8
    2274:	08 f0       	brcs	.+2      	; 0x2278 <__ftoa_engine+0x6>
    2276:	27 e0       	ldi	r18, 0x07	; 7
    2278:	33 27       	eor	r19, r19
    227a:	da 01       	movw	r26, r20
    227c:	99 0f       	add	r25, r25
    227e:	31 1d       	adc	r19, r1
    2280:	87 fd       	sbrc	r24, 7
    2282:	91 60       	ori	r25, 0x01	; 1
    2284:	00 96       	adiw	r24, 0x00	; 0
    2286:	61 05       	cpc	r22, r1
    2288:	71 05       	cpc	r23, r1
    228a:	39 f4       	brne	.+14     	; 0x229a <__ftoa_engine+0x28>
    228c:	32 60       	ori	r19, 0x02	; 2
    228e:	2e 5f       	subi	r18, 0xFE	; 254
    2290:	3d 93       	st	X+, r19
    2292:	30 e3       	ldi	r19, 0x30	; 48
    2294:	2a 95       	dec	r18
    2296:	e1 f7       	brne	.-8      	; 0x2290 <__ftoa_engine+0x1e>
    2298:	08 95       	ret
    229a:	9f 3f       	cpi	r25, 0xFF	; 255
    229c:	30 f0       	brcs	.+12     	; 0x22aa <__ftoa_engine+0x38>
    229e:	80 38       	cpi	r24, 0x80	; 128
    22a0:	71 05       	cpc	r23, r1
    22a2:	61 05       	cpc	r22, r1
    22a4:	09 f0       	breq	.+2      	; 0x22a8 <__ftoa_engine+0x36>
    22a6:	3c 5f       	subi	r19, 0xFC	; 252
    22a8:	3c 5f       	subi	r19, 0xFC	; 252
    22aa:	3d 93       	st	X+, r19
    22ac:	91 30       	cpi	r25, 0x01	; 1
    22ae:	08 f0       	brcs	.+2      	; 0x22b2 <__ftoa_engine+0x40>
    22b0:	80 68       	ori	r24, 0x80	; 128
    22b2:	91 1d       	adc	r25, r1
    22b4:	df 93       	push	r29
    22b6:	cf 93       	push	r28
    22b8:	1f 93       	push	r17
    22ba:	0f 93       	push	r16
    22bc:	ff 92       	push	r15
    22be:	ef 92       	push	r14
    22c0:	19 2f       	mov	r17, r25
    22c2:	98 7f       	andi	r25, 0xF8	; 248
    22c4:	96 95       	lsr	r25
    22c6:	e9 2f       	mov	r30, r25
    22c8:	96 95       	lsr	r25
    22ca:	96 95       	lsr	r25
    22cc:	e9 0f       	add	r30, r25
    22ce:	ff 27       	eor	r31, r31
    22d0:	e2 55       	subi	r30, 0x52	; 82
    22d2:	ff 4f       	sbci	r31, 0xFF	; 255
    22d4:	99 27       	eor	r25, r25
    22d6:	33 27       	eor	r19, r19
    22d8:	ee 24       	eor	r14, r14
    22da:	ff 24       	eor	r15, r15
    22dc:	a7 01       	movw	r20, r14
    22de:	e7 01       	movw	r28, r14
    22e0:	05 90       	lpm	r0, Z+
    22e2:	08 94       	sec
    22e4:	07 94       	ror	r0
    22e6:	28 f4       	brcc	.+10     	; 0x22f2 <__ftoa_engine+0x80>
    22e8:	36 0f       	add	r19, r22
    22ea:	e7 1e       	adc	r14, r23
    22ec:	f8 1e       	adc	r15, r24
    22ee:	49 1f       	adc	r20, r25
    22f0:	51 1d       	adc	r21, r1
    22f2:	66 0f       	add	r22, r22
    22f4:	77 1f       	adc	r23, r23
    22f6:	88 1f       	adc	r24, r24
    22f8:	99 1f       	adc	r25, r25
    22fa:	06 94       	lsr	r0
    22fc:	a1 f7       	brne	.-24     	; 0x22e6 <__ftoa_engine+0x74>
    22fe:	05 90       	lpm	r0, Z+
    2300:	07 94       	ror	r0
    2302:	28 f4       	brcc	.+10     	; 0x230e <__ftoa_engine+0x9c>
    2304:	e7 0e       	add	r14, r23
    2306:	f8 1e       	adc	r15, r24
    2308:	49 1f       	adc	r20, r25
    230a:	56 1f       	adc	r21, r22
    230c:	c1 1d       	adc	r28, r1
    230e:	77 0f       	add	r23, r23
    2310:	88 1f       	adc	r24, r24
    2312:	99 1f       	adc	r25, r25
    2314:	66 1f       	adc	r22, r22
    2316:	06 94       	lsr	r0
    2318:	a1 f7       	brne	.-24     	; 0x2302 <__ftoa_engine+0x90>
    231a:	05 90       	lpm	r0, Z+
    231c:	07 94       	ror	r0
    231e:	28 f4       	brcc	.+10     	; 0x232a <__ftoa_engine+0xb8>
    2320:	f8 0e       	add	r15, r24
    2322:	49 1f       	adc	r20, r25
    2324:	56 1f       	adc	r21, r22
    2326:	c7 1f       	adc	r28, r23
    2328:	d1 1d       	adc	r29, r1
    232a:	88 0f       	add	r24, r24
    232c:	99 1f       	adc	r25, r25
    232e:	66 1f       	adc	r22, r22
    2330:	77 1f       	adc	r23, r23
    2332:	06 94       	lsr	r0
    2334:	a1 f7       	brne	.-24     	; 0x231e <__ftoa_engine+0xac>
    2336:	05 90       	lpm	r0, Z+
    2338:	07 94       	ror	r0
    233a:	20 f4       	brcc	.+8      	; 0x2344 <__ftoa_engine+0xd2>
    233c:	49 0f       	add	r20, r25
    233e:	56 1f       	adc	r21, r22
    2340:	c7 1f       	adc	r28, r23
    2342:	d8 1f       	adc	r29, r24
    2344:	99 0f       	add	r25, r25
    2346:	66 1f       	adc	r22, r22
    2348:	77 1f       	adc	r23, r23
    234a:	88 1f       	adc	r24, r24
    234c:	06 94       	lsr	r0
    234e:	a9 f7       	brne	.-22     	; 0x233a <__ftoa_engine+0xc8>
    2350:	84 91       	lpm	r24, Z
    2352:	10 95       	com	r17
    2354:	17 70       	andi	r17, 0x07	; 7
    2356:	41 f0       	breq	.+16     	; 0x2368 <__ftoa_engine+0xf6>
    2358:	d6 95       	lsr	r29
    235a:	c7 95       	ror	r28
    235c:	57 95       	ror	r21
    235e:	47 95       	ror	r20
    2360:	f7 94       	ror	r15
    2362:	e7 94       	ror	r14
    2364:	1a 95       	dec	r17
    2366:	c1 f7       	brne	.-16     	; 0x2358 <__ftoa_engine+0xe6>
    2368:	e4 e5       	ldi	r30, 0x54	; 84
    236a:	f0 e0       	ldi	r31, 0x00	; 0
    236c:	68 94       	set
    236e:	15 90       	lpm	r1, Z+
    2370:	15 91       	lpm	r17, Z+
    2372:	35 91       	lpm	r19, Z+
    2374:	65 91       	lpm	r22, Z+
    2376:	95 91       	lpm	r25, Z+
    2378:	05 90       	lpm	r0, Z+
    237a:	7f e2       	ldi	r23, 0x2F	; 47
    237c:	73 95       	inc	r23
    237e:	e1 18       	sub	r14, r1
    2380:	f1 0a       	sbc	r15, r17
    2382:	43 0b       	sbc	r20, r19
    2384:	56 0b       	sbc	r21, r22
    2386:	c9 0b       	sbc	r28, r25
    2388:	d0 09       	sbc	r29, r0
    238a:	c0 f7       	brcc	.-16     	; 0x237c <__ftoa_engine+0x10a>
    238c:	e1 0c       	add	r14, r1
    238e:	f1 1e       	adc	r15, r17
    2390:	43 1f       	adc	r20, r19
    2392:	56 1f       	adc	r21, r22
    2394:	c9 1f       	adc	r28, r25
    2396:	d0 1d       	adc	r29, r0
    2398:	7e f4       	brtc	.+30     	; 0x23b8 <__ftoa_engine+0x146>
    239a:	70 33       	cpi	r23, 0x30	; 48
    239c:	11 f4       	brne	.+4      	; 0x23a2 <__ftoa_engine+0x130>
    239e:	8a 95       	dec	r24
    23a0:	e6 cf       	rjmp	.-52     	; 0x236e <__ftoa_engine+0xfc>
    23a2:	e8 94       	clt
    23a4:	01 50       	subi	r16, 0x01	; 1
    23a6:	30 f0       	brcs	.+12     	; 0x23b4 <__ftoa_engine+0x142>
    23a8:	08 0f       	add	r16, r24
    23aa:	0a f4       	brpl	.+2      	; 0x23ae <__ftoa_engine+0x13c>
    23ac:	00 27       	eor	r16, r16
    23ae:	02 17       	cp	r16, r18
    23b0:	08 f4       	brcc	.+2      	; 0x23b4 <__ftoa_engine+0x142>
    23b2:	20 2f       	mov	r18, r16
    23b4:	23 95       	inc	r18
    23b6:	02 2f       	mov	r16, r18
    23b8:	7a 33       	cpi	r23, 0x3A	; 58
    23ba:	28 f0       	brcs	.+10     	; 0x23c6 <__ftoa_engine+0x154>
    23bc:	79 e3       	ldi	r23, 0x39	; 57
    23be:	7d 93       	st	X+, r23
    23c0:	2a 95       	dec	r18
    23c2:	e9 f7       	brne	.-6      	; 0x23be <__ftoa_engine+0x14c>
    23c4:	10 c0       	rjmp	.+32     	; 0x23e6 <__ftoa_engine+0x174>
    23c6:	7d 93       	st	X+, r23
    23c8:	2a 95       	dec	r18
    23ca:	89 f6       	brne	.-94     	; 0x236e <__ftoa_engine+0xfc>
    23cc:	06 94       	lsr	r0
    23ce:	97 95       	ror	r25
    23d0:	67 95       	ror	r22
    23d2:	37 95       	ror	r19
    23d4:	17 95       	ror	r17
    23d6:	17 94       	ror	r1
    23d8:	e1 18       	sub	r14, r1
    23da:	f1 0a       	sbc	r15, r17
    23dc:	43 0b       	sbc	r20, r19
    23de:	56 0b       	sbc	r21, r22
    23e0:	c9 0b       	sbc	r28, r25
    23e2:	d0 09       	sbc	r29, r0
    23e4:	98 f0       	brcs	.+38     	; 0x240c <__ftoa_engine+0x19a>
    23e6:	23 95       	inc	r18
    23e8:	7e 91       	ld	r23, -X
    23ea:	73 95       	inc	r23
    23ec:	7a 33       	cpi	r23, 0x3A	; 58
    23ee:	08 f0       	brcs	.+2      	; 0x23f2 <__ftoa_engine+0x180>
    23f0:	70 e3       	ldi	r23, 0x30	; 48
    23f2:	7c 93       	st	X, r23
    23f4:	20 13       	cpse	r18, r16
    23f6:	b8 f7       	brcc	.-18     	; 0x23e6 <__ftoa_engine+0x174>
    23f8:	7e 91       	ld	r23, -X
    23fa:	70 61       	ori	r23, 0x10	; 16
    23fc:	7d 93       	st	X+, r23
    23fe:	30 f0       	brcs	.+12     	; 0x240c <__ftoa_engine+0x19a>
    2400:	83 95       	inc	r24
    2402:	71 e3       	ldi	r23, 0x31	; 49
    2404:	7d 93       	st	X+, r23
    2406:	70 e3       	ldi	r23, 0x30	; 48
    2408:	2a 95       	dec	r18
    240a:	e1 f7       	brne	.-8      	; 0x2404 <__ftoa_engine+0x192>
    240c:	11 24       	eor	r1, r1
    240e:	ef 90       	pop	r14
    2410:	ff 90       	pop	r15
    2412:	0f 91       	pop	r16
    2414:	1f 91       	pop	r17
    2416:	cf 91       	pop	r28
    2418:	df 91       	pop	r29
    241a:	99 27       	eor	r25, r25
    241c:	87 fd       	sbrc	r24, 7
    241e:	90 95       	com	r25
    2420:	08 95       	ret

00002422 <strnlen_P>:
    2422:	fc 01       	movw	r30, r24
    2424:	05 90       	lpm	r0, Z+
    2426:	61 50       	subi	r22, 0x01	; 1
    2428:	70 40       	sbci	r23, 0x00	; 0
    242a:	01 10       	cpse	r0, r1
    242c:	d8 f7       	brcc	.-10     	; 0x2424 <strnlen_P+0x2>
    242e:	80 95       	com	r24
    2430:	90 95       	com	r25
    2432:	8e 0f       	add	r24, r30
    2434:	9f 1f       	adc	r25, r31
    2436:	08 95       	ret

00002438 <strnlen>:
    2438:	fc 01       	movw	r30, r24
    243a:	61 50       	subi	r22, 0x01	; 1
    243c:	70 40       	sbci	r23, 0x00	; 0
    243e:	01 90       	ld	r0, Z+
    2440:	01 10       	cpse	r0, r1
    2442:	d8 f7       	brcc	.-10     	; 0x243a <strnlen+0x2>
    2444:	80 95       	com	r24
    2446:	90 95       	com	r25
    2448:	8e 0f       	add	r24, r30
    244a:	9f 1f       	adc	r25, r31
    244c:	08 95       	ret

0000244e <strrev>:
    244e:	dc 01       	movw	r26, r24
    2450:	fc 01       	movw	r30, r24
    2452:	67 2f       	mov	r22, r23
    2454:	71 91       	ld	r23, Z+
    2456:	77 23       	and	r23, r23
    2458:	e1 f7       	brne	.-8      	; 0x2452 <strrev+0x4>
    245a:	32 97       	sbiw	r30, 0x02	; 2
    245c:	04 c0       	rjmp	.+8      	; 0x2466 <strrev+0x18>
    245e:	7c 91       	ld	r23, X
    2460:	6d 93       	st	X+, r22
    2462:	70 83       	st	Z, r23
    2464:	62 91       	ld	r22, -Z
    2466:	ae 17       	cp	r26, r30
    2468:	bf 07       	cpc	r27, r31
    246a:	c8 f3       	brcs	.-14     	; 0x245e <strrev+0x10>
    246c:	08 95       	ret

0000246e <fputc>:
    246e:	0f 93       	push	r16
    2470:	1f 93       	push	r17
    2472:	cf 93       	push	r28
    2474:	df 93       	push	r29
    2476:	fb 01       	movw	r30, r22
    2478:	23 81       	ldd	r18, Z+3	; 0x03
    247a:	21 fd       	sbrc	r18, 1
    247c:	03 c0       	rjmp	.+6      	; 0x2484 <fputc+0x16>
    247e:	8f ef       	ldi	r24, 0xFF	; 255
    2480:	9f ef       	ldi	r25, 0xFF	; 255
    2482:	2c c0       	rjmp	.+88     	; 0x24dc <fputc+0x6e>
    2484:	22 ff       	sbrs	r18, 2
    2486:	16 c0       	rjmp	.+44     	; 0x24b4 <fputc+0x46>
    2488:	46 81       	ldd	r20, Z+6	; 0x06
    248a:	57 81       	ldd	r21, Z+7	; 0x07
    248c:	24 81       	ldd	r18, Z+4	; 0x04
    248e:	35 81       	ldd	r19, Z+5	; 0x05
    2490:	42 17       	cp	r20, r18
    2492:	53 07       	cpc	r21, r19
    2494:	44 f4       	brge	.+16     	; 0x24a6 <fputc+0x38>
    2496:	a0 81       	ld	r26, Z
    2498:	b1 81       	ldd	r27, Z+1	; 0x01
    249a:	9d 01       	movw	r18, r26
    249c:	2f 5f       	subi	r18, 0xFF	; 255
    249e:	3f 4f       	sbci	r19, 0xFF	; 255
    24a0:	31 83       	std	Z+1, r19	; 0x01
    24a2:	20 83       	st	Z, r18
    24a4:	8c 93       	st	X, r24
    24a6:	26 81       	ldd	r18, Z+6	; 0x06
    24a8:	37 81       	ldd	r19, Z+7	; 0x07
    24aa:	2f 5f       	subi	r18, 0xFF	; 255
    24ac:	3f 4f       	sbci	r19, 0xFF	; 255
    24ae:	37 83       	std	Z+7, r19	; 0x07
    24b0:	26 83       	std	Z+6, r18	; 0x06
    24b2:	14 c0       	rjmp	.+40     	; 0x24dc <fputc+0x6e>
    24b4:	8b 01       	movw	r16, r22
    24b6:	ec 01       	movw	r28, r24
    24b8:	fb 01       	movw	r30, r22
    24ba:	00 84       	ldd	r0, Z+8	; 0x08
    24bc:	f1 85       	ldd	r31, Z+9	; 0x09
    24be:	e0 2d       	mov	r30, r0
    24c0:	09 95       	icall
    24c2:	89 2b       	or	r24, r25
    24c4:	e1 f6       	brne	.-72     	; 0x247e <fputc+0x10>
    24c6:	d8 01       	movw	r26, r16
    24c8:	16 96       	adiw	r26, 0x06	; 6
    24ca:	8d 91       	ld	r24, X+
    24cc:	9c 91       	ld	r25, X
    24ce:	17 97       	sbiw	r26, 0x07	; 7
    24d0:	01 96       	adiw	r24, 0x01	; 1
    24d2:	17 96       	adiw	r26, 0x07	; 7
    24d4:	9c 93       	st	X, r25
    24d6:	8e 93       	st	-X, r24
    24d8:	16 97       	sbiw	r26, 0x06	; 6
    24da:	ce 01       	movw	r24, r28
    24dc:	df 91       	pop	r29
    24de:	cf 91       	pop	r28
    24e0:	1f 91       	pop	r17
    24e2:	0f 91       	pop	r16
    24e4:	08 95       	ret

000024e6 <__ultoa_invert>:
    24e6:	fa 01       	movw	r30, r20
    24e8:	aa 27       	eor	r26, r26
    24ea:	28 30       	cpi	r18, 0x08	; 8
    24ec:	51 f1       	breq	.+84     	; 0x2542 <__ultoa_invert+0x5c>
    24ee:	20 31       	cpi	r18, 0x10	; 16
    24f0:	81 f1       	breq	.+96     	; 0x2552 <__ultoa_invert+0x6c>
    24f2:	e8 94       	clt
    24f4:	6f 93       	push	r22
    24f6:	6e 7f       	andi	r22, 0xFE	; 254
    24f8:	6e 5f       	subi	r22, 0xFE	; 254
    24fa:	7f 4f       	sbci	r23, 0xFF	; 255
    24fc:	8f 4f       	sbci	r24, 0xFF	; 255
    24fe:	9f 4f       	sbci	r25, 0xFF	; 255
    2500:	af 4f       	sbci	r26, 0xFF	; 255
    2502:	b1 e0       	ldi	r27, 0x01	; 1
    2504:	3e d0       	rcall	.+124    	; 0x2582 <__ultoa_invert+0x9c>
    2506:	b4 e0       	ldi	r27, 0x04	; 4
    2508:	3c d0       	rcall	.+120    	; 0x2582 <__ultoa_invert+0x9c>
    250a:	67 0f       	add	r22, r23
    250c:	78 1f       	adc	r23, r24
    250e:	89 1f       	adc	r24, r25
    2510:	9a 1f       	adc	r25, r26
    2512:	a1 1d       	adc	r26, r1
    2514:	68 0f       	add	r22, r24
    2516:	79 1f       	adc	r23, r25
    2518:	8a 1f       	adc	r24, r26
    251a:	91 1d       	adc	r25, r1
    251c:	a1 1d       	adc	r26, r1
    251e:	6a 0f       	add	r22, r26
    2520:	71 1d       	adc	r23, r1
    2522:	81 1d       	adc	r24, r1
    2524:	91 1d       	adc	r25, r1
    2526:	a1 1d       	adc	r26, r1
    2528:	20 d0       	rcall	.+64     	; 0x256a <__ultoa_invert+0x84>
    252a:	09 f4       	brne	.+2      	; 0x252e <__ultoa_invert+0x48>
    252c:	68 94       	set
    252e:	3f 91       	pop	r19
    2530:	2a e0       	ldi	r18, 0x0A	; 10
    2532:	26 9f       	mul	r18, r22
    2534:	11 24       	eor	r1, r1
    2536:	30 19       	sub	r19, r0
    2538:	30 5d       	subi	r19, 0xD0	; 208
    253a:	31 93       	st	Z+, r19
    253c:	de f6       	brtc	.-74     	; 0x24f4 <__ultoa_invert+0xe>
    253e:	cf 01       	movw	r24, r30
    2540:	08 95       	ret
    2542:	46 2f       	mov	r20, r22
    2544:	47 70       	andi	r20, 0x07	; 7
    2546:	40 5d       	subi	r20, 0xD0	; 208
    2548:	41 93       	st	Z+, r20
    254a:	b3 e0       	ldi	r27, 0x03	; 3
    254c:	0f d0       	rcall	.+30     	; 0x256c <__ultoa_invert+0x86>
    254e:	c9 f7       	brne	.-14     	; 0x2542 <__ultoa_invert+0x5c>
    2550:	f6 cf       	rjmp	.-20     	; 0x253e <__ultoa_invert+0x58>
    2552:	46 2f       	mov	r20, r22
    2554:	4f 70       	andi	r20, 0x0F	; 15
    2556:	40 5d       	subi	r20, 0xD0	; 208
    2558:	4a 33       	cpi	r20, 0x3A	; 58
    255a:	18 f0       	brcs	.+6      	; 0x2562 <__ultoa_invert+0x7c>
    255c:	49 5d       	subi	r20, 0xD9	; 217
    255e:	31 fd       	sbrc	r19, 1
    2560:	40 52       	subi	r20, 0x20	; 32
    2562:	41 93       	st	Z+, r20
    2564:	02 d0       	rcall	.+4      	; 0x256a <__ultoa_invert+0x84>
    2566:	a9 f7       	brne	.-22     	; 0x2552 <__ultoa_invert+0x6c>
    2568:	ea cf       	rjmp	.-44     	; 0x253e <__ultoa_invert+0x58>
    256a:	b4 e0       	ldi	r27, 0x04	; 4
    256c:	a6 95       	lsr	r26
    256e:	97 95       	ror	r25
    2570:	87 95       	ror	r24
    2572:	77 95       	ror	r23
    2574:	67 95       	ror	r22
    2576:	ba 95       	dec	r27
    2578:	c9 f7       	brne	.-14     	; 0x256c <__ultoa_invert+0x86>
    257a:	00 97       	sbiw	r24, 0x00	; 0
    257c:	61 05       	cpc	r22, r1
    257e:	71 05       	cpc	r23, r1
    2580:	08 95       	ret
    2582:	9b 01       	movw	r18, r22
    2584:	ac 01       	movw	r20, r24
    2586:	0a 2e       	mov	r0, r26
    2588:	06 94       	lsr	r0
    258a:	57 95       	ror	r21
    258c:	47 95       	ror	r20
    258e:	37 95       	ror	r19
    2590:	27 95       	ror	r18
    2592:	ba 95       	dec	r27
    2594:	c9 f7       	brne	.-14     	; 0x2588 <__ultoa_invert+0xa2>
    2596:	62 0f       	add	r22, r18
    2598:	73 1f       	adc	r23, r19
    259a:	84 1f       	adc	r24, r20
    259c:	95 1f       	adc	r25, r21
    259e:	a0 1d       	adc	r26, r0
    25a0:	08 95       	ret

000025a2 <__divmodsi4>:
    25a2:	05 2e       	mov	r0, r21
    25a4:	97 fb       	bst	r25, 7
    25a6:	1e f4       	brtc	.+6      	; 0x25ae <__divmodsi4+0xc>
    25a8:	00 94       	com	r0
    25aa:	0e 94 e8 12 	call	0x25d0	; 0x25d0 <__negsi2>
    25ae:	57 fd       	sbrc	r21, 7
    25b0:	07 d0       	rcall	.+14     	; 0x25c0 <__divmodsi4_neg2>
    25b2:	0e 94 05 0d 	call	0x1a0a	; 0x1a0a <__udivmodsi4>
    25b6:	07 fc       	sbrc	r0, 7
    25b8:	03 d0       	rcall	.+6      	; 0x25c0 <__divmodsi4_neg2>
    25ba:	4e f4       	brtc	.+18     	; 0x25ce <__divmodsi4_exit>
    25bc:	0c 94 e8 12 	jmp	0x25d0	; 0x25d0 <__negsi2>

000025c0 <__divmodsi4_neg2>:
    25c0:	50 95       	com	r21
    25c2:	40 95       	com	r20
    25c4:	30 95       	com	r19
    25c6:	21 95       	neg	r18
    25c8:	3f 4f       	sbci	r19, 0xFF	; 255
    25ca:	4f 4f       	sbci	r20, 0xFF	; 255
    25cc:	5f 4f       	sbci	r21, 0xFF	; 255

000025ce <__divmodsi4_exit>:
    25ce:	08 95       	ret

000025d0 <__negsi2>:
    25d0:	90 95       	com	r25
    25d2:	80 95       	com	r24
    25d4:	70 95       	com	r23
    25d6:	61 95       	neg	r22
    25d8:	7f 4f       	sbci	r23, 0xFF	; 255
    25da:	8f 4f       	sbci	r24, 0xFF	; 255
    25dc:	9f 4f       	sbci	r25, 0xFF	; 255
    25de:	08 95       	ret

000025e0 <__muluhisi3>:
    25e0:	0e 94 3a 13 	call	0x2674	; 0x2674 <__umulhisi3>
    25e4:	a5 9f       	mul	r26, r21
    25e6:	90 0d       	add	r25, r0
    25e8:	b4 9f       	mul	r27, r20
    25ea:	90 0d       	add	r25, r0
    25ec:	a4 9f       	mul	r26, r20
    25ee:	80 0d       	add	r24, r0
    25f0:	91 1d       	adc	r25, r1
    25f2:	11 24       	eor	r1, r1
    25f4:	08 95       	ret

000025f6 <__mulshisi3>:
    25f6:	b7 ff       	sbrs	r27, 7
    25f8:	0c 94 f0 12 	jmp	0x25e0	; 0x25e0 <__muluhisi3>

000025fc <__mulohisi3>:
    25fc:	0e 94 f0 12 	call	0x25e0	; 0x25e0 <__muluhisi3>
    2600:	82 1b       	sub	r24, r18
    2602:	93 0b       	sbc	r25, r19
    2604:	08 95       	ret

00002606 <__prologue_saves__>:
    2606:	2f 92       	push	r2
    2608:	3f 92       	push	r3
    260a:	4f 92       	push	r4
    260c:	5f 92       	push	r5
    260e:	6f 92       	push	r6
    2610:	7f 92       	push	r7
    2612:	8f 92       	push	r8
    2614:	9f 92       	push	r9
    2616:	af 92       	push	r10
    2618:	bf 92       	push	r11
    261a:	cf 92       	push	r12
    261c:	df 92       	push	r13
    261e:	ef 92       	push	r14
    2620:	ff 92       	push	r15
    2622:	0f 93       	push	r16
    2624:	1f 93       	push	r17
    2626:	cf 93       	push	r28
    2628:	df 93       	push	r29
    262a:	cd b7       	in	r28, 0x3d	; 61
    262c:	de b7       	in	r29, 0x3e	; 62
    262e:	ca 1b       	sub	r28, r26
    2630:	db 0b       	sbc	r29, r27
    2632:	0f b6       	in	r0, 0x3f	; 63
    2634:	f8 94       	cli
    2636:	de bf       	out	0x3e, r29	; 62
    2638:	0f be       	out	0x3f, r0	; 63
    263a:	cd bf       	out	0x3d, r28	; 61
    263c:	09 94       	ijmp

0000263e <__epilogue_restores__>:
    263e:	2a 88       	ldd	r2, Y+18	; 0x12
    2640:	39 88       	ldd	r3, Y+17	; 0x11
    2642:	48 88       	ldd	r4, Y+16	; 0x10
    2644:	5f 84       	ldd	r5, Y+15	; 0x0f
    2646:	6e 84       	ldd	r6, Y+14	; 0x0e
    2648:	7d 84       	ldd	r7, Y+13	; 0x0d
    264a:	8c 84       	ldd	r8, Y+12	; 0x0c
    264c:	9b 84       	ldd	r9, Y+11	; 0x0b
    264e:	aa 84       	ldd	r10, Y+10	; 0x0a
    2650:	b9 84       	ldd	r11, Y+9	; 0x09
    2652:	c8 84       	ldd	r12, Y+8	; 0x08
    2654:	df 80       	ldd	r13, Y+7	; 0x07
    2656:	ee 80       	ldd	r14, Y+6	; 0x06
    2658:	fd 80       	ldd	r15, Y+5	; 0x05
    265a:	0c 81       	ldd	r16, Y+4	; 0x04
    265c:	1b 81       	ldd	r17, Y+3	; 0x03
    265e:	aa 81       	ldd	r26, Y+2	; 0x02
    2660:	b9 81       	ldd	r27, Y+1	; 0x01
    2662:	ce 0f       	add	r28, r30
    2664:	d1 1d       	adc	r29, r1
    2666:	0f b6       	in	r0, 0x3f	; 63
    2668:	f8 94       	cli
    266a:	de bf       	out	0x3e, r29	; 62
    266c:	0f be       	out	0x3f, r0	; 63
    266e:	cd bf       	out	0x3d, r28	; 61
    2670:	ed 01       	movw	r28, r26
    2672:	08 95       	ret

00002674 <__umulhisi3>:
    2674:	a2 9f       	mul	r26, r18
    2676:	b0 01       	movw	r22, r0
    2678:	b3 9f       	mul	r27, r19
    267a:	c0 01       	movw	r24, r0
    267c:	a3 9f       	mul	r26, r19
    267e:	70 0d       	add	r23, r0
    2680:	81 1d       	adc	r24, r1
    2682:	11 24       	eor	r1, r1
    2684:	91 1d       	adc	r25, r1
    2686:	b2 9f       	mul	r27, r18
    2688:	70 0d       	add	r23, r0
    268a:	81 1d       	adc	r24, r1
    268c:	11 24       	eor	r1, r1
    268e:	91 1d       	adc	r25, r1
    2690:	08 95       	ret

00002692 <_exit>:
    2692:	f8 94       	cli

00002694 <__stop_program>:
    2694:	ff cf       	rjmp	.-2      	; 0x2694 <__stop_program>
